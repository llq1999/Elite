; Target assembler: cc65 v2.18.0 [--target none -C Elite_cc65.cfg]
;*******************************************************************************
;* Elite for the Apple II                                                      *
;* Copyright 1985 David Braben and Ian Bell                                    *
;*                                                                             *
;*   ** THIS IS A WORK IN PROGRESS **                                          *
;*   (large sections of the code are uncommented)                              *
;*                                                                             *
;*******************************************************************************
;* This file was assembled from the two main game files and descrambled.  See  *
;* the 6502disassembly site for a full explanation.                            *
;*******************************************************************************
;* Disassembly by Andy McFadden, using 6502bench SourceGen v1.6.               *
;* Last updated 2020/03/18                                                     *
;*                                                                             *
;* The disassembly of the platform-neutral code is based heavily on the work   *
;* of others:                                                                  *
;*   Paul Brink's commented BBC Micro sources                                  *
;*   Kroc Camen's C64 project: https://github.com/Kroc/elite-harmless          *
;*                                                                             *
;* And of course thanks to Ian Bell for sharing the original BBC Micro         *
;* sources.                                                                    *
;*******************************************************************************
         .setcpu "6502"
EOR_FLIGHT =     $23        ;EOR value for flight text tokens
EOR_DOCKED =     $57        ;EOR value for docked text tokens
IWM_PH0_OFF =    $c080      ;IWM phase 0 off
IWM_MOTOR_OFF =  $c088      ;IWM motor off
IWM_MOTOR_ON =   $c089      ;IWM motor on
IWM_DRIVE_1 =    $c08a      ;IWM select drive 1
IWM_Q6_OFF =     $c08c      ;IWM read
IWM_Q6_ON =      $c08d      ;IWM WP-sense
IWM_Q7_OFF =     $c08e      ;IWM WP-sense/read
IWM_Q7_ON =      $c08f      ;IWM write

rng_state =      $02
INWK     =       $0c
polyobj_xpos_lo = $0c
polyobj_ypos_lo = $0f
polyobj_zpos_lo = $12
polyobj_zpos_mi = $13
polyobj_zpos_hi = $14
polyobj_mox2_hi = $1a
polyobj_vertex_lo = $27
polyobj_roll =   $29
polyobj_pitch =  $2a
polyobj_vis =    $2b
polyobj_attack = $2c
tmp_ptr2 =       $2d
text_hposn =     $34        ;text horizontal position (0-30)
text_vposn =     $36        ;text vertical position (0-23)
text_mod_flags = $37        ;$80=conv upper, $40=conv lower, $ff=discard
hull_ptr =       $5a
polyobj_ptr =    $5c
ecm_active_flag = $6a       ;initially $20, counts down
missile_thing =  $7f
input_raw_key =  $80        ;last key hit ($01-7f), or $00 if none
cmd_throttle_down = $81     ;bool 00/ff: throttle-down cmd
cmd_throttle_up = $82       ;bool 00/ff: throttle-up cmd
cmd_roll_left =  $83        ;bool 00/ff: roll-left cmd
cmd_roll_right = $84        ;bool 00/ff: roll-right cmd
cmd_pitch_down = $85        ;bool 00/ff: pitch-down cmd
cmd_pitch_up =   $86        ;bool 00/ff: pitch-up cmd
cmd_fire_laser = $87        ;bool 00/ff: fire-laser cmd
cmd_energy_bomb = $88       ;bool 00/ff: energy bomb cmd
cmd_escape_cap = $89        ;bool 00/ff: escape capsule cmd
cmd_targ_mssl =  $8a        ;bool 00/ff: target missile cmd
cmd_unarm_mssl = $8b        ;bool 00/ff: un-arm missile cmd
cmd_fire_mssl =  $8c        ;bool 00/ff: fire missile
cmd_ecm  =       $8d        ;bool 00/ff: ECM cmd
cmd_local_jump = $8e        ;bool 00/ff: local jump cmd
cmd_dock_on =    $8f        ;bool 00/ff: dock comp on cmd
cmd_dock_off =   $90        ;bool 00/ff: dock comp off cmd
player_speed =   $a9        ;player's current forward speed
displayed_screen = $b3      ;0 for space view, various for other screens
docked_flag =    $ba        ;bool 00/ff: are we currently docked?
display_mode_flag = $cd     ;bool (hi bit): showing text screen?
roll_velocity =  $d1
pitch_velocity = $d2
BUFFER_0100 =    $0100
PLAYER_STATE =   $0241
computer_dock_flag = $026c  ;bool 00/ff: is docking computer driving?
player_ecm_active = $026d
witch_space_flag = $026e    ;flag for witch space
main_dec2_thing = $0273
player_laser_temp = $0274   ;laser temperature
lcoord_swap_flag = $027d    ;bool 00/ff: did we swap start/end?
intro_parameter = $0284
player_credits = $0298      ;current credits, in big-endian order
player_fuel =    $029c      ;0-70
ship_state1 =    $029d
ship_state2 =    $029e
cargo_capacity = $02a5
player_cargo =   $02a6      ;items in player cargo bay
have_ecm =       $02b7      ;bool 00/ff: ship has ECM device
have_fuel_scoop = $02b8     ;bool 00/ff: ship has fuel scoop
have_energy_bomb = $02b9    ;00/7f/ff?
have_energy_unit = $02ba    ;bool 00/ff: ship has energy unit
have_docking_comp = $02bb   ;bool 00/ff: ship has docking computer
have_galactic_hyper = $02bc ;bool 00/ff: ship has galactic jump
have_escape_pod = $02bd     ;bool 00/ff: escape pod equipped?
kill_score_rem = $02c1      ;kill score remainder
missile_armed_flag = $02c2
player_fug_inno = $02c3     ;player fugitive / innocent status
kill_score =     $02d6      ;number of kills
in_flight_msg_token = $02dc ;flight token for briefly-shown messages
NMIVEC   =       $03fb
xcoords  =       $0400
ycoords  =       $0500
SCRNHOLE5 =      $06f8      ;text page 1 screen holes
data_buffer =    $0800      ;used for RWTS et.al.
KBD      =       $c000      ;R last key pressed + 128
KBDSTRB  =       $c010      ;RW keyboard strobe
SPKR     =       $c030      ;RW toggle speaker
TXTCLR   =       $c050      ;RW display graphics
TXTSET   =       $c051      ;RW display text
MIXCLR   =       $c052      ;RW display full screen
TXTPAGE1 =       $c054      ;RW display page 1
HIRES    =       $c057      ;RW display hi-res graphics
BUTN0    =       $c061      ;R switch input 0 / open-apple
BUTN1    =       $c062      ;R switch input 1 / closed-apple
PADDL0   =       $c064      ;R analog input 0
PTRIG    =       $c070      ;RW analog input reset
ROMIN    =       $c081      ;RWx2 read ROM, write RAM bank 2
LCBANK1  =       $c08b      ;RWx2 read/write RAM bank 1

; 
; This is executed when ELA is BRUN.  It attempts to do an unnecessary (and
; possibly unsuccessful) copy of some data to the language card, and then exits.
; My guess is this is left over from a loader used during development that
; copied stuff into the LC, loaded everything else, then memory-moved the LC
; contents on top of DOS.
; 
; This area is used for data storage once the game starts.
; 
;         .segment "SEG000"
         .org    $0a00
src_ptr  .set    $00
dst_ptr  .set    $02
L0A00:   lda     TXTPAGE1
         lda     MIXCLR
         lda     HIRES
         lda     TXTCLR
         lda     src_ptr
         pha
         lda     src_ptr+1
         pha
         lda     dst_ptr
         pha
         lda     dst_ptr+1
         pha
         lda     LCBANK1    ;read/write LC bank 1 -- not guaranteed to
         lda     #$00       ; write-enable since it's not touched twice
         sta     src_ptr
         lda     #$40
         sta     src_ptr+1
         lda     #$00
         sta     dst_ptr
         lda     #$d0
         sta     dst_ptr+1
         ldy     #$00
         ldx     #$30
L0A2F:   lda     (src_ptr),y
         sta     (dst_ptr),y
         iny
         bne     L0A2F
         inc     src_ptr+1
         inc     dst_ptr+1
         dex
         bne     L0A2F
         lda     ROMIN
         pla
         sta     dst_ptr+1
         pla
         sta     dst_ptr
         pla
         sta     src_ptr+1
         pla
         sta     src_ptr
         rts

         .byte   $20,$20,$45,$51,$55,$57,$26,$44,$30,$35,$30,$3a,$45,$51,$55,$57
         .byte   $26
; Storage for disk access code.
rwts_track:
         .byte   $44
rwts_sector:
         .byte   $30
rwts_current_track:
         .byte   $35
rwts_ts_track:
         .byte   $30
rwts_ts_sector:
         .byte   $3a
rwts_alloc_track:
         .byte   $45
rwts_alloc_sector:
         .byte   $51
rwts_delay_ctr:
         .word   $5755
rwts_retry_2:
         .byte   $26
rwts_retry_1:
         .byte   $44
rwts_slot:
         .byte   $30
rwts_find_slot_flag:
         .byte   $35
rwts_saved_stack:
         .byte   $30
rwts_addr_fields:
         .byte   $3a
rwts_addr_sect:
         .byte   $45
rwts_addr_track:
         .byte   $51
         .byte   $55,$57,$26,$44,$30,$35,$30,$0d,$07,$df,$32,$2e,$53,$43,$54,$42
         .byte   $48,$20,$45,$51,$55,$57,$26,$32,$30,$32,$30,$3a,$45,$51,$55,$57
         .byte   $26,$32,$31,$32,$31,$3a,$45,$51,$55,$57,$26,$32,$32,$32,$32,$3a
         .byte   $45,$51,$55,$57,$26,$32,$33,$32,$33,$0d,$07,$e4,$32,$20,$20,$20
         .byte   $20,$20,$20,$20,$45,$51,$55,$57,$26,$32,$30,$32,$30,$3a,$45,$51
         .byte   $55,$57,$26,$32,$31,$32,$31,$3a,$45,$51,$55,$57,$26,$32,$32,$32
         .byte   $32,$3a,$45,$51,$55,$57,$26,$32,$33,$32,$33,$0d,$07
; 
; Saved games are 110 bytes.
; 
; The file actually spans 114 bytes, because the first 4 bytes of the file are
; unused (would be the 'B' file header).  The next 106 bytes are scrambled with
; the RNG, and the last 4 bytes hold the RNG seed.
; 
; The code copies 76 bytes from +20 ($14-5F).
; 
scram_save_data:
         .byte   $e9,$32,$20,$20,$20,$20,$20,$20,$20,$45,$51,$55,$57,$26,$32,$30
         .byte   $32,$30,$3a,$45,$51,$55,$57,$26,$32,$31,$32,$31,$3a,$45,$51,$55
         .byte   $57,$26,$32,$32,$32,$32,$3a,$45,$51,$55,$57,$26,$32,$33,$32,$33
         .byte   $0d,$07,$eb,$3c,$20,$20,$20,$20,$20,$20,$20,$45,$51,$55,$57,$26
         .byte   $32,$30,$32,$30,$3a,$45,$51,$55,$57,$26,$32,$30,$32,$30,$3a,$45
         .byte   $51,$55,$57,$26,$32,$30,$32,$30,$3a,$45,$51,$55,$57,$26,$32,$30
         .byte   $32,$30,$20,$20,$20,$5c,$73,$61,$66,$65
scram_rng_seed:
         .byte   $74,$79,$0d,$07
         .byte   $ee,$33,$2e,$53,$43,$54,$42,$48,$32,$20,$45,$51,$55,$57,$26,$33
         .byte   $43,$33,$43,$3a,$45,$51
; 
; A set of null-terminated strings that have been tokenized and EORed with $23
; (the $00 string terminators are not EORed).  Strings may recursively refer to
; other strings.
; 
; For example:
;  03 60 6b a9 77 00 --> 20 43 48 8a 54 --> "[$80] C H AR T"
; 
; See PrintFlightToken @ $7144 for an explanation of the mechanism.
; 
; Note there are two occurrences of $23 in the table, which become token $00
; (prints the cash balance).  This prevents us from trivially EORing the table
; to plaintext.
; 
flight_text:
         .byte   $4c,$32,$24,$00,$03,$60,$6b,$a9,$77,$00,$64,$6c,$b5,$71,$6d,$6e
         .byte   $b1,$77,$00,$67,$b2,$62,$32,$20,$00,$af,$b5,$6d,$77,$ba,$7a,$2f
         .byte   $00,$70,$7a,$70,$bf,$6e,$00,$73,$bd,$a6,$00,$21,$03,$a8,$71,$68
         .byte   $66,$77,$03,$85,$70,$00,$af,$67,$ab,$77,$bd,$a3,$00,$62,$64,$bd
         .byte   $60,$76,$6f,$77,$76,$b7,$6f,$00,$bd,$60,$6b,$03,$00,$62,$b5,$b7
         .byte   $a0,$03,$00,$73,$6c,$ba,$03,$00,$a8,$af,$6f,$7a,$03,$00,$76,$6d
         .byte   $6a,$77,$00,$75,$6a,$66,$74,$03,$00,$b9,$b8,$b4,$77,$7a,$00,$b8
         .byte   $a9,$60,$6b,$7a,$00,$65,$66,$76,$67,$a3,$00,$6e,$76,$6f,$b4,$0e
         .byte   $81,$00,$ae,$60,$77,$b2,$ba,$9a,$00,$d8,$6e,$76,$6d,$be,$77,$00
         .byte   $60,$bc,$65,$bb,$b3,$62,$60,$7a,$00,$67,$66,$6e,$6c,$60,$b7,$60
         .byte   $7a,$00,$60,$ba,$73,$ba,$b2,$66,$03,$e8,$b2,$66,$00,$70,$6b,$6a
         .byte   $73,$00,$73,$dd,$67,$76,$60,$77,$00,$03,$b6,$70,$b3,$00,$6b,$76
         .byte   $6e,$b8,$03,$60,$6c,$6f,$bc,$6a,$a3,$00,$6b,$7a,$73,$b3,$70,$73
         .byte   $62,$a6,$03,$00,$70,$6b,$ba,$77,$03,$e9,$82,$00,$ae,$e8,$b8,$a6
         .byte   $00,$73,$6c,$73,$76,$6f,$b2,$6a,$bc,$00,$64,$dd,$70,$70,$03,$99
         .byte   $6a,$75,$6a,$77,$7a,$00,$66,$60,$bc,$6c,$6e,$7a,$00,$03,$6f,$6a
         .byte   $64,$6b,$77,$03,$7a,$66,$a9,$70,$00,$bf,$60,$6b,$0d,$a2,$b5,$6f
         .byte   $00,$60,$62,$70,$6b,$00,$03,$a5,$2c,$6a,$bc,$00,$59,$82,$22,$00
         .byte   $77,$a9,$a0,$77,$03,$6f,$6c,$e8,$00,$49,$03,$69,$62,$6e,$6e,$bb
         .byte   $00,$71,$b8,$a0,$00,$70,$77,$00,$93,$03,$6c,$65,$03,$00,$70,$66
         .byte   $2c,$00,$03,$60,$a9,$64,$6c,$25,$00,$66,$b9,$6a,$73,$00,$65,$6c
         .byte   $6c,$67,$00,$bf,$7b,$b4,$6f,$aa,$00,$b7,$ae,$6c,$62,$60,$b4,$b5
         .byte   $70,$00,$70,$b6,$b5,$70,$00,$6f,$6a,$b9,$ba,$0c,$74,$af,$aa,$00
         .byte   $6f,$76,$7b,$76,$bd,$aa,$00,$6d,$a9,$60,$6c,$b4,$60,$70,$00,$d8
         .byte   $73,$76,$77,$b3,$70,$00,$a8,$60,$6b,$af,$b3,$7a,$00,$62,$6f,$6f
         .byte   $6c,$7a,$70,$00,$65,$6a,$ad,$a9,$6e,$70,$00,$65,$76,$71,$70,$00
         .byte   $6e,$af,$b3,$a3,$70,$00,$64,$6c,$6f,$67,$00,$73,$6f,$b2,$af,$76
         .byte   $6e,$00,$a0,$6e,$0e,$e8,$bc,$aa,$00,$a3,$6a,$b1,$03,$5c,$70,$00
         .byte   $2f,$12,$13,$23,$16,$23,$00,$03,$60,$71,$00,$6f,$a9,$a0,$00,$65
         .byte   $6a,$b3,$a6,$00,$70,$a8,$2c,$00,$64,$ad,$b1,$00,$71,$bb,$00,$7a
         .byte   $66,$2c,$6c,$74,$00,$61,$6f,$76,$66,$00,$61,$b6,$60,$68,$00,$35
         .byte   $00,$70,$6f,$6a,$6e,$7a,$00,$61,$76,$64,$0e,$66,$7a,$bb,$00,$6b
         .byte   $ba,$6d,$bb,$00,$61,$bc,$7a,$00,$65,$b2,$00,$65,$76,$71,$71,$7a
         .byte   $00,$dd,$67,$b1,$77,$00,$65,$dd,$64,$00,$6f,$6a,$a7,$71,$67,$00
         .byte   $6f,$6c,$61,$e8,$b3,$00,$a5,$71,$67,$00,$6b,$76,$6e,$b8,$6c,$6a
         .byte   $67,$00,$65,$66,$6f,$af,$66,$00,$af,$70,$66,$60,$77,$00,$88,$b7
         .byte   $ae,$ab,$00,$60,$6c,$6e,$00,$d8,$6e,$b8,$67,$b3,$00,$03,$67,$aa
         .byte   $77,$dd,$7a,$bb,$00,$71,$6c,$00,$8d,$03,$03,$93,$2f,$03,$99,$03
         .byte   $03,$03,$8d,$03,$85,$03,$65,$ba,$03,$70,$62,$a2,$2f,$29,$00,$65
         .byte   $71,$bc,$77,$00,$ad,$a9,$00,$a2,$65,$77,$00,$bd,$64,$6b,$77,$00
         .byte   $5a,$6f,$6c,$74,$24,$00,$40,$32,$df,$02,$00,$66,$7b,$77,$b7,$03
         .byte   $00,$73,$76,$6f,$70,$66,$98,$00,$b0,$62,$6e,$98,$00,$65,$76,$66
         .byte   $6f,$00,$6e,$be,$70,$6a,$a2,$00,$c0,$ed,$03,$61,$62,$7a,$00,$66
         .byte   $0d,$60,$0d,$6e,$0d,$86,$00,$45,$44,$70,$00,$45,$4b,$70,$00,$4a
         .byte   $03,$70,$60,$6c,$6c,$73,$70,$00,$aa,$60,$62,$73,$66,$03,$73,$6c
         .byte   $67,$00,$5a,$61,$6c,$6e,$61,$00,$5a,$8d,$00,$67,$6c,$60,$68,$af
         .byte   $64,$03,$f4,$00,$59,$03,$9e,$00,$6e,$6a,$6f,$6a,$77,$a9,$7a,$03
         .byte   $98,$00,$6e,$af,$af,$64,$03,$98,$00,$e6,$19,$23,$00,$af,$d8,$af
         .byte   $64,$03,$49,$00,$b1,$b3,$64,$7a,$03,$00,$64,$62,$b6,$60,$b4,$60
         .byte   $00,$50,$03,$6c,$6d,$00,$62,$2c,$00,$26,$a2,$64,$a3,$03,$e8,$b2
         .byte   $ab,$19,$00,$df,$03,$27,$2f,$2f,$2f,$25,$3c,$03,$86,$2a,$21,$2f
         .byte   $9e,$86,$2a,$20,$2f,$60,$bc,$ae,$b4,$bc,$2a,$00,$6a,$bf,$6e,$00
         .byte   $00,$6f,$6f,$00,$b7,$b4,$6d,$64,$19,$00,$03,$bc,$03,$00,$2f,$2b
         .byte   $ec,$6e,$b1,$77,$19,$25,$00,$60,$a2,$b8,$00,$6c,$65,$65,$b1,$67
         .byte   $b3,$00,$65,$76,$64,$6a,$b4,$b5,$00,$6b,$a9,$6e,$a2,$70,$70,$00
         .byte   $6e,$6c,$e8,$6f,$7a,$03,$35,$00,$8f,$00,$88,$00,$62,$61,$6c,$b5
         .byte   $03,$88,$00,$d8,$73,$66,$77,$b1,$77,$00,$67,$b8,$a0,$dd,$ab,$00
         .byte   $67,$66,$62,$67,$6f,$7a,$00,$0e,$0e,$0e,$0e,$03,$66,$03,$6f,$03
         .byte   $6a,$03,$77,$03,$66,$03,$0e,$0e,$0e,$0e,$00,$73,$ad,$70,$b1,$77
         .byte   $00,$2b,$64,$62,$6e,$66,$03,$6c,$b5,$71,$00,$00
         .byte   $00,$32,$37,$3e ;junk?
; 
; Table of sines.  The 32 entries are computed with:
; 
;   entry[i] = round(sin(i / 32.0 * PI) * 255)
; 
sine_table:
         .byte   $00,$19,$32,$4a,$62,$79,$8e,$a2,$b5,$c6,$d5,$e2,$ed,$f5,$fb,$ff
         .byte   $ff,$ff,$fb,$f5,$ed,$e2,$d5,$c6,$b5,$a2,$8e,$79,$62,$4a,$32,$19
; 
; A set of null-terminated tokenized strings used for messages while docked. 
; All of the data has been EORed with $57.
; 
; See PrintDockedStr @ $4b6e.
; 
docked_text:
         .byte   $57,$5e,$5c,$56,$5f,$77,$a6,$04,$1c,$77,$16,$14,$be,$04,$04,$77
         .byte   $1a,$12,$b6,$80,$5d,$55,$66,$79,$77,$c2,$80,$65,$79,$77,$04,$16
         .byte   $ad,$77,$cd,$77,$53,$80,$64,$79,$77,$13,$12,$11,$16,$02,$1b,$03
         .byte   $77,$56,$1d,$16,$1a,$ba,$88,$55,$80,$63,$79,$77,$12,$0f,$8c,$80
         .byte   $57,$57,$57,$14,$18,$1a,$07,$12,$ac,$ac,$88,$77,$b6,$1a,$15,$a3
         .byte   $6d,$57,$e7,$3a,$9d,$39,$e6,$57,$77,$77,$c2,$77,$56,$7f,$0e,$78
         .byte   $19,$7e,$68,$55,$5b,$5b,$57,$07,$a5,$04,$04,$77,$04,$07,$16,$be
         .byte   $77,$aa,$77,$11,$1e,$a5,$7b,$cd,$79,$5b,$5b,$57,$cd,$70,$04,$9f
         .byte   $57,$5b,$56,$8b,$b2,$10,$b3,$77,$12,$1b,$1e,$03,$12,$77,$1e,$1e
         .byte   $77,$11,$1e,$b2,$57,$40,$59,$55,$10,$a5,$8a,$a7,$10,$04,$82,$e5
         .byte   $44,$1e,$77,$a0,$10,$87,$1a,$18,$1a,$a1,$03,$77,$18,$11,$77,$e4
         .byte   $05,$77,$01,$b3,$02,$8f,$b2,$77,$ac,$1a,$12,$9b,$00,$12,$77,$00
         .byte   $8e,$1b,$13,$77,$1b,$1e,$1c,$12,$77,$e4,$9e,$13,$18,$87,$1b,$8c
         .byte   $03,$b2,$77,$1d,$18,$15,$77,$11,$aa,$77,$bb,$9b,$c4,$98,$77,$e4
         .byte   $77,$8d,$12,$77,$1f,$12,$a5,$9d,$16,$85,$1a,$18,$13,$12,$1b,$7b
         .byte   $77,$c4,$44,$14,$88,$89,$05,$1e,$14,$03,$aa,$7b,$77,$12,$a9,$1e
         .byte   $07,$93,$00,$1e,$b5,$87,$03,$18,$07,$77,$8d,$14,$05,$8a,$85,$04
         .byte   $1f,$1e,$12,$1b,$13,$77,$10,$a1,$a3,$a2,$aa,$9b,$02,$19,$11,$aa
         .byte   $03,$02,$19,$a2,$12,$1b,$0e,$77,$8c,$70,$04,$77,$a0,$a1,$77,$89
         .byte   $18,$1b,$a1,$9b,$41,$8c,$77,$00,$a1,$03,$77,$1a,$1e,$04,$04,$94
         .byte   $11,$05,$18,$1a,$77,$8e,$05,$77,$98,$77,$0e,$b9,$13,$77,$88,$77
         .byte   $44,$b1,$a3,$77,$11,$1e,$ad,$77,$1a,$88,$b5,$04,$77,$16,$10,$18
         .byte   $e5,$4b,$9b,$e4,$05,$77,$1a,$1e,$04,$04,$1e,$88,$7b,$77,$04,$1f
         .byte   $8e,$1b,$13,$77,$e4,$77,$13,$12,$14,$1e,$13,$12,$9e,$16,$14,$be
         .byte   $07,$03,$77,$8c,$7b,$77,$1e,$04,$9e,$8d,$12,$1c,$e5,$13,$ba,$03
         .byte   $05,$18,$0e,$77,$c3,$98,$9b,$e4,$77,$16,$a5,$77,$14,$16,$02,$ac
         .byte   $88,$93,$b5,$a2,$77,$88,$1b,$0e,$77,$51,$22,$52,$04,$77,$00,$8b
         .byte   $1b,$77,$07,$a1,$8a,$af,$03,$12,$77,$c4,$19,$12,$00,$77,$04,$1f
         .byte   $1e,$12,$1b,$13,$04,$e5,$b5,$a2,$77,$c4,$44,$14,$88,$89,$05,$1e
         .byte   $14,$03,$aa,$9d,$11,$8c,$03,$93,$00,$1e,$b5,$77,$a8,$77,$51,$3b
         .byte   $52,$e6,$55,$5f,$10,$18,$18,$13,$77,$1b,$02,$14,$1c,$7b,$77,$cd
         .byte   $83,$41,$57,$4e,$5e,$40,$59,$55,$77,$77,$a2,$03,$a1,$ac,$88,$82
         .byte   $79,$77,$44,$00,$12,$77,$1f,$16,$ad,$77,$19,$12,$93,$18,$11,$77
         .byte   $e4,$05,$77,$8d,$05,$01,$1e,$14,$ba,$77,$16,$10,$16,$a7,$9b,$1e
         .byte   $11,$77,$e4,$77,$00,$8e,$1b,$13,$77,$a0,$77,$bc,$77,$10,$18,$18
         .byte   $13,$77,$16,$04,$9e,$10,$18,$9e,$44,$be,$a3,$a6,$77,$e4,$77,$00
         .byte   $8b,$1b,$77,$a0,$77,$15,$05,$1e,$12,$11,$ab,$9b,$1e,$11,$77,$04
         .byte   $02,$14,$be,$04,$04,$11,$02,$1b,$7b,$77,$e4,$77,$00,$8b,$1b,$77
         .byte   $a0,$77,$00,$12,$1b,$1b,$77,$a5,$00,$b9,$13,$ab,$83,$4f,$57,$7f
         .byte   $44,$14,$7e,$92,$77,$66,$6e,$6f,$62,$57,$15,$0e,$92,$57,$42,$c6
         .byte   $9f,$4d,$57,$4e,$5e,$40,$59,$55,$77,$77,$14,$88,$10,$af,$03,$02
         .byte   $ae,$ac,$88,$04,$77,$cd,$76,$5b,$5b,$b5,$a3,$12,$5a,$77,$00,$8b
         .byte   $1b,$77,$b3,$00,$16,$0e,$04,$77,$a0,$87,$07,$ae,$be,$77,$11,$aa
         .byte   $77,$e4,$77,$a7,$84,$9b,$a8,$13,$77,$b8,$0e,$a0,$77,$bc,$88,$a3
         .byte   $77,$b5,$a8,$77,$e4,$77,$b5,$a7,$1c,$79,$79,$83,$4f,$57,$11,$8f
         .byte   $b2,$13,$57,$b4,$03,$8f,$b2,$57,$00,$12,$1b,$1b,$77,$1c,$b4,$00
         .byte   $19,$57,$11,$16,$1a,$18,$bb,$57,$b4,$03,$ab,$57,$ad,$05,$0e,$57
         .byte   $1a,$8b,$13,$1b,$0e,$57,$1a,$18,$89,$57,$a5,$16,$04,$88,$8f,$1b
         .byte   $0e,$57,$57,$f2,$57,$25,$57,$10,$a5,$a2,$57,$01,$16,$89,$57,$07
         .byte   $a7,$1c,$57,$55,$20,$77,$21,$5a,$77,$ee,$16,$ac,$88,$04,$57,$cb
         .byte   $04,$57,$22,$57,$d7,$77,$11,$aa,$ba,$03,$04,$57,$18,$be,$a8,$04
         .byte   $57,$04,$1f,$0e,$19,$ba,$04,$57,$04,$8b,$1b,$a7,$ba,$04,$57,$b8
         .byte   $03,$94,$03,$af,$a6,$ac,$88,$04,$57,$b7,$a2,$1f,$94,$18,$11,$77
         .byte   $33,$57,$b7,$ad,$77,$11,$aa,$77,$33,$57,$11,$18,$18,$13,$77,$15
         .byte   $b2,$19,$13,$a3,$04,$57,$03,$8e,$05,$1e,$89,$04,$57,$07,$18,$8a
         .byte   $05,$0e,$57,$a6,$04,$14,$18,$04,$57,$3b,$57,$00,$b3,$1c,$94,$c9
         .byte   $57,$14,$af,$15,$57,$15,$a2,$57,$b7,$15,$89,$57,$45,$57,$a0,$04
         .byte   $8a,$57,$07,$ae,$10,$02,$ab,$57,$af,$01,$16,$10,$ab,$57,$14,$02
         .byte   $05,$04,$ab,$57,$04,$14,$8e,$05,$10,$ab,$57,$26,$77,$14,$1e,$01
         .byte   $8b,$77,$00,$b9,$57,$3f,$77,$08,$77,$37,$04,$57,$16,$77,$3f,$77
         .byte   $a6,$8d,$16,$8d,$57,$26,$77,$12,$b9,$b5,$a9,$16,$1c,$ba,$57,$26
         .byte   $77,$bc,$ae,$05,$77,$16,$14,$ac,$01,$8c,$0e,$57,$f8,$0a,$77,$09
         .byte   $57,$c4,$46,$77,$08,$77,$37,$57,$f8,$96,$04,$70,$77,$35,$77,$34
         .byte   $57,$55,$2d,$5a,$57,$f8,$3c,$77,$3b,$57,$1d,$02,$1e,$be,$57,$15
         .byte   $af,$19,$13,$0e,$57,$00,$a2,$a3,$57,$15,$a5,$00,$57,$10,$b9,$10
         .byte   $b2,$77,$15,$ae,$89,$a3,$04,$57,$45,$57,$46,$77,$37,$57,$46,$77
         .byte   $45,$57,$46,$77,$3f,$57,$3f,$77,$45,$57,$11,$8f,$02,$b7,$bb,$57
         .byte   $12,$0f,$18,$ac,$14,$57,$1f,$18,$18,$07,$0e,$57,$02,$b6,$04,$02
         .byte   $b3,$57,$12,$0f,$14,$8c,$a7,$10,$57,$14,$02,$1e,$04,$a7,$12,$57
         .byte   $19,$1e,$10,$1f,$03,$77,$1b,$1e,$11,$12,$57,$14,$16,$04,$1e,$b4
         .byte   $04,$57,$04,$8c,$77,$14,$18,$1a,$04,$57,$55,$2d,$5a,$57,$54,$57
         .byte   $c4,$c6,$77,$54,$57,$c4,$c5,$77,$54,$57,$c3,$c6,$57,$c3,$c5,$57
         .byte   $04,$88,$77,$18,$11,$87,$15,$8c,$14,$1f,$57,$04,$14,$8e,$19,$13
         .byte   $a5,$1b,$57,$15,$ae,$14,$1c,$10,$02,$b9,$13,$57,$05,$18,$10,$02
         .byte   $12,$57,$00,$1f,$aa,$ba,$88,$77,$a0,$8a,$b2,$77,$1f,$12,$16,$13
         .byte   $93,$11,$ae,$07,$77,$12,$b9,$70,$13,$77,$1c,$19,$16,$ad,$57,$19
         .byte   $77,$02,$19,$a5,$b8,$05,$1c,$8f,$b2,$57,$77,$15,$aa,$a7,$10,$57
         .byte   $77,$13,$02,$1b,$1b,$57,$77,$03,$12,$a6,$18,$bb,$57,$77,$a5,$01
         .byte   $18,$1b,$03,$a7,$10,$57,$c6,$57,$c5,$57,$07,$ae,$be,$57,$1b,$8c
         .byte   $03,$b2,$77,$c6,$57,$13,$02,$1a,$07,$57,$1e,$77,$1f,$12,$b9,$87
         .byte   $25,$77,$b7,$18,$1c,$94,$98,$77,$16,$07,$07,$12,$b9,$93,$a2,$86
         .byte   $57,$0e,$12,$16,$1f,$7b,$77,$1e,$77,$1f,$12,$b9,$87,$25,$77,$98
         .byte   $77,$b2,$11,$03,$86,$87,$77,$00,$1f,$1e,$b2,$77,$15,$16,$14,$1c
         .byte   $57,$10,$8a,$77,$e4,$05,$77,$1e,$05,$88,$77,$16,$04,$04,$77,$18
         .byte   $01,$a3,$77,$03,$18,$86,$57,$bc,$1a,$12,$77,$24,$85,$98,$77,$00
         .byte   $16,$04,$77,$8d,$a1,$77,$a2,$86,$57,$03,$05,$0e,$86,$57,$57,$57
         .byte   $57,$57,$00,$16,$04,$07,$57,$1a,$18,$b5,$57,$10,$05,$02,$15,$57
         .byte   $a8,$03,$57,$45,$57,$07,$18,$8a,$57,$b9,$03,$04,$77,$10,$af,$13
         .byte   $02,$a2,$12,$57,$0e,$16,$1c,$57,$04,$19,$16,$8b,$57,$04,$1b,$02
         .byte   $10,$57,$03,$05,$18,$07,$1e,$14,$b3,$57,$13,$a1,$8d,$57,$af,$a7
         .byte   $57,$1e,$1a,$07,$a1,$8a,$af,$15,$b2,$57,$12,$0f,$02,$a0,$af,$19
         .byte   $03,$57,$11,$02,$19,$19,$0e,$57,$00,$12,$1e,$05,$13,$57,$02,$b6
         .byte   $04,$02,$b3,$57,$89,$af,$19,$b0,$57,$07,$12,$14,$02,$1b,$1e,$b9
         .byte   $57,$11,$a5,$a9,$a1,$03,$57,$18,$14,$14,$16,$04,$1e,$88,$b3,$57
         .byte   $02,$19,$07,$a5,$a6,$14,$03,$8f,$b2,$57,$13,$a5,$16,$13,$11,$02
         .byte   $1b,$57,$fc,$57,$0b,$77,$0c,$77,$11,$aa,$77,$32,$57,$db,$e5,$32
         .byte   $57,$31,$77,$15,$0e,$77,$30,$57,$db,$77,$15,$02,$03,$77,$d9,$57
         .byte   $77,$16,$38,$77,$27,$57,$07,$1b,$a8,$8a,$57,$00,$aa,$1b,$13,$57
         .byte   $b5,$12,$77,$57,$b5,$1e,$04,$77,$57,$b7,$16,$13,$85,$cd,$57,$5e
         .byte   $5c,$56,$5f,$57,$13,$05,$1e,$ad,$57,$77,$14,$a2,$16,$b7,$10,$02
         .byte   $12,$57,$1e,$a8,$57,$44,$14,$18,$1a,$1a,$a8,$13,$a3,$57,$3f,$57
         .byte   $1a,$8e,$19,$03,$16,$a7,$57,$ab,$1e,$15,$b2,$57,$03,$a5,$12,$57
         .byte   $04,$07,$18,$03,$03,$ab,$57,$2f,$57,$2e,$57,$36,$18,$1e,$13,$57
         .byte   $28,$57,$29,$57,$a8,$14,$1e,$a1,$03,$57,$12,$0f,$be,$07,$ac,$88
         .byte   $b3,$57,$12,$14,$be,$19,$03,$05,$1e,$14,$57,$a7,$10,$af,$a7,$ab
         .byte   $57,$25,$57,$1c,$8b,$1b,$a3,$57,$13,$12,$16,$13,$1b,$0e,$57,$12
         .byte   $01,$8b,$57,$b2,$b5,$b3,$57,$01,$1e,$14,$1e,$18,$bb,$57,$8c,$04
         .byte   $77,$57,$5a,$59,$44,$57,$79,$5b,$58,$57,$77,$a8,$13,$77,$57,$0e
         .byte   $8e,$57,$07,$b9,$1c,$94,$1a,$8a,$a3,$04,$57,$13,$bb,$03,$77,$14
         .byte   $b7,$02,$13,$04,$57,$1e,$be,$77,$a0,$05,$10,$04,$57,$05,$18,$14
         .byte   $1c,$77,$11,$aa,$b8,$ac,$88,$04,$57,$01,$18,$1b,$14,$16,$b4,$ba
         .byte   $57,$07,$1b,$a8,$03,$57,$03,$02,$1b,$1e,$07,$57,$15,$a8,$a8,$16
         .byte   $57,$14,$aa,$19,$57,$45,$00,$12,$ab,$57,$45,$57,$46,$77,$45,$57
         .byte   $46,$77,$3f,$57,$a7,$1f,$16,$bd,$03,$a8,$03,$57,$e8,$57,$a7,$10
         .byte   $77,$57,$ab,$77,$57,$77,$13,$79,$15,$af,$a0,$19,$77,$71,$77,$1e
         .byte   $79,$a0,$1b,$1b,$57,$57,$57,$77,$19,$16,$1a,$12,$68,$77,$57,$77
         .byte   $03,$18,$77,$57,$77,$1e,$04,$77,$57,$00,$16,$04,$77,$ae,$89,$77
         .byte   $8d,$a1,$77,$a2,$77,$44,$57,$79,$5b,$77,$44,$57,$13,$18,$14,$1c
         .byte   $ab,$57,$56,$7f,$0e,$78,$19,$7e,$68,$57,$04,$1f,$1e,$07,$57,$77
         .byte   $16,$77,$57,$77,$a3,$05,$1e,$bb,$57,$77,$19,$12,$00,$77,$57,$55
         .byte   $77,$1f,$a3,$77,$b8,$1d,$ba,$03,$0e,$70,$04,$77,$04,$07,$16,$be
         .byte   $77,$19,$16,$01,$0e,$5a,$57,$e6,$5f,$56,$77,$77,$1a,$ba,$04,$16
         .byte   $b0,$77,$a1,$13,$04,$57,$77,$cd,$77,$53,$7b,$77,$1e,$77,$5a,$16
         .byte   $1a,$55,$77,$14,$16,$07,$03,$16,$a7,$77,$4c,$77,$5a,$18,$11,$84
         .byte   $57,$57,$58,$77,$02,$19,$1c,$b4,$00,$19,$77,$c6,$57,$5e,$5f,$40
         .byte   $56,$77,$a7,$14,$18,$1a,$94,$1a,$ba,$04,$16,$b0,$57,$14,$02,$05
         .byte   $05,$02,$b5,$a3,$04,$57,$11,$18,$04,$13,$0e,$1c,$12,$77,$04,$1a
         .byte   $0e,$b5,$12,$57,$11,$aa,$03,$ba,$a9,$12,$57,$9c,$a5,$ba,$a6,$be
         .byte   $57,$1e,$04,$77,$a0,$1b,$1e,$12,$01,$ab,$9e,$1f,$16,$ad,$77,$1d
         .byte   $02,$1a,$07,$ab,$9e,$c3,$10,$b3,$16,$0f,$0e,$57,$4e,$5e,$4a,$59
         .byte   $55,$10,$18,$18,$13,$77,$13,$16,$0e,$77,$cd,$77,$53,$9b,$1e,$5a
         .byte   $77,$16,$1a,$77,$44,$16,$10,$a1,$03,$77,$44,$15,$ae,$1c,$12,$77
         .byte   $18,$11,$77,$44,$19,$16,$01,$b3,$77,$44,$a7,$03,$12,$1b,$b2,$10
         .byte   $a1,$be,$9b,$16,$04,$77,$e4,$77,$1c,$b4,$00,$7b,$77,$c4,$44,$19
         .byte   $16,$01,$0e,$77,$1f,$16,$ad,$77,$a0,$a1,$77,$1c,$12,$12,$07,$94
         .byte   $c4,$44,$b5,$b9,$10,$18,$1e,$13,$04,$77,$18,$11,$11,$77,$e4,$05
         .byte   $77,$16,$04,$04,$77,$8e,$03,$77,$a7,$77,$13,$12,$12,$07,$77,$04
         .byte   $07,$16,$be,$77,$11,$aa,$77,$b8,$19,$0e,$77,$0e,$12,$b9,$04,$77
         .byte   $b4,$00,$79,$77,$44,$00,$12,$1b,$1b,$77,$c4,$04,$8c,$02,$16,$ac
         .byte   $88,$77,$1f,$16,$04,$77,$14,$1f,$a8,$10,$ab,$9b,$8e,$05,$77,$15
         .byte   $18,$0e,$04,$77,$b9,$12,$77,$a5,$16,$13,$0e,$77,$11,$aa,$87,$07
         .byte   $02,$04,$1f,$77,$05,$1e,$10,$1f,$03,$9e,$c4,$1f,$18,$1a,$12,$77
         .byte   $04,$0e,$04,$03,$12,$1a,$77,$18,$11,$77,$b5,$18,$8d,$77,$1a,$02
         .byte   $05,$13,$a3,$a3,$04,$9b,$4f,$5e,$4a,$1e,$5a,$77,$1f,$16,$ad,$77
         .byte   $18,$15,$03,$16,$a7,$93,$c4,$13,$12,$11,$a1,$be,$77,$07,$ae,$19
         .byte   $04,$77,$11,$aa,$77,$b5,$12,$1e,$05,$77,$44,$1f,$1e,$ad,$77,$44
         .byte   $00,$aa,$1b,$13,$04,$9b,$c4,$a0,$8a,$b2,$04,$77,$1c,$b4,$00,$77
         .byte   $00,$12,$70,$ad,$77,$10,$18,$03,$77,$bc,$1a,$12,$b5,$94,$15,$02
         .byte   $03,$77,$b4,$03,$77,$00,$1f,$a2,$9b,$1e,$11,$77,$44,$1e,$77,$03
         .byte   $af,$19,$04,$1a,$8c,$77,$c4,$07,$ae,$19,$04,$9e,$8e,$05,$77,$15
         .byte   $16,$8d,$77,$88,$77,$44,$bd,$a5,$af,$77,$b5,$12,$0e,$70,$1b,$1b
         .byte   $77,$a7,$03,$a3,$be,$07,$03,$77,$c4,$03,$05,$a8,$04,$1a,$1e,$04
         .byte   $04,$1e,$88,$79,$77,$44,$1e,$77,$19,$12,$ab,$87,$98,$9e,$b8,$1c
         .byte   $12,$77,$c4,$05,$02,$19,$9b,$e4,$70,$a5,$77,$12,$b2,$14,$03,$ab
         .byte   $9b,$c4,$07,$ae,$19,$04,$77,$16,$a5,$77,$02,$19,$1e,$07,$02,$1b
         .byte   $8d,$77,$14,$18,$13,$93,$00,$1e,$b5,$a7,$77,$c3,$03,$05,$a8,$04
         .byte   $1a,$1e,$04,$04,$1e,$88,$9b,$5f,$e4,$77,$00,$8b,$1b,$77,$a0,$77
         .byte   $07,$16,$1e,$13,$9b,$77,$77,$77,$77,$44,$10,$18,$18,$13,$77,$1b
         .byte   $02,$14,$1c,$77,$cd,$83,$4f,$57,$4e,$5e,$4a,$5f,$59,$5a,$44,$00
         .byte   $12,$1b,$1b,$77,$13,$88,$12,$77,$cd,$9b,$e4,$77,$1f,$16,$ad,$77
         .byte   $8d,$05,$01,$93,$02,$04,$77,$00,$12,$1b,$1b,$e5,$00,$12,$77,$04
         .byte   $1f,$b3,$1b,$77,$a5,$1a,$12,$1a,$15,$a3,$9b,$00,$12,$77,$13,$1e
         .byte   $13,$77,$b4,$03,$77,$12,$0f,$07,$12,$14,$03,$77,$c4,$44,$b5,$b9
         .byte   $10,$18,$1e,$13,$04,$9e,$11,$a7,$13,$77,$8e,$03,$77,$16,$15,$8e
         .byte   $03,$77,$e4,$9b,$11,$aa,$77,$c4,$1a,$18,$1a,$a1,$03,$77,$07,$b2
         .byte   $16,$8d,$77,$16,$14,$be,$07,$03,$77,$c3,$44,$19,$16,$01,$0e,$77
         .byte   $51,$25,$52,$77,$16,$04,$77,$07,$16,$0e,$1a,$a1,$03,$83,$4f,$57
         .byte   $16,$a5,$77,$e4,$77,$04,$02,$a5,$68,$57,$04,$1f,$a5,$00,$57,$a0
         .byte   $16,$89,$57,$15,$1e,$04,$88,$57,$04,$19,$16,$1c,$12,$57,$00,$18
         .byte   $1b,$11,$57,$b2,$18,$07,$b9,$13,$57,$14,$a2,$57,$1a,$88,$1c,$12
         .byte   $0e,$57,$10,$18,$a2,$57,$11,$1e,$04,$1f,$57,$3d,$77,$3e,$57,$46
         .byte   $77,$2f,$77,$2c,$57,$f8,$3c,$77,$2e,$77,$2c,$57,$2b,$77,$2a,$57
         .byte   $3d,$77,$3e,$57,$1a,$12,$a2,$57,$14,$02,$03,$1b,$8a,$57,$89,$12
         .byte   $16,$1c,$57,$15,$02,$05,$10,$a3,$04,$57,$bc,$02,$07,$57,$1e,$be
         .byte   $57,$1a,$02,$13,$57,$0d,$a3,$18,$7a,$44,$10,$57,$01,$16,$14,$02
         .byte   $02,$1a,$57,$46,$77,$02,$1b,$03,$af,$57,$1f,$18,$14,$1c,$12,$0e
         .byte   $57,$14,$05,$1e,$14,$1c,$8a,$57,$1c,$b9,$a2,$12,$57,$07,$18,$b7
         .byte   $57,$03,$a1,$19,$1e,$04,$57,$5b,$49,$77,$a3,$05,$aa,$57
text_stuff1:
         .byte   $d3,$96,$24,$1c,$fd,$4f,$35,$76,$64,$20,$44,$a4,$dc,$6a,$10,$a2
         .byte   $03,$6b,$1a,$c0,$b8,$05,$65,$c1,$29
text_stuff2:
         .byte   $01,$80,$00,$00,$00,$01,$01,$01,$01,$82,$01,$01,$01,$01,$01,$01
         .byte   $01,$01,$01,$01,$01,$01,$01,$02,$01,$82,$90
; 
; More strings in "docked" format.  Index 0-26.
; 
ext_docked_text:
         .byte   $57,$c4,$14,$18,$b7,$19,$1e,$89,$04,$77,$1f,$12,$a5,$77,$1f,$16
         .byte   $ad,$77,$01,$1e,$18,$1b,$a2,$ab,$55,$77,$a7,$03,$a3,$10,$b3,$16
         .byte   $14,$ac,$14,$77,$14,$b7,$19,$94,$07,$05,$18,$03,$18,$14,$18,$1b
         .byte   $5a,$e5,$04,$1f,$8e,$1b,$13,$77,$a0,$77,$16,$01,$18,$1e,$13,$ab
         .byte   $57,$c4,$14,$88,$89,$05,$1e,$14,$03,$aa,$77,$9c,$a5,$ba,$a6,$be
         .byte   $7b,$77,$cd,$57,$16,$77,$25,$77,$b7,$18,$1c,$94,$98,$77,$b2,$11
         .byte   $03,$77,$1f,$12,$a5,$87,$00,$1f,$1e,$b2,$77,$15,$16,$14,$1c,$79
         .byte   $77,$1b,$18,$18,$1c,$93,$15,$8e,$19,$13,$77,$11,$aa,$77,$b9,$12
         .byte   $b1,$57,$0e,$12,$07,$7b,$87,$25,$85,$98,$77,$1f,$16,$13,$87,$10
         .byte   $b3,$16,$14,$ac,$14,$77,$1f,$0e,$07,$a3,$13,$05,$1e,$ad,$77,$11
         .byte   $8c,$03,$93,$1f,$12,$a5,$79,$77,$bb,$93,$8c,$77,$03,$18,$18,$57
         .byte   $c3,$77,$25,$77,$98,$77,$13,$12,$1f,$0e,$07,$93,$1f,$12,$a5,$77
         .byte   $11,$05,$18,$1a,$77,$b4,$00,$1f,$12,$a5,$7b,$77,$04,$02,$19,$77
         .byte   $04,$1c,$1e,$1a,$1a,$ab,$e5,$1d,$02,$1a,$07,$ab,$79,$77,$1e,$77
         .byte   $1f,$12,$b9,$77,$8c,$77,$00,$a1,$03,$9e,$a7,$bd,$a0,$57,$24,$77
         .byte   $98,$77,$00,$a1,$03,$77,$11,$aa,$77,$1a,$12,$77,$a2,$77,$16,$bb
         .byte   $b9,$79,$77,$1a,$0e,$77,$ae,$04,$a3,$04,$77,$13,$1e,$13,$19,$70
         .byte   $03,$77,$12,$01,$a1,$77,$04,$14,$af,$03,$14,$1f,$77,$c4,$24,$57
         .byte   $18,$1f,$77,$13,$12,$b9,$77,$1a,$12,$77,$0e,$ba,$79,$87,$11,$05
         .byte   $1e,$10,$1f,$03,$11,$02,$1b,$77,$05,$18,$10,$02,$12,$77,$00,$1e
         .byte   $b5,$77,$00,$1f,$a2,$77,$1e,$77,$a0,$1b,$1e,$12,$ad,$77,$e4,$77
         .byte   $07,$12,$18,$07,$b2,$77,$14,$b3,$1b,$87,$b2,$16,$13,$77,$07,$18
         .byte   $89,$a3,$1e,$aa,$77,$04,$1f,$18,$03,$77,$02,$07,$77,$b7,$03,$04
         .byte   $77,$18,$11,$77,$b5,$18,$8d,$77,$a0,$16,$89,$1b,$0e,$77,$07,$1e
         .byte   $af,$03,$ba,$e5,$00,$a1,$03,$9e,$bb,$b2,$05,$1e,$57,$e4,$77,$14
         .byte   $a8,$77,$03,$16,$14,$1c,$b2,$77,$c4,$3f,$77,$24,$77,$1e,$11,$77
         .byte   $e4,$77,$1b,$1e,$1c,$12,$79,$77,$1f,$12,$70,$04,$77,$a2,$77,$aa
         .byte   $b9,$af,$57,$56,$14,$18,$1a,$94,$bc,$88,$6d,$77,$12,$1b,$8c,$12
         .byte   $77,$1e,$1e,$57,$23,$57,$23,$57,$23,$57,$23,$57,$23,$57,$23,$57
         .byte   $23,$57,$23,$57,$23,$57,$23,$57,$23,$57,$23,$57,$23,$57,$15,$18
         .byte   $0e,$77,$16,$a5,$77,$e4,$77,$a7,$77,$c4,$00,$05,$88,$10,$77,$10
         .byte   $b3,$16,$0f,$0e,$76,$57,$b5,$a3,$12,$70,$04,$87,$a5,$b3,$77,$24
         .byte   $77,$07,$1e,$af,$03,$12,$77,$8e,$03,$77,$b5,$a3,$12,$57,$c4,$96
         .byte   $04,$77,$18,$11,$77,$3a,$77,$16,$a5,$77,$bc,$77,$16,$b8,$0d,$a7
         .byte   $10,$1b,$0e,$77,$07,$05,$1e,$1a,$1e,$ac,$ad,$77,$b5,$a2,$77,$b5
         .byte   $12,$0e,$77,$89,$8b,$1b,$77,$b5,$a7,$1c,$77,$44,$7d,$7d,$7d,$7d
         .byte   $7d,$77,$7d,$7d,$7d,$7d,$7d,$7d,$9d,$77,$64,$13,$57,$56,$00,$12
         .byte   $1b,$14,$18,$1a,$12,$9e,$77,$c4,$8d,$ad,$19,$03,$12,$a1,$b5,$77
         .byte   $10,$16,$ae,$0f,$0e,$76,$57
         .byte   ".Tribbl"  ;trouble?
font_glyphs:
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$38,$38,$38,$38,$00,$38,$00,$00
         .byte   $36,$36,$24,$12,$00,$00,$00,$00,$80,$24,$7e,$24,$7e,$24,$80,$00
         .byte   $08,$3e,$02,$3e,$20,$3e,$08,$00,$42,$25,$12,$08,$24,$52,$21,$00
         .byte   $0c,$16,$02,$04,$2a,$12,$2c,$00,$18,$18,$10,$08,$00,$00,$00,$00
         .byte   $38,$1c,$0e,$0e,$0e,$1c,$38,$00,$0e,$1c,$38,$38,$38,$1c,$0e,$00
         .byte   $22,$1c,$36,$1c,$22,$00,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00
         .byte   $00,$00,$00,$00,$18,$18,$10,$08,$00,$00,$00,$7e,$7e,$00,$00,$00
         .byte   $00,$00,$00,$00,$18,$18,$00,$00,$60,$70,$38,$1c,$0e,$06,$00,$00
         .byte   $1e,$33,$3b,$3f,$37,$33,$1e,$00,$0c,$0e,$0f,$0c,$0c,$0c,$3f,$00
         .byte   $1e,$33,$30,$18,$0c,$06,$3f,$00,$1e,$33,$30,$1c,$30,$33,$1e,$00
         .byte   $38,$3c,$36,$33,$3f,$30,$30,$00,$3f,$03,$03,$1f,$30,$33,$1e,$00
         .byte   $1c,$06,$03,$1f,$33,$33,$1e,$00,$3f,$33,$18,$0c,$0c,$0c,$0c,$00
         .byte   $1e,$33,$33,$1e,$33,$33,$1e,$00,$1e,$33,$33,$3e,$30,$18,$0c,$00
         .byte   $00,$18,$18,$00,$18,$18,$00,$00,$00,$18,$18,$00,$18,$18,$10,$08
         .byte   $10,$18,$1c,$1e,$1c,$18,$10,$00,$00,$00,$7e,$00,$7e,$00,$00,$00
         .byte   $04,$0c,$1c,$3c,$1c,$0c,$04,$00,$3c,$7e,$62,$30,$18,$00,$18,$00
         .byte   $90,$88,$b6,$ff,$ff,$ff,$be,$b6,$1e,$33,$33,$3f,$33,$33,$33,$00
         .byte   $1f,$33,$33,$1f,$33,$33,$1f,$00,$1e,$33,$03,$03,$03,$33,$1e,$00
         .byte   $0f,$1b,$33,$33,$33,$1b,$0f,$00,$1e,$33,$03,$1f,$03,$33,$1e,$00
         .byte   $1e,$33,$03,$1f,$03,$03,$03,$00,$1e,$33,$03,$3b,$33,$33,$1e,$00
         .byte   $33,$33,$33,$3f,$33,$33,$33,$00,$3f,$0c,$0c,$0c,$0c,$0c,$3f,$00
         .byte   $30,$30,$30,$30,$33,$33,$1e,$00,$33,$1b,$0f,$07,$0f,$1b,$33,$00
         .byte   $03,$03,$03,$03,$03,$03,$3f,$00,$33,$3f,$33,$33,$33,$33,$33,$00
         .byte   $33,$33,$37,$3b,$33,$33,$33,$00,$1e,$33,$33,$33,$33,$33,$1e,$00
         .byte   $1f,$33,$33,$1f,$03,$03,$03,$00,$1e,$33,$33,$37,$3b,$33,$1e,$00
         .byte   $1f,$33,$33,$1f,$0f,$1b,$33,$00,$1e,$33,$03,$1e,$30,$33,$1e,$00
         .byte   $3f,$0c,$0c,$0c,$0c,$0c,$0c,$00,$33,$33,$33,$33,$33,$33,$1e,$00
         .byte   $33,$33,$33,$33,$33,$1e,$0c,$00,$33,$33,$33,$33,$33,$3f,$33,$00
         .byte   $33,$33,$1e,$0c,$1e,$33,$33,$00,$33,$33,$33,$1e,$0c,$0c,$0c,$00
         .byte   $3f,$30,$18,$0c,$06,$03,$3f,$00,$1e,$1e,$06,$06,$1e,$1e,$00,$00
         .byte   $06,$0e,$1c,$38,$70,$60,$00,$00,$78,$78,$60,$60,$78,$78,$00,$00
         .byte   $08,$1c,$3e,$7f,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7f,$00
         .byte   $18,$18,$08,$10,$00,$00,$00,$00,$00,$00,$1e,$30,$3e,$33,$3e,$00
         .byte   $03,$03,$1f,$33,$33,$33,$1f,$00,$00,$00,$1e,$33,$03,$33,$1e,$00
         .byte   $30,$30,$3e,$33,$33,$33,$3e,$00,$00,$00,$1e,$33,$3f,$03,$1e,$00
         .byte   $1c,$36,$06,$1f,$06,$06,$06,$00,$00,$00,$1e,$33,$33,$3e,$30,$1e
         .byte   $03,$03,$1f,$33,$33,$33,$33,$00,$0c,$00,$0c,$0c,$0c,$0c,$0c,$00
         .byte   $30,$00,$30,$30,$30,$30,$33,$1e,$03,$03,$33,$1b,$0f,$1b,$33,$00
         .byte   $0c,$0c,$0c,$0c,$0c,$0c,$0c,$00,$00,$00,$3e,$6b,$6b,$63,$63,$00
         .byte   $00,$00,$1e,$33,$33,$33,$33,$00,$00,$00,$1e,$33,$33,$33,$1e,$00
         .byte   $00,$00,$1e,$33,$33,$1f,$03,$03,$00,$00,$1e,$33,$33,$3e,$30,$30
         .byte   $00,$00,$1e,$33,$03,$03,$03,$00,$00,$00,$3e,$03,$1e,$30,$1f,$00
         .byte   $06,$06,$1f,$06,$06,$36,$1c,$00,$00,$00,$33,$33,$33,$33,$1e,$00
         .byte   $00,$00,$33,$33,$33,$1e,$0c,$00,$00,$00,$63,$63,$6b,$6b,$3e,$00
         .byte   $00,$00,$33,$1e,$0c,$1e,$33,$00,$00,$00,$33,$33,$33,$3e,$30,$1e
         .byte   $00,$00,$3f,$18,$0c,$06,$3f,$00,$f0,$98,$98,$9c,$98,$98,$f0,$80
         .byte   $18,$18,$18,$18,$18,$18,$18,$18,$0e,$18,$18,$38,$18,$18,$0e,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; 
; The title screen remains for the entire game -- only the viewport is erased.
; 
title_screen:
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$c0,$80,$80,$80,$80,$d5,$aa,$f7
         .byte   $ee,$dd,$bb,$d4,$aa,$d5,$aa,$d5,$aa,$c5,$aa,$d5,$a2,$d5,$aa,$d5
         .byte   $aa,$d5,$aa,$f6,$ee,$dd,$ab,$d5,$aa,$95,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$aa,$f7
         .byte   $ee,$dd,$bb,$90,$88,$84,$80,$80,$80,$80,$aa,$d5,$80,$80,$80,$80
         .byte   $a0,$90,$88,$f6,$ee,$dd,$bb,$d7,$aa,$85,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$a0,$85,$80,$d0,$80,$85,$a8,$81
         .byte   $a0,$c5,$82,$d0,$a2,$81,$a0,$85,$a0,$d1,$80,$d0,$a8,$81,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$80,$d5
         .byte   $ea,$dd,$bb,$84,$82,$d9,$bb,$f7,$ee,$dd,$a8,$95,$ee,$dd,$bb,$f7
         .byte   $8e,$c1,$a0,$f6,$ee,$dd,$ab,$d5,$82,$80,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$00,$90,$00
         .byte   $00,$04,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$f0,$81,$8b,$f8,$c0,$85,$bc,$c1
         .byte   $f0,$e7,$8a,$f9,$b3,$85,$70,$c5,$80,$9e,$8a,$f8,$ac,$81,$82,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d0,$aa,$d5,$aa,$95,$a8,$d5,$a0,$d5,$aa
         .byte   $d5,$82,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$88,$00,$00,$84
         .byte   $20,$00,$00,$81,$00,$04,$a0,$00,$00,$84,$00,$a0,$00,$00,$94,$00
         .byte   $00,$04,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$82,$d4,$aa,$d5,$aa,$f5,$aa,$d5,$ab,$d7
         .byte   $ea,$d5,$ba,$d5,$aa,$d5,$aa,$d7,$aa,$dd,$aa,$f5,$aa,$d5,$aa,$c1
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$00,$a0,$d0,$80,$c0,$80,$c0,$80,$c0,$a0,$81,$80
         .byte   $c1,$8a,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$82,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$c0,$00,$00,$00,$00,$82,$00,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$c0,$aa,$dd,$bb,$d7,$ee,$dd,$ba,$f7,$ee,$dd,$8b,$f0
         .byte   $ee,$dd,$bb,$f7,$ee,$dd,$83,$f0,$ee,$dd,$bb,$f7,$ee,$dd,$bb,$d5
         .byte   $aa,$95,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d0,$a0,$d4,$a8,$c1,$82,$c0,$80,$c0,$a8,$d1,$82
         .byte   $85,$88,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$84,$00,$00,$00,$81,$00,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$00,$00,$81,$00,$00,$a0,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$a0,$d5,$bb,$f7,$ee,$dd,$bb,$c7,$a0,$c4,$82,$c5
         .byte   $8a,$c4,$bb,$f7,$a2,$d0,$a2,$c1,$a2,$84,$b2,$f7,$ee,$dd,$ab,$f7
         .byte   $ae,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d1,$a2,$d4,$a8,$d1,$a2,$c4,$88,$d1,$a2,$c5,$8a
         .byte   $95,$a2,$c4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$00,$00,$c1,$00,$00,$00,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$82,$81,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$bb,$f7,$ee,$dd,$83,$c4,$aa,$d5,$aa,$d5
         .byte   $aa,$91,$80,$81,$88,$d5,$aa,$d5,$aa,$d5,$a2,$e0,$ee,$dd,$bb,$f7
         .byte   $aa,$d5,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$8a,$91,$aa,$d4,$88,$d1,$a2,$c4,$88,$d1,$a2,$d5,$88
         .byte   $d5,$a2,$d5,$a8,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$01,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$d5,$aa,$d5
         .byte   $ba,$f7,$ae,$80,$80,$80,$80,$80,$80,$c0,$aa,$d5,$82,$80,$80,$80
         .byte   $80,$80,$80,$dc,$bb,$f7,$ae,$dd,$ab,$d5,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$c0,$aa,$dd
         .byte   $bb,$f7,$ae,$94,$8a,$e5,$ee,$dd,$bb,$97,$aa,$d5,$b8,$f7,$ee,$dd
         .byte   $a3,$d1,$a8,$dc,$bb,$f7,$ee,$dd,$aa,$81,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$c1,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$84,$a4,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$a0,$81,$80,$d0,$80,$85,$a8,$81
         .byte   $a0,$85,$8a,$d0,$82,$85,$a0,$85,$a0,$d1,$80,$d0,$a8,$81,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$a5,$a5,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$28,$51,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$f0,$81,$8f,$f8,$f3,$c7,$fc,$df
         .byte   $f0,$e1,$a3,$f9,$f0,$81,$f8,$c7,$80,$98,$8f,$f8,$fc,$87,$82,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$85,$aa,$d0,$8a,$d4,$8a,$d4,$8a,$d4,$a0,$95,$a8
         .byte   $d5,$a2,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$88,$81,$00,$00,$00,$00,$81,$00,$00,$c0,$82,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$c0,$82,$a0,$00,$85,$94,$00
         .byte   $00,$00,$00,$c0,$82,$a4,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$c0,$aa,$d4,$ab,$d5,$ae,$dd,$ab,$f5,$ea,$dd
         .byte   $aa,$d7,$ee,$dd,$aa,$d7,$ea,$dd,$aa,$d5,$aa,$dd,$aa,$d7,$aa,$95
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$00,$a0,$d0,$80,$d0,$80,$c0,$80,$c0,$a0,$81,$a0
         .byte   $c1,$8a,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$a8,$81,$00,$00,$00,$00,$81,$90,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$08,$10,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$90,$00
         .byte   $00,$00,$00,$00,$04,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$c0,$aa,$f5,$ee,$dd,$ba,$f7,$ea,$dd,$bb,$f7,$8e,$c1
         .byte   $80,$f7,$ee,$dd,$bb,$81,$82,$99,$bb,$f7,$ee,$d5,$bb,$f7,$ee,$d5
         .byte   $aa,$95,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a8,$81,$00,$00,$00,$00,$81,$90,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$90,$00
         .byte   $00,$00,$00,$00,$10,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$a8,$d5,$ee,$dd,$bb,$f7,$ee,$c5,$a2,$c4,$a2,$c5
         .byte   $8a,$e4,$ee,$dd,$a3,$d0,$a2,$c5,$a2,$c4,$e2,$dd,$bb,$f7,$ea,$dd
         .byte   $ab,$81,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c5,$a8,$d1,$a2,$c5,$88,$d1,$a2,$c4,$a8,$d1,$aa
         .byte   $c5,$88,$d1,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$a2,$00,$00,$00,$00,$00,$81,$00,$00,$94,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$10,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$ee,$dd,$bb,$f7,$a2,$c4,$aa,$d5,$aa,$d5
         .byte   $aa,$90,$a2,$c5,$88,$d4,$aa,$d5,$aa,$d5,$a2,$c4,$bb,$f7,$ee,$dd
         .byte   $aa,$95,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$8a,$d5,$aa,$c4,$aa,$d5,$aa,$d5,$8a,$d5,$aa
         .byte   $d4,$a8,$d5,$a2,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $20,$45,$00,$51,$22,$05,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$11,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$d5,$aa,$f5
         .byte   $ea,$dd,$bb,$f7,$ee,$dd,$bb,$f7,$ee,$c5,$aa,$d5,$e2,$dd,$bb,$f7
         .byte   $ee,$dd,$bb,$f7,$ee,$dd,$bb,$f7,$aa,$d5,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$00,$00,$80,$00
         .byte   $80,$80,$80,$80,$00,$00,$80,$80,$80,$80,$80,$80,$00,$00,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$c0,$aa,$f5
         .byte   $ee,$dd,$bb,$94,$8a,$c5,$bb,$f7,$ee,$9d,$aa,$d5,$ec,$dd,$bb,$f7
         .byte   $a2,$d1,$a8,$f6,$ee,$dd,$bb,$d5,$aa,$80,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$28,$51,$00,$00,$00,$00,$00,$91,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$81,$00,$91,$00
         .byte   $00,$00,$00,$c0,$a2,$a5,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$a0,$81,$80,$d0,$80,$85,$a8,$81
         .byte   $a0,$95,$88,$d0,$8a,$84,$a0,$85,$a0,$d1,$82,$90,$aa,$81,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$a5,$a5,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$08,$11,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$a2,$90,$92,$00
         .byte   $00,$00,$00,$c0,$82,$a1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$f0,$e7,$8c,$f8,$f3,$c7,$fc,$ff
         .byte   $f2,$f9,$a3,$fd,$fc,$81,$f8,$d7,$f0,$81,$8f,$f9,$f0,$c7,$82,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$85,$aa,$d5,$8a,$d4,$8a,$d4,$8a,$d4,$aa,$95,$a8
         .byte   $d5,$aa,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$88,$81,$00,$00,$00,$00,$81,$00,$00,$90,$00,$00,$00,$81
         .byte   $00,$00,$00,$81,$00,$00,$00,$81,$00,$00,$88,$a0,$81,$00,$91,$00
         .byte   $00,$00,$00,$c0,$88,$a1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$d4,$aa,$d5,$ae,$d5,$bb,$f5,$aa,$dd,$bb,$f7
         .byte   $ea,$dd,$bb,$d7,$ee,$dd,$aa,$f7,$aa,$dd,$ab,$f7,$ea,$dd,$aa,$95
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$80,$a0,$d0,$80,$d4,$a0,$d5,$a0,$c1,$a0,$81,$a8
         .byte   $c1,$88,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a0,$00,$00,$00,$00,$00,$81,$90,$00,$00,$00,$c0,$00,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$00,$82,$00,$00,$00,$88,$00,$90,$00
         .byte   $00,$00,$00,$00,$05,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$bb,$d7,$ee,$dd,$bb,$f7,$ee,$9d,$80,$e5
         .byte   $c8,$dd,$bb,$f7,$ee,$91,$a3,$81,$ec,$c1,$bb,$f7,$ee,$dd,$bb,$d5
         .byte   $aa,$95,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a0,$00,$00,$00,$00,$00,$81,$90,$00,$00,$a0,$00,$00,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$00,$00,$84,$00,$00,$88,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$ba,$f7,$ee,$dd,$bb,$c7,$a2,$c4,$a2,$c5
         .byte   $8a,$c5,$bb,$f7,$a2,$d1,$a2,$c5,$a2,$c4,$b2,$f7,$ee,$dd,$bb,$f7
         .byte   $aa,$81,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d1,$aa,$d4,$a8,$d1,$a2,$c4,$a8,$d1,$a2,$c5,$8a
         .byte   $95,$a2,$c4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a2,$00,$00,$00,$00,$00,$81,$00,$00,$c0,$00,$00,$00,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$00,$00,$c0,$82,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$bb,$f7,$ee,$dd,$a3,$d4,$aa,$d5,$aa,$d5
         .byte   $aa,$94,$a2,$c5,$a8,$d4,$aa,$d5,$aa,$d5,$aa,$e4,$ee,$dd,$bb,$f7
         .byte   $aa,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$a2,$d4,$aa,$d1,$aa,$d5,$a8,$d1,$a2,$d4,$aa
         .byte   $d1,$a2,$c4,$a8,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$30,$7e,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $20,$40,$00,$41,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$11,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$d5,$aa,$dd
         .byte   $ab,$f7,$ee,$dd,$bb,$f7,$ee,$dd,$bb,$87,$aa,$d5,$b0,$f7,$ee,$dd
         .byte   $bb,$f7,$ee,$dd,$bb,$f7,$ee,$dd,$aa,$d5,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$d0,$82,$80,$aa,$80,$a0,$80
         .byte   $a0,$81,$80,$d0,$80,$80,$80,$81,$80,$d4,$82,$c0,$80,$81,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$aa,$dd
         .byte   $bb,$f7,$ae,$84,$82,$e1,$ee,$dd,$bb,$97,$aa,$d5,$b8,$f7,$ee,$dd
         .byte   $83,$c1,$a0,$dc,$bb,$f7,$ae,$d5,$8a,$80,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$08,$10,$00,$00,$00,$00,$00,$85,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$a8,$00,$85,$95,$00
         .byte   $00,$00,$00,$c0,$a0,$a4,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$a0,$81,$80,$d0,$80,$85,$a8,$81
         .byte   $a0,$95,$88,$d0,$8a,$84,$a0,$85,$a0,$c1,$82,$90,$aa,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$a5,$a5,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$08,$51,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$00,$90,$00
         .byte   $00,$00,$00,$c0,$88,$a1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$c0,$ff,$8c,$f9,$7f,$c7,$fc,$ff
         .byte   $f2,$f9,$a3,$fd,$fc,$81,$f8,$d7,$f2,$81,$8f,$f9,$f3,$c7,$82,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$80,$a0,$c0,$80,$c0,$80,$c0,$80,$c0,$80,$81,$80
         .byte   $81,$80,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$88,$81,$00,$00,$00,$00,$81,$00,$00,$85,$a2,$c4,$88,$91
         .byte   $a2,$c4,$88,$90,$a2,$c4,$88,$90,$a2,$c4,$a0,$81,$81,$85,$91,$00
         .byte   $00,$00,$00,$c0,$88,$a1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$d5,$aa,$d5,$bb,$d5,$ee,$dd,$ab,$f7,$ee,$dd
         .byte   $aa,$d7,$ee,$dd,$ba,$f7,$ee,$dd,$ab,$f5,$ae,$dd,$bb,$d7,$ae,$95
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c0,$aa,$d0,$80,$d0,$a0,$d5,$a0,$c1,$a0,$81,$a0
         .byte   $c1,$88,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a0,$00,$00,$00,$00,$00,$81,$84,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$90,$00
         .byte   $00,$00,$00,$00,$04,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$ee,$dd,$ba,$f7,$ee,$dd,$83,$96,$82,$85
         .byte   $88,$f7,$ee,$dd,$bb,$91,$a0,$c1,$b8,$e0,$ee,$dd,$bb,$f7,$ee,$d5
         .byte   $aa,$d5,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a0,$00,$00,$00,$00,$00,$81,$c0,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8a,$00,$90,$00
         .byte   $00,$00,$00,$00,$01,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$c0,$aa,$d5,$ea,$dd,$bb,$f7,$ae,$c0,$a2,$c4,$a2,$d5
         .byte   $8a,$e5,$ee,$dd,$a3,$d1,$aa,$c5,$a2,$c4,$82,$dc,$bb,$f7,$ee,$dd
         .byte   $aa,$81,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c4,$aa,$d1,$a2,$d5,$a8,$d5,$a2,$c5,$a8,$d1,$aa
         .byte   $c4,$aa,$95,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$a2,$00,$00,$00,$00,$00,$81,$00,$00,$00,$a8,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$94,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$10,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$a8,$d5,$ee,$dd,$bb,$f7,$a2,$d5,$aa,$d5,$aa,$d5
         .byte   $aa,$c5,$a2,$c5,$a2,$d5,$aa,$d5,$aa,$d5,$aa,$c5,$bb,$f7,$ee,$dd
         .byte   $ab,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$a2,$c4,$8a,$91,$a2,$d4,$88,$d1,$a2,$c4,$8a,$95,$a2
         .byte   $d4,$8a,$91,$a2,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$aa,$81,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $20,$41,$00,$41,$20,$01,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$d4,$aa,$f7
         .byte   $ee,$dd,$bb,$f7,$ee,$dd,$bb,$f7,$ee,$9d,$aa,$d5,$ec,$dd,$bb,$f7
         .byte   $ee,$dd,$bb,$f7,$ee,$dd,$bb,$f7,$aa,$95,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$d4,$82,$c0,$aa,$81,$a8,$81
         .byte   $a0,$91,$80,$d0,$88,$80,$80,$81,$80,$d5,$82,$d0,$a2,$85,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$aa,$f5
         .byte   $ee,$dd,$bb,$84,$82,$d9,$bb,$f7,$ee,$9d,$aa,$d5,$ec,$dd,$bb,$f7
         .byte   $8e,$c1,$a0,$f6,$ee,$dd,$ab,$d5,$8a,$80,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$28,$51,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$a8,$00,$00,$94,$00
         .byte   $00,$00,$00,$c0,$a2,$a4,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$a0,$c1,$82,$d0,$80,$85,$a8,$81
         .byte   $a0,$95,$88,$d0,$8a,$84,$a0,$85,$a0,$c5,$8a,$90,$88,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$a5,$a5,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$28,$41,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$c0
         .byte   $a8,$c4,$a2,$95,$a2,$91,$82,$00,$00,$00,$00,$88,$00,$00,$90,$00
         .byte   $00,$00,$00,$c0,$8a,$a1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$c0,$9f,$83,$e5,$ff,$d1,$fe,$ff
         .byte   $f2,$99,$a8,$fd,$8c,$80,$ca,$d1,$c2,$ff,$83,$f9,$f3,$d7,$8a,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$00,$a0,$c0,$80,$c0,$80,$c0,$80,$c0,$80,$81,$80
         .byte   $81,$80,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$88,$81,$00,$00,$00,$00,$81,$00,$a0,$00,$00,$00,$a0,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$84,$00,$00,$00,$84,$85,$a0,$90,$00
         .byte   $00,$00,$00,$c0,$88,$a1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$aa,$d5,$ee,$d5,$bb,$f7,$ea,$dd,$bb,$f7
         .byte   $ee,$dd,$ba,$f7,$ea,$dd,$bb,$f7,$ae,$dd,$ab,$f7,$ea,$dd,$ab,$85
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c0,$aa,$d0,$a0,$d0,$a0,$d5,$a0,$c1,$a0,$c1,$a0
         .byte   $c1,$8a,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a0,$00,$00,$00,$00,$00,$81,$c4,$88,$91,$a2,$c4,$88,$91
         .byte   $a2,$c4,$c8,$90,$a2,$c4,$88,$91,$a2,$c4,$88,$91,$82,$00,$90,$00
         .byte   $00,$00,$00,$00,$04,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$a8,$d5,$bb,$f7,$ea,$dd,$bb,$f7,$a2,$9c,$82,$85
         .byte   $ca,$dd,$bb,$f7,$ee,$d1,$a0,$c1,$ac,$c4,$bb,$f7,$ee,$dd,$bb,$d5
         .byte   $aa,$d5,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a0,$00,$00,$00,$00,$00,$81,$c0,$00,$00,$88,$00,$00,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$00,$00,$90,$00,$00,$82,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$c0,$aa,$d5,$aa,$f7,$ee,$dd,$bb,$c4,$a2,$c4,$aa,$d5
         .byte   $8a,$85,$b8,$97,$a0,$d1,$aa,$d5,$a2,$c4,$a2,$f6,$ee,$dd,$bb,$f7
         .byte   $aa,$95,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d1,$aa,$d4,$a8,$d1,$a2,$c5,$a8,$d1,$a2,$c5,$8a
         .byte   $95,$aa,$c5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a2,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$85,$00,$00
         .byte   $00,$00,$00,$81,$00,$00,$00,$00,$a8,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$a8,$d5,$bb,$f7,$ee,$dd,$83,$d5,$aa,$d5,$aa,$d5
         .byte   $aa,$c5,$a8,$95,$a2,$d5,$aa,$d5,$aa,$d5,$aa,$e1,$ee,$dd,$bb,$f7
         .byte   $aa,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$88,$d1,$a2,$d4,$88,$d5,$a2,$c4,$88,$d1,$a2,$d4,$88
         .byte   $d1,$a2,$c4,$a8,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$aa,$00,$00,$00,$00,$00,$85,$00,$00,$00,$00,$00,$00,$00
         .byte   $20,$40,$00,$41,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$94,$00
         .byte   $00,$00,$00,$00,$10,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$d0,$aa,$dd
         .byte   $bb,$f7,$ee,$81,$80,$80,$80,$80,$80,$80,$a0,$85,$80,$80,$80,$80
         .byte   $80,$80,$c0,$dd,$bb,$f7,$ee,$dd,$aa,$85,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$d5,$8a,$d0,$aa,$85,$a8,$81
         .byte   $a0,$d1,$80,$d0,$a8,$80,$a0,$85,$80,$95,$8a,$d0,$a2,$85,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$a8,$d5
         .byte   $bb,$f7,$ae,$84,$82,$f1,$ee,$dd,$bb,$97,$aa,$d5,$b8,$f7,$ee,$dd
         .byte   $8b,$c1,$a0,$dc,$bb,$f7,$ae,$d5,$8a,$80,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$08,$40,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$a8,$00,$85,$94,$00
         .byte   $00,$00,$00,$00,$a2,$a5,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$b0,$d1,$8a,$d8,$80,$85,$ac,$81
         .byte   $f0,$95,$88,$f8,$8a,$84,$b0,$85,$80,$85,$8a,$98,$aa,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$95,$a9,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$08,$51,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$85
         .byte   $02,$00,$00,$00,$00,$40,$88,$85,$00,$00,$00,$88,$00,$85,$90,$00
         .byte   $00,$04,$00,$c0,$82,$a1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$9f,$a3,$95,$bf,$d5,$fa,$df
         .byte   $c2,$81,$aa,$e5,$a8,$c1,$ea,$d5,$82,$fe,$a3,$e5,$c0,$d1,$8a,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$00,$a0,$c0,$80,$c0,$80,$c0,$80,$c0,$80,$81,$80
         .byte   $81,$80,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a0,$00,$00,$00,$00,$00,$81,$00,$88,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$d4,$aa,$95,$00
         .byte   $00,$04,$00,$c0,$82,$a4,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$f5,$aa,$d5,$ba,$d5,$ee,$dd,$bb,$f7,$ee,$dd
         .byte   $bb,$d7,$ee,$dd,$ba,$f7,$ee,$dd,$bb,$f5,$ae,$dd,$bb,$d7,$ae,$d5
         .byte   $80,$84,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c0,$aa,$d0,$a0,$d0,$a0,$c5,$a0,$c1,$a0,$c1,$a0
         .byte   $c1,$8a,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$a0,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$90,$83,$00,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$90,$00
         .byte   $00,$00,$00,$00,$15,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$a0,$d5,$ee,$dd,$ba,$f7,$ee,$dd,$a3,$96,$8a,$85
         .byte   $8a,$f7,$ee,$dd,$bb,$d1,$a0,$d1,$b0,$e4,$ee,$dd,$bb,$f7,$ae,$d5
         .byte   $aa,$95,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$d0,$a0,$00,$00,$00,$00,$00,$81,$00,$8a,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$c0,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$c0,$aa,$f5,$ae,$dd,$bb,$f7,$ae,$c4,$a2,$d5,$aa,$d5
         .byte   $aa,$85,$ec,$9d,$a0,$d5,$aa,$d5,$aa,$c5,$a2,$dc,$bb,$f7,$ee,$dd
         .byte   $ab,$d5,$82,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d4,$8a,$d5,$aa,$d4,$a8,$d5,$a2,$c5,$a8,$d5,$aa
         .byte   $d4,$88,$95,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$a2,$81,$00,$00,$00,$00,$81,$00,$00,$00,$00,$c0,$82,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$d0,$00,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$a0,$d5,$ee,$dd,$bb,$f7,$8e,$d5,$aa,$d5,$aa,$d5
         .byte   $aa,$d1,$a8,$95,$8a,$d5,$aa,$d5,$aa,$d5,$aa,$d9,$bb,$f7,$ee,$dd
         .byte   $aa,$81,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$a2,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$90,$00,$00,$00,$00,$00,$00,$91,$00,$00,$00,$00,$00,$00,$00
         .byte   $20,$45,$0a,$41,$20,$05,$00,$00,$00,$00,$00,$00,$00,$00,$91,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$c0,$aa,$f7
         .byte   $ee,$dd,$bb,$d1,$aa,$d5,$aa,$d5,$aa,$d5,$82,$c1,$aa,$d5,$aa,$d5
         .byte   $aa,$d5,$8a,$f7,$ee,$dd,$bb,$f7,$aa,$85,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$95,$8a,$d0,$a2,$85,$a8,$81
         .byte   $a0,$d1,$80,$d0,$a8,$80,$a0,$85,$80,$81,$8a,$d0,$a0,$85,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$a0,$d5
         .byte   $ee,$dd,$bb,$84,$82,$d9,$bb,$f7,$ee,$9d,$a8,$95,$ec,$dd,$bb,$f7
         .byte   $8e,$c1,$a0,$f6,$ee,$dd,$ab,$d5,$8a,$80,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$08,$50,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$a8,$00,$00,$90,$44
         .byte   $08,$11,$22,$c0,$a2,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$b0,$c1,$8a,$d8,$80,$85,$ac,$81
         .byte   $f0,$95,$88,$f8,$8a,$84,$b0,$85,$80,$95,$8a,$98,$aa,$81,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$95,$a9,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$90,$8a,$90
         .byte   $00,$00,$00,$81,$00,$00,$88,$c0,$82,$00,$00,$88,$00,$00,$90,$00
         .byte   $22,$44,$08,$c0,$88,$a5,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$00,$a0,$95,$a8,$d5,$aa,$d5,$aa,$d5
         .byte   $8a,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$82,$d5,$a0,$d5,$aa,$dd,$aa,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d0,$aa,$c5,$aa,$d5,$a0,$d1,$a0,$d5,$8a
         .byte   $c1,$8a,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$10,$08,$04,$02,$41,$81,$00,$82,$00,$00,$00,$88,$00
         .byte   $00,$40,$00,$81,$02,$00,$00,$90,$00,$00,$00,$c0,$00,$00,$90,$00
         .byte   $22,$44,$08,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$c0,$aa,$dd,$ab,$d5,$ee,$dd,$ba,$f7,$ee,$dd,$bb,$f7
         .byte   $ee,$dd,$bb,$d7,$ee,$dd,$bb,$f7,$ae,$dd,$bb,$f5,$ee,$dd,$bb,$d5
         .byte   $82,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c0,$aa,$d0,$a0,$c1,$80,$c0,$a0,$c1,$a0,$c1,$82
         .byte   $c1,$8a,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$10,$20,$40,$00,$01,$81,$84,$00,$00,$00,$84,$00,$00
         .byte   $00,$00,$60,$0f,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$d5,$bb,$f7,$ee,$dd,$bb,$f7,$a2,$80,$8a,$85
         .byte   $ca,$dd,$bb,$f7,$ee,$d1,$a0,$d1,$80,$c4,$bb,$f7,$ee,$dd,$ab,$d5
         .byte   $ae,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$10,$08,$04,$02,$01,$81,$00,$88,$91,$a2,$c4,$88,$91
         .byte   $a2,$c4,$88,$91,$a2,$c4,$88,$91,$a2,$c4,$88,$91,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$bb,$f7,$ee,$dd,$bb,$c4,$a2,$d5,$aa,$d5
         .byte   $aa,$c1,$88,$90,$82,$d5,$aa,$d5,$aa,$c5,$a2,$f6,$ee,$dd,$bb,$f7
         .byte   $aa,$d5,$82,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$8a,$d1,$aa,$d4,$a8,$d1,$a2,$d5,$a8,$d1,$a2,$c5,$88
         .byte   $95,$aa,$c4,$a8,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$10,$08,$10,$20,$00,$81,$00,$00,$00,$00,$00,$a0,$91
         .byte   $00,$00,$00,$81,$00,$00,$a2,$81,$00,$00,$00,$00,$00,$00,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$d5,$bb,$f7,$ee,$dd,$8b,$d4,$aa,$d5,$aa,$d5
         .byte   $aa,$d1,$aa,$d5,$8a,$d5,$aa,$d5,$aa,$d5,$aa,$f0,$ee,$dd,$ba,$d7
         .byte   $aa,$81,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$8a,$d5,$a2,$d5,$a2,$d5,$aa,$d4,$8a,$d5,$8a,$d5,$8a
         .byte   $d5,$aa,$d5,$88,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$00,$00,$00,$00,$00,$c1,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$a0,$90,$00
         .byte   $00,$00,$00,$00,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$aa,$dd
         .byte   $bb,$f7,$ee,$d1,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5
         .byte   $aa,$d5,$ca,$dd,$bb,$f7,$ee,$dd,$aa,$85,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$a0,$85,$88,$d0,$a2,$85,$a8,$81
         .byte   $a0,$d1,$82,$d0,$a8,$81,$a0,$85,$a0,$91,$88,$d0,$a8,$85,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$80,$80,$80,$80,$80,$a0,$d5
         .byte   $ba,$f7,$ae,$84,$82,$f1,$ee,$dd,$bb,$f7,$a8,$95,$bb,$f7,$ee,$dd
         .byte   $8b,$c1,$a0,$dc,$bb,$f7,$aa,$d5,$82,$80,$80,$80,$80,$a0,$80,$00
         .byte   $c0,$00,$00,$50,$2a,$55,$2a,$55,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00,$85,$90,$55
         .byte   $2a,$55,$2a,$05,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$80,$b0,$81,$8b,$d8,$c0,$85,$bc,$81
         .byte   $f0,$9f,$8a,$f8,$8f,$85,$70,$c5,$80,$9e,$8a,$f8,$ac,$81,$80,$80
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$95,$a9,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$50,$2a,$55,$2a,$55,$81,$00,$00,$00,$00,$85,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$a0,$81,$00,$a8,$00,$85,$90,$55
         .byte   $2a,$55,$2a,$05,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$80,$80,$d4,$aa,$d5,$ae,$d5,$aa,$f5,$aa,$dd
         .byte   $aa,$d5,$aa,$d5,$aa,$d5,$ea,$d5,$8a,$d5,$aa,$dd,$aa,$d7,$aa,$81
         .byte   $80,$80,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d0,$aa,$c5,$aa,$d5,$a0,$d1,$a0,$d5,$8a
         .byte   $c1,$8a,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$50,$2a,$55,$2a,$55,$81,$c0,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$82,$00,$90,$55
         .byte   $2a,$55,$2a,$05,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$d0,$aa,$f7,$ae,$d5,$ba,$f7,$ea,$dd,$bb,$f7,$ae,$dc
         .byte   $bb,$d7,$ee,$dd,$bb,$f7,$ee,$dd,$bb,$f7,$ee,$d5,$bb,$f7,$ae,$d5
         .byte   $aa,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c0,$a0,$d4,$a0,$c1,$80,$c0,$a0,$c1,$a8,$c1,$82
         .byte   $81,$00,$d4,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$50,$2a,$55,$2a,$55,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$90,$55
         .byte   $2a,$55,$2a,$05,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$d5,$ee,$dd,$bb,$f7,$ee,$85,$a0,$c0,$8a,$c5
         .byte   $8a,$e0,$ee,$dd,$83,$d0,$a2,$d1,$82,$84,$e0,$dd,$bb,$f7,$ae,$d5
         .byte   $ab,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$50,$2a,$55,$2a,$55,$81,$00,$a0,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$84,$00,$00,$90,$55
         .byte   $2a,$55,$2a,$05,$00,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$aa,$d5,$ee,$dd,$bb,$f7,$ae,$c4,$a2,$d5,$aa,$d5
         .byte   $aa,$d1,$8c,$99,$8a,$d5,$aa,$d5,$aa,$c5,$a2,$dc,$bb,$f7,$ee,$dd
         .byte   $ab,$d5,$82,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$c4,$88,$95,$a2,$d4,$88,$d1,$a2,$c4,$8a,$95,$a2
         .byte   $d4,$a8,$95,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$00,$00,$50,$2a,$55,$2a,$55,$81,$00,$00,$00,$00,$00,$00,$00
         .byte   $8a,$d1,$88,$c5,$a8,$c4,$00,$00,$00,$00,$00,$00,$00,$00,$90,$55
         .byte   $2a,$55,$2a,$05,$01,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $c0,$80,$80,$80,$80,$d5,$ee,$dd,$bb,$f7,$ae,$d4,$aa,$d5,$aa,$d5
         .byte   $aa,$d1,$aa,$d5,$8a,$d5,$aa,$d5,$aa,$d5,$aa,$dc,$bb,$f7,$ea,$d5
         .byte   $aa,$85,$80,$80,$80,$a0,$80,$00,$c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$80,$00
         .byte   $c0,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa,$d5,$aa
         .byte   $d5,$aa,$d5,$aa,$d5,$aa,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; 
; Original game entry point.
; 
OriginalEntry:
         jmp     EarlyInit

; 
; Three 256-byte tables, used to compute multiplication and division.
; 
math_table1:
         .byte   $08,$00,$20,$32,$40,$4a,$52,$59,$60,$65,$6a,$6e,$72,$76,$79,$7d
         .byte   $80,$82,$85,$87,$8a,$8c,$8e,$90,$92,$94,$96,$98,$99,$9b,$9d,$9e
         .byte   $a0,$a1,$a2,$a4,$a5,$a6,$a7,$a9,$aa,$ab,$ac,$ad,$ae,$af,$b0,$b1
         .byte   $b2,$b3,$b4,$b5,$b6,$b7,$b8,$b9,$b9,$ba,$bb,$bc,$bd,$bd,$be,$bf
         .byte   $c0,$c0,$c1,$c2,$c2,$c3,$c4,$c4,$c5,$c6,$c6,$c7,$c7,$c8,$c9,$c9
         .byte   $ca,$ca,$cb,$cc,$cc,$cd,$cd,$ce,$ce,$cf,$cf,$d0,$d0,$d1,$d1,$d2
         .byte   $d2,$d3,$d3,$d4,$d4,$d5,$d5,$d5,$d6,$d6,$d7,$d7,$d8,$d8,$d9,$d9
         .byte   $d9,$da,$da,$db,$db,$db,$dc,$dc,$dd,$dd,$dd,$de,$de,$de,$df,$df
         .byte   $e0,$e0,$e0,$e1,$e1,$e1,$e2,$e2,$e2,$e3,$e3,$e3,$e4,$e4,$e4,$e5
         .byte   $e5,$e5,$e6,$e6,$e6,$e7,$e7,$e7,$e7,$e8,$e8,$e8,$e9,$e9,$e9,$ea
         .byte   $ea,$ea,$ea,$eb,$eb,$eb,$ec,$ec,$ec,$ec,$ed,$ed,$ed,$ed,$ee,$ee
         .byte   $ee,$ee,$ef,$ef,$ef,$ef,$f0,$f0,$f0,$f1,$f1,$f1,$f1,$f1,$f2,$f2
         .byte   $f2,$f2,$f3,$f3,$f3,$f3,$f4,$f4,$f4,$f4,$f5,$f5,$f5,$f5,$f5,$f6
         .byte   $f6,$f6,$f6,$f7,$f7,$f7,$f7,$f7,$f8,$f8,$f8,$f8,$f9,$f9,$f9,$f9
         .byte   $f9,$fa,$fa,$fa,$fa,$fa,$fb,$fb,$fb,$fb,$fb,$fc,$fc,$fc,$fc,$fc
         .byte   $fd,$fd,$fd,$fd,$fd,$fd,$fe,$fe,$fe,$fe,$fe,$ff,$ff,$ff,$ff,$ff
math_table2:
         .byte   $03,$00,$00,$b8,$00,$4d,$b8,$d6,$00,$70,$4d,$b4,$b8,$6a,$d6,$05
         .byte   $00,$cc,$70,$ef,$4d,$8e,$b4,$c1,$b8,$9a,$6a,$28,$d6,$75,$05,$89
         .byte   $00,$6c,$cc,$23,$70,$b4,$ef,$22,$4d,$71,$8e,$a4,$b4,$bd,$c1,$bf
         .byte   $b8,$ac,$9a,$85,$6a,$4b,$28,$01,$d6,$a7,$75,$3f,$05,$c9,$89,$46
         .byte   $00,$b7,$6c,$1d,$cc,$79,$23,$cb,$70,$13,$b4,$52,$ef,$8a,$22,$b9
         .byte   $4d,$e0,$71,$00,$8e,$1a,$a4,$2d,$b4,$39,$bd,$40,$c1,$41,$bf,$3c
         .byte   $b8,$32,$ac,$24,$9a,$10,$85,$f8,$6a,$db,$4b,$ba,$28,$95,$01,$6c
         .byte   $d6,$3f,$a7,$0e,$75,$da,$3f,$a2,$05,$67,$c9,$29,$89,$e8,$46,$a3
         .byte   $00,$5c,$b7,$12,$6c,$c5,$1d,$75,$cc,$23,$79,$ce,$23,$77,$cb,$1e
         .byte   $70,$c2,$13,$64,$b4,$03,$52,$a1,$ef,$3d,$8a,$d6,$22,$6e,$b9,$03
         .byte   $4d,$97,$e0,$29,$71,$b9,$00,$47,$8e,$d4,$1a,$5f,$a4,$e8,$2d,$70
         .byte   $b4,$f7,$39,$7b,$bd,$ff,$40,$81,$c1,$01,$41,$80,$bf,$fe,$3c,$7a
         .byte   $b8,$f5,$32,$6f,$ac,$e8,$24,$5f,$9a,$d5,$10,$4a,$85,$be,$f8,$31
         .byte   $6a,$a3,$db,$13,$4b,$83,$ba,$f1,$28,$5f,$95,$cb,$01,$36,$6c,$a1
         .byte   $d6,$0a,$3f,$73,$a7,$db,$0e,$42,$75,$a7,$da,$0c,$3f,$71,$a2,$d4
         .byte   $05,$36,$67,$98,$c9,$f9,$29,$59,$89,$b8,$e8,$17,$46,$75,$a3,$d2
math_table3:
         .byte   $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
         .byte   $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
         .byte   $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
         .byte   $02,$02,$02,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
         .byte   $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05
         .byte   $05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$07
         .byte   $08,$08,$08,$08,$08,$08,$09,$09,$09,$09,$09,$0a,$0a,$0a,$0a,$0b
         .byte   $0b,$0b,$0b,$0c,$0c,$0c,$0c,$0d,$0d,$0d,$0e,$0e,$0e,$0e,$0f,$0f
         .byte   $10,$10,$10,$11,$11,$11,$12,$12,$13,$13,$13,$14,$14,$15,$15,$16
         .byte   $16,$17,$17,$18,$18,$19,$19,$1a,$1a,$1b,$1c,$1c,$1d,$1d,$1e,$1f
         .byte   $20,$20,$21,$22,$22,$23,$24,$25,$26,$26,$27,$28,$29,$2a,$2b,$2c
         .byte   $2d,$2e,$2f,$30,$31,$32,$33,$34,$35,$36,$38,$39,$3a,$3b,$3d,$3e
         .byte   $40,$41,$42,$44,$45,$47,$48,$4a,$4c,$4d,$4f,$51,$52,$54,$56,$58
         .byte   $5a,$5c,$5e,$60,$62,$64,$67,$69,$6b,$6d,$70,$72,$75,$77,$7a,$7d
         .byte   $80,$82,$85,$88,$8b,$8e,$91,$94,$98,$9b,$9e,$a2,$a5,$a9,$ad,$b1
         .byte   $b5,$b8,$bd,$c1,$c5,$c9,$ce,$d2,$d7,$db,$e0,$e5,$ea,$ef,$f5,$fa
mod7_table:
         .byte   $01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02
         .byte   $03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04
         .byte   $05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06
         .byte   $00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01
         .byte   $02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03
         .byte   $04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05
         .byte   $06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00
         .byte   $01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02
         .byte   $03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04
         .byte   $05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06
         .byte   $00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01
         .byte   $02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03
         .byte   $04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05
         .byte   $06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00
         .byte   $01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02
         .byte   $03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04
div7_table:
         .byte   $01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03
         .byte   $03,$03,$03,$03,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05
         .byte   $05,$05,$06,$06,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$07,$07
         .byte   $08,$08,$08,$08,$08,$08,$08,$09,$09,$09,$09,$09,$09,$09,$0a,$0a
         .byte   $0a,$0a,$0a,$0a,$0a,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0c,$0c,$0c,$0c
         .byte   $0c,$0c,$0c,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0e,$0e,$0e,$0e,$0e,$0e
         .byte   $0e,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$10,$10,$10,$10,$10,$10,$10,$11
         .byte   $11,$11,$11,$11,$11,$11,$12,$12,$12,$12,$12,$12,$12,$13,$13,$13
         .byte   $13,$13,$13,$13,$14,$14,$14,$14,$14,$14,$14,$15,$15,$15,$15,$15
         .byte   $15,$15,$16,$16,$16,$16,$16,$16,$16,$17,$17,$17,$17,$17,$17,$17
         .byte   $18,$18,$18,$18,$18,$18,$18,$19,$19,$19,$19,$19,$19,$19,$1a,$1a
         .byte   $1a,$1a,$1a,$1a,$1a,$1b,$1b,$1b,$1b,$1b,$1b,$1b,$1c,$1c,$1c,$1c
         .byte   $1c,$1c,$1c,$1d,$1d,$1d,$1d,$1d,$1d,$1d,$1e,$1e,$1e,$1e,$1e,$1e
         .byte   $1e,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$20,$20,$20,$20,$20,$20,$20,$21
         .byte   $21,$21,$21,$21,$21,$21,$22,$22,$22,$22,$22,$22,$22,$23,$23,$23
         .byte   $23,$23,$23,$23,$24,$24,$24,$24,$24,$24,$24,$25,$25,$25,$25,$25
; 
; For custom RWTS: convert 6-bit value to 8-bit disk byte.
; 
rwts_encode62:
         .byte   $96,$97,$9a,$9b,$9d,$9e,$9f,$a6,$a7,$ab,$ac,$ad,$ae,$af,$b2,$b3
         .byte   $b4,$b5,$b6,$b7,$b9,$ba,$bb,$bc,$bd,$be,$bf,$cb,$cd,$ce,$cf,$d3
         .byte   $d6,$d7,$d9,$da,$db,$dc,$dd,$de,$df,$e5,$e6,$e7,$e9,$ea,$eb,$ec
         .byte   $ed,$ee,$ef,$f2,$f3,$f4,$f5,$f6,$f7,$f9,$fa,$fb,$fc,$fd,$fe,$ff
L4543:   .res    14,$00     ;? (read/write)
color_indices:
         .res    6,$00
; 
sound_disab_flag:
         .byte   $00        ;bool 00/ff: is sound disabled?
; 
; Game settings toggled during pause mode.
; 
ptb_kbd_dampening:
         .byte   $00        ;bool 00/ff: pause 'D': keyboard dampening enabled?
ptb_kbd_recent:
         .byte   $00        ;bool 00/ff: pause 'A': disable recentering
ptb_pausecmd_x:
         .byte   $00        ;bool 00/ff: pause 'X': ? odd things
ptb_kbd_flash:
         .byte   $00        ;bool 00/ff: pause 'F': flash hostiles on radar
ptb_joy_y_flip:
         .byte   $00        ;bool 00/ff: pause 'Y': joy y_axis flipped?
ptb_joy_axis_flip:
         .byte   $00        ;bool 00/ff: pause 'J': joy both axes flipped?
ptb_joy_enab:
         .byte   $00        ;bool 00/ff: pause 'K': joystick enabled?
ptb_lower_case:
         .byte   $00        ;bool 00/ff: pause 'U': lower-case allowed?
ptb_pausecmd_t:
         .byte   $00        ;bool 00/ff: pause 'T': disk vs. tape (not for A2)
; 
unused_thing1:
         .byte   $00        ;written twice, never read
joystick_found_nr:
         .byte   $0b        ;set to $FF if paddles exist by unref'd SEC3 code
; 
; Key commands.  These map 1:1 with the state toggles above, starting at $4558.
; 
pause_key_cmds:
         .byte   'D'
         .byte   'A'
         .byte   'X'
         .byte   'F'
         .byte   'Y'
         .byte   'J'
         .byte   'K'
         .byte   'U'
         .byte   'T'
         .res    1,$60      ;unused

; 
; Early initialization, no longer needed.
; 
src_ptr  .set    $0a
dst_ptr  .set    $31
XX12     .set    $74
des_sub  .set    $d0
EarlyInit:
         lda     #$00       ;copy SCRN from $200-9ff to $2000-27ff
         sta     src_ptr
         lda     #$02
         sta     src_ptr+1
         lda     #$00
         sta     dst_ptr
         lda     #$20
         sta     dst_ptr+1
         ldx     #$07
         ldy     #$00
@L4581:  lda     (src_ptr),y
         sta     (dst_ptr),y
         iny
         bne     @L4581
         inc     src_ptr+1
         inc     dst_ptr+1
         dex
         bpl     @L4581
         jsr     Descramble ;descramble the code
; 
; Start here to bypass the no-longer-needed copy of SCRN and the descrambler. 
; (The original start is $4000.)
; 
NewEntry:
         lda     #$30       ;late patch to joystick code?
         sta     _set_by_init+1
         nop
         nop
         jsr     InitSystem
         jmp     InitGame

; 
; Most of the code is scrambled when loaded from disk.  This de-scrambles it.
; 
Descramble:
         lda     #$e9       ;check for end when Y=E9
         sta     PLAYER_STATE ; so last byte we tweak is $xxEA
         lda     #$45       ;stop when we hit $45E9
         sta     PLAYER_STATE+1
         lda     #$bf       ;first byte is $BFFE
         ldy     #$fe
         ldx     #$15       ;initial sub value
         jsr     @DoDescram
         lda     #$5f
         sta     PLAYER_STATE
         lda     #$0b       ;stop when we hit $B5F
         sta     PLAYER_STATE+1
         lda     #$1f       ;start at $1FFF
         ldy     #$ff
         ldx     #$69       ;initial value
@DoDescram:
         stx     des_sub
         sta     src_ptr+1
         lda     #$00
         sta     src_ptr
@DesLoop:
         lda     (src_ptr),y ;get old value
         sec
         sbc     des_sub    ;subtract rolling sub
         sta     (src_ptr),y ;store it
         sta     des_sub    ;update rolling sub
         tya                ;Y == 0?
         bne     @NoDec     ;not yet
         dec     src_ptr+1  ;yes, dec high byte
@NoDec:  dey                ;advance
         cpy     PLAYER_STATE ;do we need to check for done?
         bne     @DesLoop   ;not here
         lda     src_ptr+1  ;check the ptr high byte
         cmp     PLAYER_STATE+1 ;reached the end?
         bne     @DesLoop   ;not yet
         rts

         .byte   $b7,$aa,$45,$23

GOIN:    jsr     RES2       ;BBC .GOIN
         jsr     DrawOctagonRings
         lda     #$00
         sta     player_speed
         sta     player_laser_temp
         sta     $69
         lda     #$ff
         sta     $d4
         sta     $d5
         sta     $d6
         ldy     #$2c
         jsr     LongDelay
         lda     $028f
         and     #$03
         bne     @L461B
         lda     kill_score+1
         beq     @L4666
         lda     ship_state2
         lsr     A
         bne     @L4666
         jmp     L62FA

@L461B:  cmp     #$03
         bne     @L4622
         jmp     L62E9

@L4622:  lda     ship_state2
         cmp     #$02
         bne     @L4666
         lda     $028f
         and     #$0f
         cmp     #$02
         bne     @L463C
         lda     kill_score+1
         cmp     #$05
         bcc     @L4666
         jmp     L62B7

@L463C:  cmp     #$06
         bne     @L4651
         lda     $0290
         cmp     #$d7
         bne     @L4666
         lda     $0291
         cmp     #$54
         bne     @L4666
         jmp     L62C7

@L4651:  cmp     #$0a
         bne     @L4666
         lda     $0290
         cmp     #$3f
         bne     @L4666
         lda     $0291
         cmp     #$48
         bne     @L4666
         jmp     L62D5

@L4666:  jmp     L7F2D

         .byte   $a9,$28,$78,$8d,$f0,$03,$a9,$7e,$8d,$f1,$03,$58,$60,$fb,$04,$f7 ;unreferenced code?
         .byte   $08,$ef,$10,$df,$20,$bf,$40,$7f,$80

; 
; Updates pitch / roll.
; 
UpdateShipControls:
         lda     data_buffer
         sta     rng_state
         ldx     roll_velocity
         jsr     L61DA
         jsr     L61DA
         txa
         eor     #$80
         tay
         and     #$80
         sta     $6c
         stx     roll_velocity
         eor     #$80
         sta     $6d
         tya
         bpl     @L46A5
         eor     #$ff
         clc
         adc     #$01
@L46A5:  lsr     A
         lsr     A
         cmp     #$08
         bcs     @L46AC
         lsr     A
@L46AC:  sta     $6b
         ora     $6c
         sta     $b9
         ldx     pitch_velocity
         jsr     L61DA
         txa
         eor     #$80
         tay
         and     #$80
         stx     pitch_velocity
         sta     $a8
         eor     #$80
         sta     $a7
         tya
         bpl     @L46CA
         eor     #$ff
@L46CA:  adc     #$04
         lsr     A
         lsr     A
         lsr     A
         lsr     A
         cmp     #$03
         bcs     @L46D5
         lsr     A
@L46D5:  sta     $67
         ora     $a7
         sta     $66
         lda     cmd_throttle_up
         beq     @NotThrotUp
         lda     player_speed
         cmp     #$28
         bcs     @NotThrotUp
         inc     player_speed
@NotThrotUp:
         lda     cmd_throttle_down
         beq     @NotThrotDn
         dec     player_speed
         bne     @NotThrotDn
         inc     player_speed
@NotThrotDn:
         lda     cmd_unarm_mssl
         and     missile_armed_flag
         beq     @NotUnarmMsl
         ldy     #$08
         jsr     L75E6
         jsr     Noise1
         lda     #$00
         sta     PLAYER_STATE+48
@NotUnarmMsl:
         lda     missile_thing
         bpl     @NotTargMsl
         lda     cmd_targ_mssl
         beq     @NotTargMsl
         ldx     missile_armed_flag
         beq     @NotTargMsl
         sta     PLAYER_STATE+48
         ldy     #$0c
         jsr     DrawIndicator
@NotTargMsl:
         lda     cmd_fire_mssl
         beq     @NotFireMsl
         lda     missile_thing
         bmi     @NotEcm
         jsr     L5C3A
@NotFireMsl:
         lda     cmd_energy_bomb
         beq     @NoBomb
         lda     have_energy_bomb
         bmi     @NoBomb
         asl     have_energy_bomb
         beq     @NoBomb
         jsr     DetonateBomb
@NoBomb: lda     cmd_dock_off
         beq     @NotDockOff
         lda     #$00
         sta     computer_dock_flag
@NotDockOff:
         lda     cmd_escape_cap ;trying to eject?
         and     have_escape_pod ;...with the appropriate equipment?
         beq     @InWitch   ;nope
         lda     witch_space_flag ;are we in witch space?
         bne     @InWitch   ;yes, no escape
         jmp     EjectEscape

@InWitch:
         lda     cmd_local_jump ;check 'J' key
         beq     @NotJump
         jsr     LocalJump
@NotJump:
         lda     cmd_ecm    ;check 'E' key
         and     have_ecm   ;do we have an ECM?
         beq     @NotEcm    ;no
         lda     ecm_active_flag ;any ECM active?
         bne     @NotEcm    ;yes
         dec     player_ecm_active
         jsr     ActivateEcm
@NotEcm: lda     cmd_dock_on ;check 'C' key
         and     have_docking_comp
         beq     @L4770
         sta     computer_dock_flag
@L4770:  lda     #$00
         sta     $7e
         sta     $aa
         lda     player_speed
         lsr     A
         ror     $aa
         lsr     A
         ror     $aa
         sta     $ab
         lda     main_dec2_thing
         bne     @L47B0
         lda     cmd_fire_laser
         beq     @L47B0
         lda     player_laser_temp
         cmp     #$f2
         bcs     @L47B0
         ldx     PLAYER_STATE+49
         lda     $029f,x
         beq     @L47B0
         pha
         and     #$7f
         sta     $7e
         sta     PLAYER_STATE+47
         jsr     MakeNoise5
         jsr     L6217
         pla
         bpl     @L47AB
         lda     #$00
@L47AB:  and     #$fa
         sta     main_dec2_thing
@L47B0:  ldx     #$00
L47B2:   stx     $b0
         lda     PLAYER_STATE,x
         bne     @L47BC
         jmp     L497A

@L47BC:  sta     $b8
         jsr     GetInfo
         ldy     #$24
@L47C3:  lda     (polyobj_ptr),y
         sta     polyobj_xpos_lo,y
         dey
         bpl     @L47C3
         lda     $b8
         bmi     @L47FC
         asl     A
         tay
         lda     hull_addr_lo,y
         sta     hull_ptr
         lda     hull_addr_hi,y
         sta     hull_ptr+1
         lda     have_energy_bomb
         bpl     @L47FC
         cpy     #$04
         beq     @L47FC
         cpy     #$3a
         beq     @L47FC
         cpy     #$3e
         bcs     @L47FC
         lda     polyobj_vis
         and     #$20
         bne     @L47FC
         asl     polyobj_vis
         sec
         ror     polyobj_vis
         ldx     $b8
         jsr     CountKill
@L47FC:  jsr     MVEIT
         ldy     #$24
@L4801:  lda     polyobj_xpos_lo,y
         sta     (polyobj_ptr),y
         dey
         bpl     @L4801
         lda     polyobj_vis
         and     #$a0
         jsr     L7E20
         bne     @L4863
         lda     polyobj_xpos_lo
         ora     polyobj_ypos_lo
         ora     polyobj_zpos_lo
         bmi     @L4863
         ldx     $b8
         bmi     @L4863
         cpx     #$02
         beq     @L4866
         and     #$c0
         bne     @L4863
         cpx     #$01
         beq     @L4863
         lda     have_fuel_scoop
         and     INWK+5
         bpl     L48A2
         cpx     #$05
         beq     @L4843
         ldy     #$00       ;fuel scoop / debris info in hull def
         lda     (hull_ptr),y
         lsr     A          ;get high nibble (fuel scoop info)
         lsr     A
         lsr     A
         lsr     A
         beq     L48A2
         adc     #$01
         bne     @L4848
@L4843:  jsr     GetRandom
         and     #$07
@L4848:  jsr     L63E3
         ldy     #$4e
         bcs     L4890
         ldy     $02f0
         adc     player_cargo,y
         sta     player_cargo,y
         tya
         adc     #$d0       ;Food, Textiles, ...
         jsr     PrintMessageBriefly
         asl     $30
         sec
         ror     $30
@L4863:  jmp     L48B1

@L4866:  lda     data_buffer+73
         and     #$04
         bne     L4887
         lda     polyobj_mox2_hi
         cmp     #$d6
         bcc     L4887
         jsr     L8274
         lda     $70
         cmp     #$59
         bcc     L4887
         lda     $1c
         and     #$7f
         cmp     #$50
         bcc     L4887
GOIN_jmp:
         jmp     GOIN

L4887:   lda     player_speed
         cmp     #$05
         bcc     L489A
         jmp     GameOver

L4890:   jsr     MakeNoise2
         asl     polyobj_vis
         sec
         ror     polyobj_vis
         bne     L48B1

L489A:   lda     #$01
         sta     player_speed
         lda     #$05
         bne     L48AB

L48A2:   asl     polyobj_vis
         sec
         ror     polyobj_vis
         lda     $2f
         sec
         ror     A
L48AB:   jsr     L74B4
         jsr     MakeNoise2
L48B1:   lda     $30
         bpl     @L48B8
         jsr     SCAN
@L48B8:  lda     displayed_screen
         bne     @L492B
         jsr     L93C2
         jsr     L5BD3
         bcc     @L4928
         lda     PLAYER_STATE+48
         beq     @L48D3
         jsr     MakeNoise3
         ldx     $b0
         ldy     #$14
         jsr     L75E8
@L48D3:  lda     $7e
         beq     @L4928
         ldx     #$0f
         jsr     L954E
         lda     $b8
         cmp     #$02
         beq     @L4923
         cmp     #$1f
         bcc     @L48F0
         lda     $7e
         cmp     #$17
         bne     @L4923
         lsr     $7e
         lsr     $7e
@L48F0:  lda     $2f
         sec
         sbc     $7e
         bcs     @L4921
         asl     polyobj_vis
         sec
         ror     polyobj_vis
         lda     $b8
         cmp     #$07
         bne     @L4912
         lda     $7e
         cmp     #$32
         bne     @L4912
         jsr     GetRandom
         ldx     #$08
         and     #$03
         jsr     L4AC0
@L4912:  ldy     #$04
         jsr     L4AB3
         ldy     #$05
         jsr     L4AB3
         ldx     $b8
         jsr     CountKill
@L4921:  sta     $2f
@L4923:  lda     $b8
         jsr     L5C59
@L4928:  jsr     DrawObject
@L492B:  ldy     #$23
         lda     $2f
         sta     (polyobj_ptr),y
         lda     $30
         bmi     @NoBounty
         lda     polyobj_vis
         bpl     @L4965
         and     #$20
         beq     @L4965
         lda     $30
         and     #$40
         ora     player_fug_inno
         sta     player_fug_inno
         lda     PLAYER_STATE+54
         ora     witch_space_flag ;no bounties in witch space
         bne     @NoBounty
         ldy     #$0a       ;bounty value, low
         lda     (hull_ptr),y
         beq     @NoBounty  ;(shouldn't we check the high byte?)
         tax
         iny                ;bounty value, high
         lda     (hull_ptr),y
         tay
         jsr     AddCredits
         lda     #$00       ;invalid token?
         jsr     PrintMessageBriefly ;(should display current cash)
@NoBounty:
         jmp     L797D

@L4965:  lda     $b8
         bmi     @L496E
         jsr     L7E13
         bcc     @NoBounty
@L496E:  ldy     #$1f
         lda     polyobj_vis
         sta     (polyobj_ptr),y
         ldx     $b0
         inx
         jmp     L47B2

L497A:   lda     have_energy_bomb
         bpl     @L498A
         jsr     L4B00
         asl     have_energy_bomb
         bmi     @L498A
         jsr     DrawBombAnim
@L498A:  lda     $b6
         and     #$07
         bne     @L49F6
         ldx     $d6
         bpl     @L49A2
         ldx     $d5
         jsr     L7439
         stx     $d5
         ldx     $d4
         jsr     L7439
         stx     $d4
@L49A2:  sec
         lda     have_energy_unit
         adc     $d6
         bcs     @L49AC
         sta     $d6
@L49AC:  lda     witch_space_flag
         bne     @L49F3
         lda     $b6
         and     #$1f
         bne     @L49FF
         lda     PLAYER_STATE+11
         bne     @L49F3
         tay
         jsr     L5261
         bne     @L49F3
         ldx     #$1c
@L49C4:  lda     data_buffer,x
         sta     polyobj_xpos_lo,x
         dex
         bpl     @L49C4
         inx
         ldy     #$09
         jsr     L523E
         bne     @L49F3
         ldx     #$03
         ldy     #$0b
         jsr     L523E
         bne     @L49F3
         ldx     #$06
         ldy     #$0d
         jsr     L523E
         bne     @L49F3
         lda     #$c0
         jsr     L7E15
         bcc     @L49F3
         jsr     L785B
         jsr     L74FE
@L49F3:  jmp     @L4A7B

@L49F6:  lda     witch_space_flag
         bne     @L49F3
         lda     $b6
         and     #$1f
@L49FF:  cmp     #$0a
         bne     @L4A30
         lda     #$32
         cmp     $d6
         bcc     @L4A0D
         asl     A
         jsr     PrintMessageBriefly
@L4A0D:  ldy     #$ff
         sty     lcoord_swap_flag-1
         iny
         jsr     L525F
         bne     @L4A7B
         jsr     L526D
         bcs     @L4A7B
         sbc     #$24
         bcc     @L4A2D
         sta     $ae
         jsr     TwoByteSqrt
         lda     $ad
         sta     lcoord_swap_flag-1
         bne     @L4A7B
@L4A2D:  jmp     GameOver

@L4A30:  cmp     #$0f
         bne     @L4A3D
         lda     computer_dock_flag
         beq     @L4A7B
         lda     #$7b
         bne     @L4A78

@L4A3D:  cmp     #$14
         bne     @L4A7B
         lda     #$1e
         sta     PLAYER_STATE+46
         lda     PLAYER_STATE+11
         bne     @L4A7B
         ldy     #$25
         jsr     L5261
         bne     @L4A7B
         jsr     L526D
         eor     #$ff
         adc     #$1e
         sta     PLAYER_STATE+46
         bcs     @L4A2D
         cmp     #$e0
         bcc     @L4A7B
         lda     have_fuel_scoop
         beq     @L4A7B
         lda     $ab
         lsr     A
         adc     player_fuel
         cmp     #$46
         bcc     @L4A73
         lda     #$46
@L4A73:  sta     player_fuel
         lda     #$a0       ;"Fuel Scoops On"
@L4A78:  jsr     PrintMessageBriefly
@L4A7B:  lda     PLAYER_STATE+47
         beq     @L4A8F
         lda     main_dec2_thing
         cmp     #$08
         bcs     @L4A8F
         jsr     L6236
         lda     #$00
         sta     PLAYER_STATE+47
@L4A8F:  lda     player_ecm_active
         beq     @L4A99
         jsr     L743C
         beq     @L4AA9
@L4A99:  lda     ecm_active_flag
         beq     @L4AAC
         ldy     #$14
         ora     #$c0
         tax
         jsr     MakeNoise4
         dec     ecm_active_flag
         bne     @L4AAC
@L4AA9:  jsr     L9512
@L4AAC:  lda     displayed_screen
         bne     L4ACD
         jmp     L5045

L4AB3:   jsr     GetRandom
         bpl     L4ACD
         tya
         tax
         ldy     #$00
         and     (hull_ptr),y
         and     #$0f
L4AC0:   sta     $bd
         beq     L4ACD
@L4AC4:  lda     #$00
         jsr     LaunchObject1
         dec     $bd
         bne     @L4AC4
L4ACD:   rts

; Energy bomb detonations draw a jagged horizontal line several times while
; making noises.
DrawBombAnim:
         lda     displayed_screen ;check which view we're showing
         bne     @NotSpace  ;not space, bail
         ldy     #$01
         lda     L4B3C
         sta     XX12
         lda     L4B46
         sta     XX12+1
@Loop:   jsr     MakeNoise7
         lda     XX12
         sta     $6e
         lda     XX12+1
         sta     $6f
         lda     L4B3C,y
         sta     $70
         sta     XX12
         lda     L4B46,y
         sta     $71
         sta     XX12+1
         jsr     DrawLine
         iny
         cpy     #$0a
         bcc     @Loop
@NotSpace:
         rts

L4B00:   jsr     @L4B03
@L4B03:  jsr     @L4B06
@L4B06:  jsr     MakeNoise6
         jsr     DrawBombAnim
DetonateBomb:
         ldy     #$00
@Loop:   jsr     GetRandom
         and     #$7f
         adc     #$03
         sta     L4B46,y
         txa
         and     #$1f
         clc
         adc     @L4B32,y
         sta     L4B3C,y
         iny
         cpy     #$0a       ;set 10 values
         bcc     @Loop
         ldx     #$00
         stx     L4B3C+9
         dex
         stx     L4B3C
         bcs     DrawBombAnim

@L4B32:  .byte   $e0,$e0,$c0,$a0,$80,$60,$40,$20,$00,$00
L4B3C:   .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
L4B46:   .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00

PrintNavyCapName:
         lda     #$d9       ;Curruthers, Fosdyke Smythe, Fortesque
         bne     L4B56

PrintDockDcPlus:
         lda     #$dc       ;"last seen" / "believed to have jumped"
L4B56:   clc
         adc     ship_state2
         bne     PrintDockedStr
; 
; Prints a string from the extended set of docked messages.
; 
token_ptr .set   $5e
PrintExtDockedStr:
         pha                ;preserve A-reg
         tax
         tya
         pha                ;preserve Y-reg
         lda     token_ptr
         pha
         lda     token_ptr+1
         pha
         lda     #<ext_docked_text
         sta     token_ptr
         lda     #>ext_docked_text
         bne     PrintDocked2

; 
; Print a message from a tokenized string while docked.
; 
; On entry:
;   A-reg: message index
; 
; On exit:
;   A-reg and Y-reg preserved
; 
PrintDockedStr:
         pha                ;preserve A-reg
         tax
         tya                ;preserve Y-reg
         pha
         lda     token_ptr  ;preserve pointer
         pha                ;(because of recursion)
         lda     token_ptr+1
         pha
         lda     #<docked_text ;search docked text table
         sta     token_ptr
         lda     #>docked_text
; X-reg has message index.
PrintDocked2:
         sta     token_ptr+1
         ldy     #$00
@L4B82:  lda     (token_ptr),y ;get data
         eor     #EOR_DOCKED ;decrypt it
         bne     @NotEnd    ;not end of string, branch
         dex                ;dec index
         beq     @GotString ;found the one we want
@NotEnd: iny
         bne     @L4B82
         inc     token_ptr+1
         bne     @L4B82
@GotString:
         iny                ;move to start of string
         bne     @NoInc
         inc     token_ptr+1
@NoInc:  lda     (token_ptr),y ;get token
         eor     #EOR_DOCKED ;decrypt
         beq     @StrEnd    ;end of string, branch
         jsr     PrintDockedToken
         jmp     @GotString

@StrEnd: pla                ;restore pointer
         sta     token_ptr+1
         pla
         sta     token_ptr
         pla
         tay                ;restore Y-reg
         pla                ;restore A-reg
         rts

; 
; Print a "docked" text token:
;   $00: invalid
;   $01-1f: format token (invokes function)
;   $20-5a: ASCII
;   $5b-80: planet description tokens
;   $81-d6: message index 0-55
;   $d7-ff: digrams
; 
; On entry:
;   A-reg: token to print
; 
; Y-reg is preserved.
; 
PrintDockedToken:
         cmp     #$20
         bcc     PrintDockedFmt
         bit     txt_flight_flag ;flight string mode on?
         bpl     @DoDocked  ;no
         tax                ;yes, handle as flight string
         tya
         pha
         lda     token_ptr
         pha
         lda     token_ptr+1
         pha
         txa
         jsr     PrintFlightToken
         jmp     Restore5ePtr

@DoDocked:
         cmp     #'['       ;<= 'Z'?
         bcc     PrintDockedChar ;yes, print plain character
         cmp     #$81
         bcc     PrintPlanetDescToken
         cmp     #$d7       ;is it a digram?
         bcc     PrintDockedStr ;no, canned string
         sbc     #$d7       ;get digram index
         asl     A
         pha
         tax
         lda     docked_digram_tab,x
         jsr     PrintDockedChar
         pla
         tax
         lda     docked_digram_tab+1,x
PrintDockedChar:
         cmp     #'A'       ;is it a number or punctuation?
         bcc     @DoPrintChar ;yes, don't mess with it
         bit     text_ucase_flag ;upper-case flag set?
         bmi     @MakeUpper ;yes, make it upper
         bit     txt_lcase_flag ;lower-case flag set?
         bmi     @MakeLower ;yes, make it lower
@MakeUpper:
         ora     text_ucase_mask
@MakeLower:
         and     text_lcase_mask
@DoPrintChar:
         jmp     PrintChar

PrintDockedFmt:
         tax                ;A-reg holds $01-1f
         tya                ;preserve Y-reg
         pha
         lda     token_ptr  ;preserve $5e/5f
         pha
         lda     token_ptr+1
         pha
         txa
         asl     A          ;double it
         tax
         lda     token_print_funcs-2,x ;get address of function to call
         sta     @_CallAddr+1
         lda     token_print_funcs-1,x
         sta     @_CallAddr+2
         txa
         lsr     A
@_CallAddr:
         jsr     PrintChar  ;call it
Restore5ePtr:
         pla                ;restore $5e/5f
         sta     token_ptr+1
         pla
         sta     token_ptr
         pla                ;restore Y-reg
         tay
         rts

PrintPlanetDescToken:
         sta     $0a        ;$5b-80
         tya
         pha
         lda     token_ptr
         pha
         lda     token_ptr+1
         pha
         jsr     GetRandom
         tax
         lda     #$00
         cpx     #$33
         adc     #$00
         cpx     #$66
         adc     #$00
         cpx     #$99
         adc     #$00
         cpx     #$cc
         ldx     $0a
         adc     planet_desc_adj-91,x
         jsr     PrintDockedStr
         jmp     Restore5ePtr

ClearUcaseMask:
         lda     #$00
         .byte   $2c
SetUcaseMask:
         lda     #$20
         sta     text_ucase_mask
         lda     #$00
         sta     text_ucase_flag
         rts

T4C56:   lda     #$06
         sta     text_hposn
         lda     #$ff
         sta     txt_lcase_flag
         rts

T4C60:   lda     #$01
         sta     text_hposn
         jmp     PrintFlightHud

SetUpperMask:
         lda     #$80
         sta     text_ucase_flag
         lda     #$20
         sta     text_ucase_mask
         rts

SetFlightTokFlag:
         lda     #$80
         sta     text_mod_flags
         lda     #$ff
         .byte   $2c
ClearFlightTokFlag:
         lda     #$00
         sta     txt_flight_flag
         rts

SetBufferFlag:
         lda     #$80
         .byte   $2c
ClearBufferFlag:
         lda     #$00
         sta     txt_buffer_flag
         asl     A          ;now A-reg=0 either way
         sta     txt_buffer_index ;set index=0
         rts

PrintSpeciesIan:
         lda     text_mod_flags
         and     #$bf
         sta     text_mod_flags
         lda     #$03       ;selected planet
         jsr     PrintFlightToken
         ldx     txt_buffer_index
         lda     <BUFFER_0100+255,x ;check the last letter
         jsr     IsVowel    ;is it a vowel?
         bcc     @NotVowel  ;no
         dec     txt_buffer_index ;yes, back up one
@NotVowel:
         lda     #$99       ;"-ian" suffix, e.g. "fubarian"
         jmp     PrintDockedStr

RandomName:
         jsr     LcaseDF
         jsr     GetRandom  ;random number of digrams
         and     #$03
         tay
@More:   jsr     GetRandom  ;random digram
         and     #$3e
         tax
         lda     docked_digram_tab+2,x
         jsr     PrintDockedChar
         lda     docked_digram_tab+3,x
         jsr     PrintDockedChar
         dey
         bpl     @More
         rts

LcaseDF: lda     #$df
         sta     text_lcase_mask
         rts

; 
; Returns with carry set if A-reg holds A/E/I/O/U.
; 
IsVowel: ora     #$20       ;convert to lower
         cmp     #'a'
         beq     @L4CE5
         cmp     #'e'
         beq     @L4CE5
         cmp     #'i'
         beq     @L4CE5
         cmp     #'o'
         beq     @L4CE5
         cmp     #'u'
         beq     @L4CE5
         clc
@L4CE5:  rts

token_print_funcs:
         .word   ClearUcaseMask ;$01
         .word   SetUcaseMask ;$02
         .word   PrintFlightToken ;$03 - print flight token $03
         .word   PrintFlightToken ;$04 - print flight token $04
         .word   ClearFlightTokFlag ;$05
         .word   SetFlightTokFlag ;$06
         .word   PrintChar  ;$07 [beep]
         .word   T4C56      ;$08 - htab 6, set lcase flag
         .word   T4C60      ;$09 - print flight HUD text?
         .word   PrintChar  ;$0a (LF)
         .word   T4EA9      ;$0b - clears screen??  (first part of disk access menu str)
         .word   PrintChar  ;$0c (FF)
         .word   SetUpperMask ;$0d
         .word   SetBufferFlag ;$0e
         .word   ClearBufferFlag ;$0f
         .word   PrintCharA ;$10 - print 'A'
         .word   PrintSpeciesIan ;$11 - print species + "-ian"
         .word   RandomName ;$12 - random set of digrams
         .word   LcaseDF    ;$13
         .word   PrintChar  ;$14 (Ctrl+T)
         .word   ClearLines ;$15
         .word   WaitKeyDrawHud ;$16
         .word   Vposn9_SetMask ;$17
         .word   WaitForKey ;$18 - wait for key
         .word   PrintIncomingMessage ;$19
         .word   InputName  ;$1a
         .word   PrintNavyCapName ;$1b
         .word   PrintDockDcPlus ;$1c
         .word   Vposn5_SetMask ;$1d
         .word   PrintDiskTape
         .word   PrintTapeDisk
         .word   PrintChar  ;$20
; Digrams used in docked string construction and planet descriptions.  This
; defines 13 pairs, although the planet description code skips the first one. 
; The code accepts a value from $00-28, so we use entries $00-1a in the flight
; digram table as well.
; 
; 00 fflf  04 IT   08 ON   0c NO
; 01 AB    05 IL   09 LO
; 02 OU    06 ET   0a NU
; 03 SE    07 ST   0b TH
docked_digram_tab:
         .byte   $0c
         .byte   $0a
         .byte   "ABOUSEITILETSTONLONUTHNO"
; Digrams used in flight string construction:
; 
; 00 AL   08 US   10 ER   18 ED
; 01 LE   09 ES   11 AT   19 OR
; 02 XE   0a AR   12 EN   1a QU
; 03 GE   0b MA   13 BE   1b AN
; 04 ZA   0c IN   14 RA   1c TE
; 05 CE   0d DI   15 LA   1d IS
; 06 BI   0e RE   16 VE   1e RI
; 07 SO   0f A?   17 TI   1f ON
; 
; For example, "HARMLESS" would be 48 8a 4d 81 53 53 (H AR M LE S S).  Strings
; are EORed with $23 (to make them harder to find?).
flight_digram_tab:
         .byte   "ALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRI"
         .byte   "ON"
L4D80:   .byte   ":0.E."
commander_name:
         .byte   "jameson"
save_game_state:
         .byte   $0d,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$10,$0f,$11,$00,$03,$1c,$0e,$00,$00,$0a
         .byte   $00,$11,$3a,$07,$09,$08,$00,$00,$00,$00,$80,$00
scramble_thing:
         .res    22,$00
; Default save-game data.
         .byte   ":0.E."
commander_jameson:
         .byte   "JAMESON",$0d
         .byte   $00
         .byte   $14
         .byte   $ad
         .byte   $4a
         .byte   $5a
         .byte   $48
         .byte   $02
         .byte   $53
         .byte   $b7
         .byte   $00
         .byte   $00
         .byte   $03
         .byte   $e8
         .byte   $46
         .byte   $00
         .byte   $00
         .byte   $0f
         .res    5,$00
         .byte   $16
         .res    28,$00
         .byte   $03
         .byte   $00
         .byte   $10
         .byte   $0f
         .byte   $11
         .byte   $00
         .byte   $03
         .byte   $1c
         .byte   $0e
         .byte   $00
         .byte   $00
         .byte   $0a
         .byte   $00
         .byte   $11
         .byte   $3a
         .byte   $07
         .byte   $09
         .byte   $08
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   $80
         .byte   $aa
         .byte   $27
         .byte   $03
         .res    13,$00
; end of data
         .byte   $00
         .byte   $00
         .byte   $00
L4E58:   .byte   $00
         .byte   $10
         .byte   $10
         .res    6,$14
         .res    6,$0c
         .byte   $14
         .res    7,$0c
         .byte   $10
         .res    5,$0c
         .byte   $18
         .byte   $0c
         .byte   $0c
         .byte   $00
         .byte   $0c
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   $00
L4E7E:   .byte   $00
L4E7F:   .byte   $08
         .byte   $25
         .byte   $08
         .byte   $4a
         .byte   $08
         .byte   $6f
         .byte   $08
         .byte   $94
         .byte   $08
         .byte   $b9
         .byte   $08
         .byte   $de
         .byte   $08
         .byte   $03
         .byte   $09
         .byte   $28
         .byte   $09

L4E90:   ldx     #$27
@L4E92:  lda     xcoords+128,x
         cmp     #$a0
         beq     @L4E9E
         lda     #$ad
         sta     ycoords,x
@L4E9E:  dex
         bpl     @L4E92
         rts

ClearKbdStrb:
         bit     KBDSTRB
         rts

PrintFlightTokLine:
         jsr     PrintFlightToken
T4EA9:   lda     display_mode_flag ;text or hi-res?
         bmi     L4E90      ;text, branch
         lda     #19
         bne     DrawHorizontalLine

         .byte   $a9
         .byte   $17

IncTextDrawLine:
         jsr     IncTextVposn
DrawHorizontalLine:
         sta     $6f
         lda     #$10
         sta     $35
         ldx     #$00
         stx     $6e
         dex
         stx     $70
         jmp     DrawHorizLine ;draw horizontal line

L4EC6:   jsr     L7878
         sty     $6f
         lda     #$00
         sta     $0600,y
         jmp     DrawHorizLine

saved_y  .set    $06
row_mod8 .set    $07
row_div8 .set    $08
hptr     .set    $0a
what_is_this .set $b4
L4ED3:   jsr     ADD
         sta     $63
         txa
         sta     $06ef,y
L4EDC:   lda     $6e
         bpl     @L4EE5
         eor     #$7f
         clc
         adc     #$01
@L4EE5:  eor     #$80
         tax
         lda     $6f
         and     #$7f
         cmp     #$44
         bcs     Return
         lda     $6f
         bpl     @L4EF8
         eor     #$7f
         adc     #$01
@L4EF8:  sta     $d0
         lda     #$45
         sbc     $d0
; 
; Draws a 2x2 white block, i.e a rect that covers xc,yc to xc+1,yc-1.
; 
; Seems to be used to draw the stars on the galactic chart.
; 
; On entry:
;   A-reg: Y-coord
;   X-reg: X-coord
;   $b4: ?
; 
; On exit:
;   Y-reg preserved
; 
DrawStar:
         sty     saved_y    ;preserve Y-reg
         sta     hptr+1     ;store row here temporarily
         lsr     A          ;divide by 8
         lsr     A
         lsr     A
         sta     row_div8
         tay
         lda     hires_line_lo,y ;set hi-res row address, low byte
         sta     hptr
         lda     hptr+1     ;now fix the high byte
         and     #$07       ;compute mod 8
         sta     row_mod8
         asl     A          ;multiply by 4
         asl     A
         adc     hires_line_hi,y ;set hi-res address, high byte
         sta     hptr+1
         lda     mod7_table,x ;get col pixel
         asl     A          ;x2
         ldy     what_is_this
         bmi     @NegB4
         adc     #14
@NegB4:  cpy     #80
         ldy     div7_table,x ;get col byte
         tax
         bcs     DrawLast
         lda     hi_res_2pixel2,x ;blend first byte
         eor     (hptr),y
         sta     (hptr),y
         lda     hi_res_2pixel2+1,x ;anything in second byte?
         beq     @Skip2     ;no, skip that one
         iny                ;yes, blend second byte
         eor     (hptr),y
         sta     (hptr),y
         dey                ;back up
@Skip2:  lda     row_mod8   ;at top of 8-row section?
         beq     CalcRow    ;yes, do the bigger calculation
         lda     hptr+1     ;move up one row
         sbc     #$03
         sta     hptr+1
DrawLast:
         lda     hi_res_2pixel2,x ;blend first byte
         eor     (hptr),y
         sta     (hptr),y
         lda     hi_res_2pixel2+1,x ;anything in second byte?
         beq     @Done      ;no, done
         iny                ;yes, blend second byte
         eor     (hptr),y
         sta     (hptr),y
@Done:   ldy     saved_y
Return:  rts

CalcRow: stx     row_mod8   ;preserve X-reg
         ldx     row_div8   ;move up one row
         lda     hires_line_lo-1,x
         sta     hptr
         lda     hires_line_hi2-1,x
         sta     hptr+1
         ldx     row_mod8   ;restore X-reg
         jmp     DrawLast

; Two pixels, stored in two bytes so we don't have to special-case the ends.
hi_res_2pixel2:
         .byte   $03,$00
         .byte   $06,$00
         .byte   $0c,$00
         .byte   $18,$00
         .byte   $30,$00
         .byte   $60,$00
         .byte   $40,$01
; Same thing, but three pixels.
         .byte   $07,$00
         .byte   $0e,$00
         .byte   $1c,$00
         .byte   $38,$00
         .byte   $70,$00
         .byte   $60,$01
         .byte   $40,$03

L4F8B:   txa
         adc     $46
         sta     $9e
         lda     $47
         adc     $d0
         sta     $9f
         lda     $bc
         beq     @L4FAC
         inc     $bc
@L4F9C:  ldy     $91
         lda     #$ff
         cmp     ycoords-1,y
         beq     @L500E
         sta     ycoords,y
         inc     $91
         bne     @L500E
@L4FAC:  lda     $98
         sta     $6e
         lda     $99
         sta     $6f
         lda     $9a
         sta     $70
         lda     $9b
         sta     $71
         lda     $9c
         sta     $72
         lda     $9d
         sta     $73
         lda     $9e
         sta     $74
         lda     $9f
         sta     $75
         jsr     ClipLine
         bcs     @L4F9C
         lda     lcoord_swap_flag
         beq     @NoSwap
         lda     $6e
         ldy     $70
         sta     $70
         sty     $6e
         lda     $6f
         ldy     $71
         sta     $71
         sty     $6f
@NoSwap: ldy     $91
         lda     ycoords-1,y
         cmp     #$ff
         bne     @L4FFA
         lda     $6e
         sta     xcoords,y
         lda     $6f
         sta     ycoords,y
         iny
@L4FFA:  lda     $70
         sta     xcoords,y
         lda     $71
         sta     ycoords,y
         iny
         sty     $91
         jsr     DrawLine
         lda     $b5
         bne     @L4F9C
@L500E:  lda     $9c
         sta     $98
         lda     $9d
         sta     $99
         lda     $9e
         sta     $9a
         lda     $9f
         sta     $9b
         lda     $bd
         clc
         adc     $bf
         sta     $bd
         rts

L5026:   ldy     $e2
@L5028:  ldx     $06e2,y
         lda     $06c8,y
         sta     $6f
         sta     $06e2,y
         txa
         sta     $6e
         sta     $06c8,y
         lda     SCRNHOLE5+4,y
         sta     what_is_this
         jsr     L4EDC
         dey
         bne     @L5028
         rts

L5045:   ldx     PLAYER_STATE+49
         beq     @L5053
         dex
         bne     @L5050
         jmp     @L513F

@L5050:  jmp     L5D94

@L5053:  ldy     $e2
@L5055:  jsr     DV42
         lda     $ae
         lsr     $31
         ror     A
         lsr     $31
         ror     A
         ora     #$01
         sta     $ad
         lda     $0709,y
         sbc     $aa
         sta     $0709,y
         lda     SCRNHOLE5+4,y
         sta     what_is_this
         sbc     $ab
         sta     SCRNHOLE5+4,y
         jsr     L5F3C
         sta     $63
         lda     $31
         adc     $06ef,y
         sta     $62
         sta     $ae
         lda     $6f
         adc     $63
         sta     $63
         sta     $af
         lda     $06c8,y
         sta     $6e
         jsr     L5F41
         sta     $61
         lda     $31
         adc     $06d5,y
         sta     $60
         lda     $6e
         adc     $61
         sta     $61
         eor     $6d
         jsr     MLS1
         jsr     ADD
         sta     $63
         stx     $62
         eor     $6c
         jsr     MLS2
         jsr     ADD
         sta     $61
         stx     $60
         ldx     $67
         lda     $63
         eor     $a8
         jsr     MULTS
         sta     $ad
         jsr     MUT2
         asl     $31
         rol     A
         sta     $d0
         lda     #$00
         ror     A
         ora     $d0
         jsr     ADD
         sta     $61
         txa
         sta     $06d5,y
         lda     $62
         sta     $ae
         lda     $63
         sta     $af
         lda     #$00
         sta     $31
         lda     $66
         eor     #$80
         jsr     L4ED3
         lda     $61
         sta     $6e
         sta     $06c8,y
         and     #$7f
         cmp     #$78
         bcs     @L511C
         lda     $63
         sta     $06e2,y
         sta     $6f
         and     #$7f
         cmp     #$78
         bcs     @L511C
         lda     SCRNHOLE5+4,y
         cmp     #$10
         bcc     @L511C
         sta     what_is_this
@L5112:  jsr     L4EDC
         dey
         beq     @L511B
         jmp     @L5055

@L511B:  rts

@L511C:  jsr     GetRandom
         ora     #$04
         sta     $6f
         sta     $06e2,y
         jsr     GetRandom
         ora     #$08
         sta     $6e
         sta     $06c8,y
         jsr     GetRandom
         ora     #$90
         sta     SCRNHOLE5+4,y
         sta     what_is_this
         lda     $6f
         jmp     @L5112

@L513F:  ldy     $e2
@L5141:  jsr     DV42
         lda     $ae
         lsr     $31
         ror     A
         lsr     $31
         ror     A
         ora     #$01
         sta     $ad
         lda     $06c8,y
         sta     $6e
         jsr     L5F41
         sta     $61
         lda     $06d5,y
         sbc     $31
         sta     $60
         lda     $6e
         sbc     $61
         sta     $61
         jsr     L5F3C
         sta     $63
         lda     $06ef,y
         sbc     $31
         sta     $62
         sta     $ae
         lda     $6f
         sbc     $63
         sta     $63
         sta     $af
         lda     $0709,y
         adc     $aa
         sta     $0709,y
         lda     SCRNHOLE5+4,y
         sta     what_is_this
         adc     $ab
         sta     SCRNHOLE5+4,y
         lda     $61
         eor     $6c
         jsr     MLS1
         jsr     ADD
         sta     $63
         stx     $62
         eor     $6d
         jsr     MLS2
         jsr     ADD
         sta     $61
         stx     $60
         lda     $63
         eor     $a8
         ldx     $67
         jsr     MULTS
         sta     $ad
         lda     $61
         sta     $af
         eor     #$80
         jsr     MUT1
         asl     $31
         rol     A
         sta     $d0
         lda     #$00
         ror     A
         ora     $d0
         jsr     ADD
         sta     $61
         txa
         sta     $06d5,y
         lda     $62
         sta     $ae
         lda     $63
         sta     $af
         lda     #$00
         sta     $31
         lda     $66
         jsr     L4ED3
         lda     $61
         sta     $6e
         sta     $06c8,y
         lda     $63
         sta     $06e2,y
         sta     $6f
         and     #$7f
         cmp     #$6e
         bcs     @L5208
         lda     SCRNHOLE5+4,y
         cmp     #$a0
         bcs     @L5208
         sta     what_is_this
@L51FE:  jsr     L4EDC
         dey
         beq     @L5207
         jmp     @L5141

@L5207:  rts

@L5208:  jsr     GetRandom
         and     #$7f
         adc     #$0a
         sta     SCRNHOLE5+4,y
         sta     what_is_this
         lsr     A
         bcs     @L522B
         lsr     A
         lda     #$fc
         ror     A
         sta     $6e
         sta     $06c8,y
         jsr     GetRandom
         sta     $6f
         sta     $06e2,y
         jmp     @L51FE

@L522B:  jsr     GetRandom
         sta     $6e
         sta     $06c8,y
         lsr     A
         lda     #$e6
         ror     A
         sta     $6f
         sta     $06e2,y
         bne     @L51FE
L523E:   lda     polyobj_xpos_lo,y
         asl     A
         sta     $7b
         lda     INWK+1,y
         rol     A
         sta     $7c
         lda     #$00
         ror     A
         sta     $7d
         jsr     L5378
         sta     INWK+2,x
         ldy     $7b
         sty     polyobj_xpos_lo,x
         ldy     $7c
         sty     INWK+1,x
         and     #$7f
         rts

L525F:   lda     #$00
L5261:   ora     data_buffer+2,y
         ora     data_buffer+5,y
         ora     data_buffer+8,y
         and     #$7f
         rts

L526D:   lda     data_buffer+1,y
         jsr     L5F32
         sta     $ae
         lda     data_buffer+4,y
         jsr     L5F32
         adc     $ae
         bcs     @L528B
         sta     $ae
         lda     data_buffer+7,y
         jsr     L5F32
         adc     $ae
         bcc     @L528D
@L528B:  lda     #$ff
@L528D:  rts

L528E:   lda     #$cd       ;"DOCKED"
         jsr     PrintDockedStr
         jsr     OutputFF
         jmp     L52D6

HiKillScore:
         ldx     #$09       ;start at "Elite"
         cmp     #$19       ;>= $1900?
         bcs     PrintRating2 ;yes, done
         dex
         cmp     #$0a       ;>= $0a00?
         bcs     PrintRating2 ;yes, Deadly
         dex
         cmp     #$02       ;>= $0200?
         bcs     PrintRating2 ;yes, Dangerous
         dex                ;reduce to merely "Competent"
         bne     PrintRating2 ;(always)
ShipStatusScreen:
         lda     #$08
         jsr     L6411
         jsr     L6A9E
         lda     #$07
         sta     text_hposn
         lda     #$7e       ;(multi-line commander / system / "condition:")
         jsr     PrintFlightTokLine
         lda     #$0f       ;?
         ldy     docked_flag
         bne     L528E
         lda     #$e6       ;"Green"
         ldy     PLAYER_STATE+42
         ldx     PLAYER_STATE+2,y
         beq     @L52D3
         ldy     $d6
         cpy     #$80
         adc     #$01       ;"Red"
@L52D3:  jsr     PrintTokFF
L52D6:   lda     #$7d       ;"$$$$$$.0 Cr Legal Status:"
         jsr     PrintTokSpc
         lda     #$13       ;"Clean"
         ldy     player_fug_inno
         beq     @L52E6
         cpy     #$32
         adc     #$01       ;"Offender"
@L52E6:  jsr     PrintTokFF
         lda     #$10       ;"Rating:"
         jsr     PrintTokSpc
; Compute player rating.
         lda     kill_score+1 ;kill score >= 256?
         bne     HiKillScore ;yes, use different function
         tax                ;X-reg=0
         lda     kill_score ;set X-reg to log2(score)-2
         lsr     A          ;divide by 4
         lsr     A
@L52F9:  inx                ;inc result until dividing by 2 yields zero
         lsr     A          ;$00-07=1, $08-0F=2, $10-$1f=3, etc.
         bne     @L52F9     ;Harmless to Competent
PrintRating2:
         txa
         clc
         adc     #$15       ;"Harmless" - 1
         jsr     PrintTokFF
         lda     #$12       ;"EQUIPMENT:"
         jsr     PrintTokFFHposn
         lda     have_escape_pod
         beq     @L5313
         lda     #$70       ;"Escape Pod"
         jsr     PrintTokFFHposn
@L5313:  lda     have_fuel_scoop
         beq     @L531D
         lda     #$6f       ;"Fuel Scoops"
         jsr     PrintTokFFHposn
@L531D:  lda     have_ecm
         beq     @L5327
         lda     #$6c       ;"E.C.M. System"
         jsr     PrintTokFFHposn
@L5327:  lda     #$71
         sta     $c0
@L532B:  tay
         ldx     PLAYER_STATE+7,y
         beq     @L5334
         jsr     PrintTokFFHposn
@L5334:  inc     $c0
         lda     $c0
         cmp     #$75
         bcc     @L532B
         ldx     #$00
@L533E:  stx     $bd
         ldy     $029f,x
         beq     @L5368
         txa
         clc
         adc     #$60
         jsr     PrintTokSpc
         lda     #$67
         ldx     $bd
         ldy     $029f,x
         cpy     #$8f
         bne     @L5359
         lda     #$68
@L5359:  cpy     #$97
         bne     @L535F
         lda     #$75
@L535F:  cpy     #$32
         bne     @L5365
         lda     #$76
@L5365:  jsr     PrintTokFFHposn
@L5368:  ldx     $bd
         inx
         cpx     #$04
         bcc     @L533E
         rts

PrintTokFFHposn:
         jsr     PrintTokFF
         lda     #$06
         sta     text_hposn
         rts

L5378:   lda     $7d
         sta     $af
         and     #$80
         sta     $d0
         eor     INWK+2,x
         bmi     @L539C
         lda     $7b
         clc
         adc     polyobj_xpos_lo,x
         sta     $7b
         lda     $7c
         adc     INWK+1,x
         sta     $7c
         lda     $7d
         adc     INWK+2,x
         and     #$7f
         ora     $d0
         sta     $7d
         rts

@L539C:  lda     $af
         and     #$7f
         sta     $af
         lda     polyobj_xpos_lo,x
         sec
         sbc     $7b
         sta     $7b
         lda     INWK+1,x
         sbc     $7c
         sta     $7c
         lda     INWK+2,x
         and     #$7f
         sbc     $af
         ora     #$80
         eor     $d0
         sta     $7d
         bcs     @L53D3
         lda     #$01
         sbc     $7b
         sta     $7b
         lda     #$00
         sbc     $7c
         sta     $7c
         lda     #$00
         sbc     $7d
         and     #$7f
         ora     $d0
         sta     $7d
@L53D3:  rts

L53D4:   lda     INWK+1,x
         and     #$7f
         lsr     A
         sta     $d0
         lda     polyobj_xpos_lo,x
         sec
         sbc     $d0
         sta     $ae
         lda     INWK+1,x
         sbc     #$00
         sta     $af
         lda     polyobj_xpos_lo,y
         sta     $31
         lda     INWK+1,y
         and     #$80
         sta     $d0
         lda     INWK+1,y
         and     #$7f
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         ora     $d0
         eor     $c5
         stx     $ad
         jsr     ADD
         sta     $7b
         stx     $7a
         ldx     $ad
         lda     INWK+1,y
         and     #$7f
         lsr     A
         sta     $d0
         lda     polyobj_xpos_lo,y
         sec
         sbc     $d0
         sta     $ae
         lda     INWK+1,y
         sbc     #$00
         sta     $af
         lda     polyobj_xpos_lo,x
         sta     $31
         lda     INWK+1,x
         and     #$80
         sta     $d0
         lda     INWK+1,x
         and     #$7f
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         ora     $d0
         eor     #$80
         eor     $c5
         stx     $ad
         jsr     ADD
         sta     INWK+1,y
         stx     polyobj_xpos_lo,y
         ldx     $ad
         lda     $7a
         sta     polyobj_xpos_lo,x
         lda     $7b
         sta     INWK+1,x
         rts

num_format_thing:
         .byte   $48,$76,$e8,$00

PrintNumInX:
         lda     #$03
L5466:   ldy     #$00
L5468:   sta     $ac
         lda     #$00
         sta     $7a
         sta     $7b
         sty     $7c
         stx     $7d
PrintNumber:
         ldx     #$0b
         stx     $d0
         php
         bcc     @L547F
         dec     $d0
         dec     $ac
@L547F:  lda     #$0b
         sec
         sta     $b2
         sbc     $ac
         sta     $ac
         inc     $ac
         ldy     #$00
         sty     $af
         jmp     @L54D0

@L5491:  asl     $7d
         rol     $7c
         rol     $7b
         rol     $7a
         rol     $af
         ldx     #$03
@L549D:  lda     $7a,x
         sta     $6e,x
         dex
         bpl     @L549D
         lda     $af
         sta     $72
         asl     $7d
         rol     $7c
         rol     $7b
         rol     $7a
         rol     $af
         asl     $7d
         rol     $7c
         rol     $7b
         rol     $7a
         rol     $af
         clc
         ldx     #$03
@L54BF:  lda     $7a,x
         adc     $6e,x
         sta     $7a,x
         dex
         bpl     @L54BF
         lda     $72
         adc     $af
         sta     $af
         ldy     #$00
@L54D0:  ldx     #$03
         sec
@L54D3:  lda     $7a,x
         sbc     num_format_thing,x
         sta     $6e,x
         dex
         bpl     @L54D3
         lda     $af
         sbc     #$17
         sta     $72
         bcc     @L54F6
         ldx     #$03
@L54E7:  lda     $6e,x
         sta     $7a,x
         dex
         bpl     @L54E7
         lda     $72
         sta     $af
         iny
         jmp     @L54D0

@L54F6:  tya
         bne     @L5505
         lda     $d0
         beq     @L5505
         dec     $ac
         bpl     @L550F
         lda     #$20
         bne     @L550C

@L5505:  ldy     #$00
         sty     $d0
         clc
         adc     #$30
@L550C:  jsr     PrintChar
@L550F:  dec     $d0
         bpl     @L5515
         inc     $d0
@L5515:  dec     $b2
         bmi     @L5526
         bne     @L5523
         plp
         bcc     @L5523
         lda     #$2e
         jsr     PrintChar
@L5523:  jmp     @L5491

@L5526:  rts

text_ucase_mask:
         .byte   $20
txt_lcase_flag:
         .byte   $ff
txt_flight_flag:
         .byte   $00
txt_buffer_flag:
         .byte   $00
txt_buffer_index:
         .byte   $00
text_ucase_flag:
         .byte   $00
text_lcase_mask:
         .byte   $ff
         .byte   $a9
         .byte   $0c
         .byte   $2c

PrintCharA:
         lda     #'A'
; 
; Print a character.
; 
; On entry:
;   A-reg: ASCII value
; 
; 
saved_x  .set    $0a
PrintChar:
         stx     saved_x    ;preserve X-reg
         ldx     #$ff       ;disable lower-case transform
         stx     text_lcase_mask
         cmp     #'.'
         beq     @SetFlag
         cmp     #':'
         beq     @SetFlag
         cmp     #$0a       ;LF
         beq     @SetFlag
         cmp     #$0c       ;newline
         beq     @SetFlag
         cmp     #$20       ;space
         beq     @SetFlag
         inx                ;X=0, clearing flag
@SetFlag:
         stx     txt_lcase_flag
         ldx     saved_x
         bit     txt_buffer_flag ;using buffered printing?
         bmi     @Buffered  ;yes, write to buffer
         jmp     OutputChar ;no, output directly

@Buffered:
         bit     txt_buffer_flag
         bvs     @L5565
         cmp     #$0c       ;newline?
         beq     @L5572
@L5565:  ldx     txt_buffer_index
         sta     BUFFER_0100,x ;text buffer
         ldx     saved_x
         inc     txt_buffer_index
         clc
         rts

@L5572:  txa
         pha
         tya
         pha
@L5576:  ldx     txt_buffer_index
         beq     @L55F3
         cpx     #$1f
         bcc     @L55F0
         lsr     $0b
@L5581:  lda     $0b
         bmi     @L5589
         lda     #$40
         sta     $0b
@L5589:  ldy     #$1d
@L558B:  lda     $011e
         cmp     #$20
         beq     @L55BF
@L5592:  dey
         bmi     @L5581
         beq     @L5581
         lda     BUFFER_0100,y
         cmp     #$20
         bne     @L5592
         asl     $0b
         bmi     @L5592
         sty     saved_x
         ldy     txt_buffer_index
@L55A7:  lda     BUFFER_0100,y
         sta     $0101,y
         dey
         cpy     saved_x
         bcs     @L55A7
         inc     txt_buffer_index
@L55B5:  cmp     BUFFER_0100,y
         bne     @L558B
         dey
         bpl     @L55B5
         bmi     @L5581

@L55BF:  ldx     #$1e
         jsr     @L55E3
         lda     #$0c
         jsr     OutputChar
         lda     txt_buffer_index
         sbc     #$1e
         sta     txt_buffer_index
         tax
         beq     @L55F3
         ldy     #$00
         inx
@L55D7:  lda     $011f,y
         sta     BUFFER_0100,y
         iny
         dex
         bne     @L55D7
         beq     @L5576

@L55E3:  ldy     #$00
@L55E5:  lda     BUFFER_0100,y
         jsr     OutputChar
         iny
         dex
         bne     @L55E5
         rts

@L55F0:  jsr     @L55E3
@L55F3:  stx     txt_buffer_index
         pla
         tay
         pla
         tax
         lda     #$0c
         .byte   $2c
PrintBell:
         lda     #$07
         jmp     OutputChar

DrawHud: ldy     #$00
         lda     #$d2
         sta     $7a
         ldx     #$14
         lda     $b6
         and     #$08
         and     ptb_kbd_flash
         beq     @L5615
         ldx     #$0c
@L5615:  stx     $7c
         lda     player_speed
         jsr     @L5671
         lda     #$0c
         sta     $35
         lda     $6b
         lsr     A
         bit     $6d
         jsr     @L56C4
         lda     $67
         asl     A
         bit     $a7
         jsr     @L56C4
         lda     $d6
         lsr     A
@L5633:  sta     $7b
         jsr     @L5671
         lda     $7b
         sec
         sbc     #$20
         bcs     @L5641
         lda     #$00
@L5641:  cpy     #$07
         bne     @L5633
         lda     #$10
         sta     $7a
         lda     $d4
         jsr     @L566E
         lda     $d5
         jsr     @L566E
         lda     player_fuel
         jsr     @L5670
         lda     lcoord_swap_flag-1
         jsr     @L566E
         lda     PLAYER_STATE+46
         jsr     @L566E
         lda     player_laser_temp
         jsr     @L566E
         jmp     L7445

@L566E:  lsr     A
         lsr     A
@L5670:  lsr     A
@L5671:  cmp     #$20
         bcc     @L5677
         lda     #$1f
@L5677:  ldx     @L570A,y
         cmp     @L56FD,y
         bcc     @L5682
         ldx     @L5717,y
@L5682:  cpx     #$ff
         bne     @L5689
         ldx     $7c
         clc
@L5689:  iny
         pha
         cmp     L4543,y
         bne     @L5696
         txa
         cmp     $02de,y
         beq     @L56C2
@L5696:  txa
         ldx     $02de,y
         sta     $02de,y
         lda     L4543,y
         jsr     @L56AA
         ldx     $02de,y
         pla
         sta     L4543,y
@L56AA:  stx     $35
         ldx     @L56F0-1,y
         stx     $6f
         ldx     $7a
         stx     $6e
         clc
         adc     $7a
         and     #$fe
         sta     $70
         jsr     @L56BF
@L56BF:  jmp     DrawDoubleHorizLine

@L56C2:  pla
@L56C3:  rts

@L56C4:  bpl     @L56CB
         eor     #$ff
         clc
         adc     #$01
@L56CB:  iny
         clc
         adc     #$e0
         cmp     L4543,y
         beq     @L56C3
         pha
         lda     L4543,y
         beq     @L56DD
         jsr     @L56E1
@L56DD:  pla
         sta     L4543,y
@L56E1:  sta     $6e
         lda     @L56F0-1,y
         sta     $6f
         clc
         adc     #$06
         sta     $71
         jmp     DrawVerticalLine

@L56F0:  .byte   $89
         .byte   $90
         .byte   $98
.macro   HiAscii Arg
         .repeat .strlen(Arg), I
         .byte   .strat(Arg, I) | $80
         .endrep
.endmacro
         HiAscii "91)!"
         .byte   $89
         .byte   $91
         .byte   $99
         .byte   $b1
         .byte   $a1
         .byte   $a9
@L56FD:  .byte   $1c
         .byte   $00
         .byte   $00
         .byte   $10
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   $08
         .byte   $08
         .byte   $00
         .byte   $08
         .byte   $18
         .byte   $18
@L570A:  .byte   $0c
         .byte   $0c
         .byte   $0c
         .byte   $ff
         .byte   $04
         .byte   $04
         .byte   $04
         .byte   $ff
         .byte   $ff
         .byte   $08
         .byte   $ff
         .byte   $10
         .byte   $10
@L5717:  .byte   $ff
         .byte   $0c
         .byte   $0c
         .res    6,$04
         .byte   $08
         .byte   $08
         .byte   $ff
         .byte   $ff

; BBC .ESCAPE "your Escape capsule launch"
EjectEscape:
         jsr     RES2
         ldx     #11        ;Cobra Mk III
         stx     $b8
         jsr     FRS1
         bcs     @Es1
         ldx     #$18
         jsr     FRS1
@Es1:    lda     #$08       ;"modest speed"
         sta     polyobj_vertex_lo
         lda     #$c2       ;"rotz, pitch counter"
         sta     polyobj_pitch
         lsr     A
         sta     polyobj_attack
@L5740:  jsr     MVEIT
         jsr     DrawObject
         dec     polyobj_attack
         bne     @L5740
         jsr     SCAN
         lda     #$00       ;"zero-out cargo, including gems"
         ldx     #$10       ;"start at alien items"
@L5751:  sta     player_cargo,x
         dex
         bpl     @L5751
         sta     player_fug_inno ;zero out fugitive status
         sta     have_escape_pod ;no more escape pod
         lda     #70        ;max fuel allowed = 70
         sta     player_fuel
         jmp     GOIN_jmp

L5765:   lda     #$0e
         jsr     PrintDockedStr
         jsr     L6960
         jsr     L6A93
         lda     #$00
         sta     $c1
@L5774:  jsr     SetBufferFlag
         jsr     PrintSelPlanet
         ldx     txt_buffer_index
         lda     INWK+5,x
         cmp     #$0d
         bne     @L5790
@L5783:  dex
         lda     INWK+5,x
         ora     #$20
         cmp     BUFFER_0100,x
         beq     @L5783
         txa
         bmi     @L57A5
@L5790:  jsr     L6418
         inc     $c1
         bne     @L5774
         jsr     L6A9E
         jsr     L6960
         jsr     Noise1
         lda     #$d7
         jmp     PrintDockedStr

@L57A5:  lda     $95
         sta     $e0
         lda     $93
         sta     $e1
         jsr     L6A9E
         jsr     L6960
         jsr     ClearBufferFlag
         jmp     ShowDistToPlanet

L57B9:   lda     polyobj_xpos_lo
         ora     polyobj_ypos_lo
         ora     polyobj_zpos_lo
         bne     @L57C6
         lda     #$50
         jsr     L74B4
@L57C6:  ldx     #$04
         bne     L582B

; BBC .TA34 "Tactics, missile attacking player, from TA18"
L57CA:   lda     #$00
         jsr     L7E20
         beq     @L57D4
         jmp     L5900

@L57D4:  jsr     L582E
         jsr     MakeNoise2
         lda     #$fa
         jmp     L74B4

L57DF:   lda     ecm_active_flag
         bne     L57B9
         lda     polyobj_attack
         asl     A
         bmi     L57CA
         lsr     A
         tax
         lda     L4E7E,x
         sta     $5e
         lda     L4E7F,x
         jsr     L5B15
         lda     $3a
         ora     $3d
         ora     $40
         and     #$7f
         ora     $39
         ora     $3c
         ora     $3f
         bne     L5834
         lda     polyobj_attack
         cmp     #$82
         beq     L57B9
         ldy     #$1f
         lda     ($5e),y
         bit     L583B+1
         bne     @L5818
         ora     #$80
         sta     ($5e),y
@L5818:  lda     polyobj_xpos_lo
         ora     polyobj_ypos_lo
         ora     polyobj_zpos_lo
         bne     @L5825
         lda     #$50
         jsr     L74B4
@L5825:  lda     polyobj_attack
         and     #$7f
         lsr     A
         tax
L582B:   jsr     CountKill
L582E:   asl     polyobj_vis
         sec
         ror     polyobj_vis
L5833:   rts

L5834:   jsr     GetRandom
         cmp     #$10
         bcs     L5842
L583B:   ldy     #$20
         lda     ($5e),y
         lsr     A
         bcs     L5845
L5842:   jmp     L5909

L5845:   jmp     ActivateEcm

; BBC .TACTICS
TACTICS: lda     #$03
         sta     $c4
         lda     #$04
         sta     $c5
         lda     #$16
         sta     $be
         cpx     #$01
         beq     L57DF
         cpx     #$02
         bne     L588A
         lda     $30
         and     #$04
         bne     @L5875
         lda     PLAYER_STATE+19
         bne     L5833
         jsr     GetRandom
         cmp     #$fd
         bcc     L5833
         and     #$01
         adc     #$08
         tax
         bne     L5885
@L5875:  jsr     GetRandom
         cmp     #$f0
         bcc     L5833
         lda     PLAYER_STATE+25
         cmp     #$04
         bcs     L58C3
         ldx     #$10
L5885:   lda     #$f1
         jmp     LaunchObject1

L588A:   cpx     #$0f
         bne     @L58AA
         jsr     GetRandom
         cmp     #$c8
         bcc     L58C3
         ldx     #$00
         stx     polyobj_attack
         ldx     #$24
         stx     $30
         and     #$03
         adc     #$11
         tax
         jsr     L5885
         lda     #$00
         sta     polyobj_attack
         rts

@L58AA:  ldy     #$0e
         lda     $2f
         cmp     (hull_ptr),y
         bcs     @L58B4
         inc     $2f
@L58B4:  cpx     #$1e
         bne     L58C4
         lda     PLAYER_STATE+38
         bne     L58C4
         lsr     polyobj_attack
         asl     polyobj_attack
         lsr     polyobj_vertex_lo
L58C3:   rts

L58C4:   jsr     GetRandom
         lda     $30
         lsr     A
         bcc     @L58D0
         cpx     #$32
         bcs     L58C3
@L58D0:  lsr     A
         bcc     @L58E2
         ldx     player_fug_inno
         cpx     #$28
         bcc     @L58E2
         lda     $30
         ora     #$04
         sta     $30
         lsr     A
         lsr     A
@L58E2:  lsr     A
         bcs     L58F2
         lsr     A
         lsr     A
         bcc     L58EC
         jmp     L5A50

L58EC:   jsr     L8274
         jmp     L5A40

L58F2:   lsr     A
         bcc     L5900
         lda     PLAYER_STATE+11
         beq     L5900
         lda     polyobj_attack
         and     #$81
         sta     polyobj_attack
L5900:   ldx     #$08
@L5902:  lda     polyobj_xpos_lo,x
         sta     $38,x
         dex
         bpl     @L5902
L5909:   jsr     L8283
         ldy     #$0a
         jsr     TAS3
         sta     $bd
         lda     $b8
         cmp     #$01
         bne     @L591C
         jmp     @L59DF

@L591C:  cmp     #$0e
         bne     @L5935
         jsr     GetRandom
         cmp     #$c8
         bcc     @L5935
         jsr     GetRandom
         ldx     #$17
         cmp     #$64
         bcs     @L5932
         ldx     #$11
@L5932:  jmp     L5885

@L5935:  jsr     GetRandom
         cmp     #$fa
         bcc     @L5943
         jsr     GetRandom
         ora     #$68
         sta     polyobj_roll
@L5943:  ldy     #$0e
         lda     (hull_ptr),y
         lsr     A
         cmp     $2f
         bcc     @L5998
         lsr     A
         lsr     A
         cmp     $2f
         bcc     @L5971
         jsr     GetRandom
         cmp     #$e6
         bcc     @L5971
         ldx     $b8
         lda     hull_NEWB-1,x ;has escape pod?
         bpl     @L5971     ;no
         lda     $30
         and     #$f0
         sta     $30
         ldy     #$24
         sta     (polyobj_ptr),y
         lda     #$00
         sta     polyobj_attack
         jmp     LaunchEscape

@L5971:  lda     polyobj_vis
         and     #$07
         beq     @L5998
         sta     $d0
         jsr     GetRandom
         and     #$1f
         cmp     $d0
         bcs     @L5998
         lda     ecm_active_flag
         bne     @L5998
         dec     polyobj_vis
         lda     $b8        ;check ship type
         cmp     #29        ;Thargoid?
         bne     @NotThargoid
         ldx     #30        ;launch Thargon
         lda     polyobj_attack
         jmp     LaunchObject1

@NotThargoid:
         jmp     LaunchMissile

; "Good energy > max/2"
@L5998:  lda     #$00
         jsr     L7E20
         and     #$e0
         bne     @NoLaser
         ldx     $bd
         cpx     #$a0
         bcc     @NoLaser
         ldy     #$13       ;00LLLMMM laser/missile data for hull
         lda     (hull_ptr),y
         and     #$f8       ;keep laser power
         beq     @NoLaser
         lda     polyobj_vis
         ora     #$40       ;set bit 6 (laser firing at player)
         sta     polyobj_vis
         cpx     #$a3
         bcc     @NoLaser
         lda     (hull_ptr),y
         lsr     A
         jsr     L74B4
         dec     $28
         lda     ecm_active_flag
         bne     L5A2D
         jsr     MakeNoise5
@NoLaser:
         lda     polyobj_zpos_mi
         cmp     #$03
         bcs     @L59D6
         lda     INWK+1
         ora     INWK+4
         and     #$fe
         beq     L59E8
@L59D6:  jsr     GetRandom
         ora     #$80
         cmp     polyobj_attack
         bcs     L59E8
@L59DF:  jsr     L5B69
         lda     $bd
         eor     #$80
L59E6:   sta     $bd
L59E8:   ldy     #$10
         jsr     TAS3
         tax
         eor     #$80
         and     #$80
         sta     polyobj_pitch
         txa
         asl     A
         cmp     $c5
         bcc     @L5A00
         lda     $c4
         ora     polyobj_pitch
         sta     polyobj_pitch
@L5A00:  lda     polyobj_roll
         asl     A
         cmp     #$20
         bcs     @L5A21
         ldy     #$16
         jsr     TAS3
         tax
         eor     polyobj_pitch
         and     #$80
         eor     #$80
         sta     polyobj_roll
         txa
         asl     A
         cmp     $c5
         bcc     @L5A21
         lda     $c4
         ora     polyobj_roll
         sta     polyobj_roll
@L5A21:  lda     $bd
         bmi     L5A2E
         cmp     $be
         bcc     L5A2E
         lda     #$03
         sta     $28
L5A2D:   rts

L5A2E:   and     #$7f
         cmp     #$12
         bcc     @L5A3F
         lda     #$ff
         ldx     $b8
         cpx     #$01
         bne     @L5A3D
         asl     A
@L5A3D:  sta     $28
@L5A3F:  rts

L5A40:   ldy     #$0a
         jsr     TAS3
         cmp     #$98
         bcc     @L5A4D
         ldx     #$00
         stx     $c5
@L5A4D:  jmp     L59E6

L5A50:   lda     #$06
         sta     $c5
         lsr     A
         sta     $c4
         lda     #$1d
         sta     $be
         lda     PLAYER_STATE+11
         bne     @L5A63
@L5A60:  jmp     L58EC

@L5A63:  jsr     @L5B0F
         lda     $3a
         ora     $3d
         ora     $40
         and     #$7f
         bne     @L5A60
         jsr     L82A6
         lda     $ad
         sta     $7a
         jsr     L8283
         ldy     #$0a
         jsr     L5B47
         bmi     @L5AA6
         cmp     #$23
         bcc     @L5AA6
         ldy     #$0a
         jsr     TAS3
         cmp     #$a2
         bcs     @L5AC0
         lda     $7a
         cmp     #$9d
         bcc     @L5A98
         lda     $b8
         bmi     @L5AC0
@L5A98:  jsr     L5B69
         jsr     L5A40
@L5A9E:  ldx     #$00
         stx     $28
         inx
         stx     polyobj_vertex_lo
         rts

@L5AA6:  jsr     @L5B0F
         jsr     L5B7C
         jsr     L5B7C
         jsr     L8283
         jsr     L5B69
         jmp     L5A40

@L5AB8:  inc     $28
         lda     #$7f
         sta     polyobj_roll
         bne     @L5B05

@L5AC0:  ldx     #$00
         stx     $c5
         stx     polyobj_pitch
         lda     $b8
         bpl     @L5AEA
         eor     $6e
         eor     $6f
         asl     A
         lda     #$02
         ror     A
         sta     polyobj_roll
         lda     $6e
         asl     A
         cmp     #$0c
         bcs     @L5A9E
         lda     $6f
         asl     A
         lda     #$02
         ror     A
         sta     polyobj_pitch
         lda     $6f
         asl     A
         cmp     #$0c
         bcs     @L5A9E
@L5AEA:  stx     polyobj_roll
         lda     $22
         sta     $6e
         lda     $24
         sta     $6f
         lda     $26
         sta     $70
         ldy     #$10
         jsr     L5B47
         asl     A
         cmp     #$42
         bcs     @L5AB8
         jsr     @L5A9E
@L5B05:  lda     $42
         bne     @L5B0E
         asl     $30
         sec
         ror     $30
@L5B0E:  rts

@L5B0F:  lda     #$25
         sta     $5e
         lda     #$08
L5B15:   sta     $5f
         ldy     #$02
         jsr     @L5B23
         ldy     #$05
         jsr     @L5B23
         ldy     #$08
@L5B23:  lda     ($5e),y
         eor     #$80
         sta     $7d
         dey
         lda     ($5e),y
         sta     $7c
         dey
         lda     ($5e),y
         sta     $7b
         sty     $ac
         ldx     $ac
         jsr     L5378
         ldy     $ac
         sta     $3a,x
         lda     $7c
         sta     $39,x
         lda     $7b
         sta     $38,x
         rts

L5B47:   ldx     data_buffer+37,y
         stx     $ad
         lda     $6e
         jsr     MULT12
         ldx     data_buffer+39,y
         stx     $ad
         lda     $6f
         jsr     MAD
         sta     $af
         stx     $ae
         ldx     data_buffer+41,y
         stx     $ad
         lda     $70
         jmp     MAD

L5B69:   lda     $6e
         eor     #$80
         sta     $6e
         lda     $6f
         eor     #$80
         sta     $6f
         lda     $70
         eor     #$80
         sta     $70
         rts

L5B7C:   jsr     @L5B7F
@L5B7F:  lda     data_buffer+47
         ldx     #$00
         jsr     @L5B94
         lda     data_buffer+49
         ldx     #$03
         jsr     @L5B94
         lda     data_buffer+51
         ldx     #$06
@L5B94:  asl     A
         sta     $ae
         lda     #$00
         ror     A
         eor     #$80
         eor     $3a,x
         bmi     @L5BAB
         lda     $ae
         adc     $38,x
         sta     $38,x
         bcc     @L5BAA
         inc     $39,x
@L5BAA:  rts

@L5BAB:  lda     $38,x
         sec
         sbc     $ae
         sta     $38,x
         lda     $39,x
         sbc     #$00
         sta     $39,x
         bcs     @L5BAA
         lda     $38,x
         eor     #$ff
         adc     #$01
         sta     $38,x
         lda     $39,x
         eor     #$ff
         adc     #$00
         sta     $39,x
         lda     $3a,x
         eor     #$80
         sta     $3a,x
         jmp     @L5BAA

L5BD3:   clc
         lda     polyobj_zpos_hi
         bne     L5C11
         lda     $b8
         bmi     L5C11
         lda     polyobj_vis
         and     #$20
         ora     INWK+1
         ora     INWK+4
         bne     L5C11
         lda     polyobj_xpos_lo
         jsr     L5F32
         sta     $af
         lda     $31
         sta     $ae
         lda     polyobj_ypos_lo
         jsr     L5F32
         tax
         lda     $31
         adc     $ae
         sta     $ae
         txa
         adc     $af
         bcs     L5C12
         sta     $af
         ldy     #$02
         lda     (hull_ptr),y
         cmp     $af
         bne     L5C11
         dey
         lda     (hull_ptr),y
         cmp     $ae
L5C11:   rts

L5C12:   clc
         rts

; BBC .FRS1 "escape capsule Launched, see Cobra Mk3 ahead, or player missile
; launch."
FRS1:    jsr     ZeroInfo
         lda     #$1c
         sta     polyobj_ypos_lo
         lsr     A
         sta     polyobj_zpos_lo
         lda     #$80
         sta     INWK+5
         lda     missile_thing
         asl     A
         ora     #$80
         sta     polyobj_attack
L5C29:   lda     #$60
         sta     polyobj_mox2_hi
         ora     #$80
         sta     $22
         lda     player_speed
         rol     A
         sta     polyobj_vertex_lo
         txa
         jmp     L7545

L5C3A:   ldx     #$01
         jsr     FRS1
         bcc     PrintMslJammed
         ldx     missile_thing
         jsr     GetInfo
         lda     PLAYER_STATE,x
         jsr     L5C59
         ldy     #$00
         jsr     L75E6
         dec     missile_armed_flag
         ldy     #$78
         jsr     MakeNoise1
L5C59:   cmp     #$02
         beq     @L5C8C
         ldy     #$24
         lda     (polyobj_ptr),y
         and     #$20
         beq     @L5C68
         jsr     @L5C8C
@L5C68:  ldy     #$20
         lda     (polyobj_ptr),y
         beq     L5C11
         ora     #$80
         sta     (polyobj_ptr),y
         ldy     #$1c
         lda     #$02
         sta     (polyobj_ptr),y
         asl     A
         ldy     #$1e
         sta     (polyobj_ptr),y
         lda     $b8
         cmp     #$0b
         bcc     @L5C8B
         ldy     #$24
         lda     (polyobj_ptr),y
         ora     #$04
         sta     (polyobj_ptr),y
@L5C8B:  rts

@L5C8C:  lda     data_buffer+73
         ora     #$04
         sta     data_buffer+73
         rts

PrintMslJammed:
         lda     #$c9       ;"Missile Jammed"
         jmp     PrintMessageBriefly

LaunchEscape:
         ldx     #3         ;Escape Capsule
LaunchObject:
         lda     #$fe
LaunchObject1:
         sta     $06
         txa                ;X-reg = ship type (e.g. #30 = Thargon)
         pha
         lda     hull_ptr
         pha
         lda     hull_ptr+1
         pha
         lda     polyobj_ptr
         pha
         lda     polyobj_ptr+1
         pha
         ldy     #$24
@L5CB0:  lda     polyobj_xpos_lo,y
         sta     BUFFER_0100,y
         lda     (polyobj_ptr),y
         sta     polyobj_xpos_lo,y
         dey
         bpl     @L5CB0
         lda     $b8
         cmp     #$02
         bne     @L5CE1
         txa
         pha
         lda     #$20
         sta     polyobj_vertex_lo
         ldx     #$00
         lda     $16
         jsr     @L5D20
         ldx     #$03
         lda     $18
         jsr     @L5D20
         ldx     #$06
         lda     polyobj_mox2_hi
         jsr     @L5D20
         pla
         tax
@L5CE1:  lda     $06
         sta     polyobj_attack
         lsr     polyobj_roll
         asl     polyobj_roll
         txa
         cmp     #$09
         bcs     @L5D04
         cmp     #$04
         bcc     @L5D04
         pha
         jsr     GetRandom
         asl     A
         sta     polyobj_pitch
         txa
         and     #$0f
         sta     polyobj_vertex_lo
         lda     #$ff
         ror     A
         sta     polyobj_roll
         pla
@L5D04:  jsr     L7545
         pla
         sta     polyobj_ptr+1
         pla
         sta     polyobj_ptr
         ldx     #$24
@L5D0F:  lda     BUFFER_0100,x
         sta     polyobj_xpos_lo,x
         dex
         bpl     @L5D0F
         pla
         sta     hull_ptr+1
         pla
         sta     hull_ptr
         pla
         tax
         rts

@L5D20:  asl     A
         sta     $ae
         lda     #$00
         ror     A
         jmp     L920A

L5D29:   lda     #$ff
@Loop:   sta     $07
         tax
         ldy     #$5a
         jsr     MakeNoise4
         lda     $07
         sbc     #$0a
         cmp     #$aa
         bcs     @Loop
         lda     #$04
         jsr     DrawRing
         rts

; 
; Draws the octagon ring animation for dock / undock.
; 
DrawOctagonRings:
         ldy     #$00
         jsr     MakeNoise1
         jsr     MakeNoise1
         lda     #$08       ;octagon rings
DrawRing:
         sta     $bf
         lda     displayed_screen
         pha
         lda     #$00
         jsr     PrintFlightHud
         pla
         sta     displayed_screen
L5D58:   ldx     #$80
         stx     $38
         ldx     #$44
         stx     $46
         ldx     #$00
         stx     $c0
         stx     $39
         stx     $47
@RingLoop:
         jsr     @DrawOneRing
         inc     $c0
         ldx     $c0
         cpx     #$08
         bne     @RingLoop
         rts

@DrawOneRing:
         lda     $c0
         and     #$07
         clc
         adc     #$08
         sta     $7a
@L5D7D:  ldy     #$0a
         jsr     MakeNoise1
         lda     #$01
         sta     $91
         jsr     L77BA
         asl     $7a
         bcs     @Return
         lda     $7a
         cmp     #$a0
         bcc     @L5D7D
@Return: rts

L5D94:   lda     #$00
         cpx     #$02
         ror     A
         sta     $c4
         eor     #$80
         sta     $c5
         jsr     @L5E4D
         ldy     $e2
@L5DA4:  lda     SCRNHOLE5+4,y
         sta     $b4
         lsr     A
         lsr     A
         lsr     A
         jsr     L60CA
         lda     $31
         sta     $cf
         eor     $c5
         sta     $af
         lda     $06d5,y
         sta     $31
         lda     $06c8,y
         sta     $6e
         jsr     ADD
         sta     $af
         stx     $ae
         lda     $06e2,y
         sta     $6f
         eor     $a7
         ldx     $67
         jsr     MULTS
         jsr     ADD
         stx     $60
         sta     $61
         ldx     $06ef,y
         stx     $ae
         ldx     $6f
         stx     $af
         ldx     $67
         eor     $a8
         jsr     MULTS
         jsr     ADD
         stx     $62
         sta     $63
         ldx     $6b
         eor     $6c
         jsr     MULTS
         sta     $ad
         lda     $60
         sta     $ae
         lda     $61
         sta     $af
         eor     #$80
         jsr     MAD
         sta     $61
         txa
         sta     $06d5,y
         lda     $62
         sta     $ae
         lda     $63
         sta     $af
         jsr     MAD
         sta     $af
         stx     $ae
         lda     #$00
         sta     $31
         lda     $b9
         jsr     L4ED3
         lda     $61
         sta     $06c8,y
         sta     $6e
         and     #$7f
         eor     #$7f
         cmp     $cf
         bcc     @L5E68
         beq     @L5E68
         lda     $63
         sta     $06e2,y
         sta     $6f
         and     #$7f
         cmp     #$74
         bcs     @L5E7B
@L5E44:  jsr     L4EDC
         dey
         beq     @L5E4D
         jmp     @L5DA4

@L5E4D:  lda     $b9
         eor     $c4
         sta     $b9
         lda     $6c
         eor     $c4
         sta     $6c
         eor     #$80
         sta     $6d
         lda     $a7
         eor     $c4
         sta     $a7
         eor     #$80
         sta     $a8
         rts

@L5E68:  jsr     GetRandom
         sta     $6f
         sta     $06e2,y
         lda     #$73
         ora     $c4
         sta     $6e
         sta     $06c8,y
         bne     @L5E8C
@L5E7B:  jsr     GetRandom
         sta     $6e
         sta     $06c8,y
         lda     #$6e
         ora     $6d
         sta     $6f
         sta     $06e2,y
@L5E8C:  jsr     GetRandom
         ora     #$08
         sta     $b4
         sta     SCRNHOLE5+4,y
         bne     @L5E44

L5E98:   sta     $7a
         sta     $7b
         sta     $7c
         sta     $7d
         clc
         rts

L5EA2:   sta     $ae
         and     #$7f
         sta     $7c
         lda     $ad
         and     #$7f
         beq     L5E98
         sec
         sbc     #$01
         sta     $d0
         lda     $32
         lsr     $7c
         ror     A
         sta     $7b
         lda     $31
         ror     A
         sta     $7a
         lda     #$00
         ldx     #$18
@L5EC3:  bcc     @L5EC7
         adc     $d0
@L5EC7:  ror     A
         ror     $7c
         ror     $7b
         ror     $7a
         dex
         bne     @L5EC3
         sta     $d0
         lda     $ae
         eor     $ad
         and     #$80
         ora     $d0
         sta     $7d
         rts

; ".MLS2 &27BE assign from stars R.S = XX(0to1), and P.A = A.alp1 (alp1+<32)"
MLS2:    ldx     $60
         stx     $ae
         ldx     $61
         stx     $af
MLS1:    ldx     $6b
; ".MULTS &27CA P.A =A*P(P+<32)"
MULTS:   stx     $31
         tax
         and     #$80
         sta     $d0
         txa
         and     #$7f
         beq     @L5F2B
         tax
         dex
         stx     $06
         lda     #$00
         lsr     $31
         bcc     @L5F00
         adc     $06
@L5F00:  ror     A
         ror     $31
         bcc     @L5F07
         adc     $06
@L5F07:  ror     A
         ror     $31
         bcc     @L5F0E
         adc     $06
@L5F0E:  ror     A
         ror     $31
         bcc     @L5F15
         adc     $06
@L5F15:  ror     A
         ror     $31
         bcc     @L5F1C
         adc     $06
@L5F1C:  ror     A
         ror     $31
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         lsr     A
         ror     $31
         ora     $d0
         rts

@L5F2B:  sta     $32
         sta     $31
         rts

L5F30:   and     #$7f
L5F32:   sta     $31
         tax
         bne     L5F49
L5F37:   clc
         stx     $31
         txa
         rts

L5F3C:   lda     $06e2,y
         sta     $6f
L5F41:   and     #$7f
         sta     $31
L5F45:   ldx     $ad
         beq     L5F37
L5F49:   dex
         stx     $d0
         lda     #$00
         tax
         lsr     $31
         bcc     @L5F55
         adc     $d0
@L5F55:  ror     A
         ror     $31
         bcc     @L5F5C
         adc     $d0
@L5F5C:  ror     A
         ror     $31
         bcc     @L5F63
         adc     $d0
@L5F63:  ror     A
         ror     $31
         bcc     @L5F6A
         adc     $d0
@L5F6A:  ror     A
         ror     $31
         bcc     @L5F71
         adc     $d0
@L5F71:  ror     A
         ror     $31
         bcc     @L5F78
         adc     $d0
@L5F78:  ror     A
         ror     $31
         bcc     @L5F7F
         adc     $d0
@L5F7F:  ror     A
         ror     $31
         bcc     @L5F86
         adc     $d0
@L5F86:  ror     A
         ror     $31
         rts

; ".FMLTU2 &283D for CIRCLE2, A=K*sin(X)/256unsg"
FMLTU2:  and     #$1f
         tax
         lda     sine_table,x
         sta     $ad
         lda     $7a
; ".FMLTU &2847 A=A*Q/256unsg fast multiply"
FMLTU:   stx     $31
         sta     $ca
         tax
         beq     @L5FB9
         lda     math_table2,x
         ldx     $ad
         beq     @L5FB7
         clc
         adc     math_table2,x
         lda     math_table1,x
         ldx     $ca
         adc     math_table1,x
         bcc     @L5FB7
         tax
         lda     math_table3,x
         ldx     $31
         rts

@L5FB7:  lda     #$00
@L5FB9:  ldx     $31
         rts

; ".MLTU  AP(2)= AP* Xunsg(EOR P)"
MLTU2:   stx     $ad
MLTU2_2: eor     #$ff
         lsr     A
         sta     $32
         lda     #$00
         ldx     #$10
         ror     $31
@L5FC9:  bcs     @MU21
         adc     $ad
         ror     A
         ror     $32
         ror     $31
         dex
         bne     @L5FC9
         rts

@MU21:   lsr     A
         ror     $32
         ror     $31
         dex
         bne     @L5FC9
         rts

unref_MUT3:
         ldx     $6b
         stx     $31
MUT2:    ldx     $61
         stx     $af
MUT1:    ldx     $60
         stx     $ae
MULT1:   tax
         and     #$7f
         lsr     A
         sta     $31
         txa
         eor     $ad
         and     #$80
         sta     $d0
         lda     $ad
         and     #$7f
         beq     @L603C
         tax
         dex
         stx     $06
         lda     #$00
         tax
         bcc     @L6009
         adc     $06
@L6009:  ror     A
         ror     $31
         bcc     @L6010
         adc     $06
@L6010:  ror     A
         ror     $31
         bcc     @L6017
         adc     $06
@L6017:  ror     A
         ror     $31
         bcc     @L601E
         adc     $06
@L601E:  ror     A
         ror     $31
         bcc     @L6025
         adc     $06
@L6025:  ror     A
         ror     $31
         bcc     @L602C
         adc     $06
@L602C:  ror     A
         ror     $31
         bcc     @L6033
         adc     $06
@L6033:  ror     A
         ror     $31
         lsr     A
         ror     $31
         ora     $d0
         rts

@L603C:  sta     $31
         rts

; ".MULT12 &28D4  R.S = Q * A   visited quite often"
MULT12:  jsr     MULT1
         sta     $af
         lda     $31
         sta     $ae
         rts

TAS3:    ldx     polyobj_xpos_lo,y
         stx     $ad
         lda     $6e
         jsr     MULT12
         ldx     INWK+2,y
         stx     $ad
         lda     $6f
         jsr     MAD
         sta     $af
         stx     $ae
         ldx     INWK+4,y
         stx     $ad
         lda     $70
; ".MAD &28FC  Multiply and Add  X.A = Q*A + R.S"
MAD:     jsr     MULT1
; ".ADD &28FF  X.A = P.A + R.S"
ADD:     sta     $06
         and     #$80
         sta     $d0
         eor     $af
         bmi     MU8
         lda     $ae
         clc
         adc     $31
         tax
         lda     $af
         adc     $06
         ora     $d0
         rts

MU8:     lda     $af
         and     #$7f
         sta     $ac
         lda     $31
         sec
         sbc     $ae
         tax
         lda     $06
         and     #$7f
         sbc     $ac
         bcs     @MU9
         sta     $ac
         txa
         eor     #$ff
         adc     #$01
         tax
         lda     #$00
         sbc     $ac
         ora     #$80
@MU9:    eor     $d0
         rts

TIS1:    stx     $ad
         eor     #$80
         jsr     MAD
         tax
         and     #$80
         sta     $d0
         txa
         and     #$7f
         ldx     #$fe
         stx     $06
DVL3:    asl     A
         cmp     #$60
         bcc     DV4
         sbc     #$60
DV4:     rol     $06
         bcs     DVL3
         lda     $06
         ora     $d0
         rts

; ".DV42 &295E  travel step of dust particle front/rear"
DV42:    lda     SCRNHOLE5+4,y
L60CA:   sta     $ad
         lda     player_speed
L60CE:   asl     A
         sta     $31
         lda     #$00
         rol     A
         cmp     $ad
         bcc     @L60DA
         sbc     $ad
@L60DA:  rol     $31
         rol     A
         cmp     $ad
         bcc     @L60E3
         sbc     $ad
@L60E3:  rol     $31
         rol     A
         cmp     $ad
         bcc     @L60EC
         sbc     $ad
@L60EC:  rol     $31
         rol     A
         cmp     $ad
         bcc     @L60F5
         sbc     $ad
@L60F5:  rol     $31
         rol     A
         cmp     $ad
         bcc     @L60FE
         sbc     $ad
@L60FE:  rol     $31
         rol     A
         cmp     $ad
         bcc     @L6107
         sbc     $ad
@L6107:  rol     $31
         rol     A
         cmp     $ad
         bcc     @L6110
         sbc     $ad
@L6110:  rol     $31
         rol     A
         cmp     $ad
         bcc     @L6119
         sbc     $ad
@L6119:  rol     $31
         ldx     #$00
         sta     $ca
         tax
         beq     @L613B
         lda     math_table2,x
         ldx     $ad
         sec
         sbc     math_table2,x
         ldx     $ca
         lda     math_table1,x
         ldx     $ad
         sbc     math_table1,x
         bcs     @L613E
         tax
         lda     math_table3,x
@L613B:  sta     $ae
         rts

@L613E:  lda     #$ff
         sta     $ae
         rts

L6143:   sta     $33
         lda     polyobj_zpos_lo
         ora     #$01
         sta     $ad
         lda     polyobj_zpos_mi
         sta     $ae
         lda     polyobj_zpos_hi
         sta     $af
         lda     $31
         ora     #$01
         sta     $31
         lda     $33
         eor     $af
         and     #$80
         sta     $d0
         ldy     #$00
         lda     $33
         and     #$7f
@L6167:  cmp     #$40
         bcs     @L6173
         asl     $31
         rol     $32
         rol     A
         iny
         bne     @L6167
@L6173:  sta     $33
         lda     $af
         and     #$7f
@L6179:  dey
         asl     $ad
         rol     $ae
         rol     A
         bpl     @L6179
         sta     $ad
         lda     #$fe
         sta     $ae
         lda     $33
@L6189:  asl     A
         bcs     @L6199
         cmp     $ad
         bcc     @L6192
         sbc     $ad
@L6192:  rol     $ae
         bcs     @L6189
         jmp     @L61A2

@L6199:  sbc     $ad
         sec
         rol     $ae
         bcs     @L6189
         lda     $ae
@L61A2:  lda     #$00
         sta     $7b
         sta     $7c
         sta     $7d
         tya
         bpl     @L61CB
         lda     $ae
@L61AF:  asl     A
         rol     $7b
         rol     $7c
         rol     $7d
         iny
         bne     @L61AF
         sta     $7a
         lda     $7d
         ora     $d0
         sta     $7d
         rts

@L61C2:  lda     $ae
         sta     $7a
         lda     $d0
         sta     $7d
         rts

@L61CB:  beq     @L61C2
         lda     $ae
@L61CF:  lsr     A
         dey
         bne     @L61CF
         sta     $7a
         lda     $d0
         sta     $7d
         rts

; ".cntr &29FF  center ship indicators"
L61DA:   lda     computer_dock_flag
         bne     @L61E4
         lda     ptb_kbd_dampening
         bne     L61F0
@L61E4:  txa
         bpl     @L61EA
         dex
         bmi     L61F0
@L61EA:  inx
         bne     L61F0
         dex
         beq     @L61EA
L61F0:   rts

L61F1:   sta     $d0
         txa
         clc
         adc     $d0
         tax
         bcc     @L61FC
         ldx     #$ff
@L61FC:  bpl     L620E
L61FE:   lda     $d0
         rts

REDU2:   sta     $d0
         txa
         sec
         sbc     $d0
         tax
         bcs     @L620C
         ldx     #$01
@L620C:  bpl     L61FE
L620E:   lda     ptb_kbd_recent
         bne     L61FE
         ldx     #$80
         bmi     L61FE

L6217:   jsr     GetRandom
         and     #$07
         adc     #$40
         sta     $027a
         jsr     GetRandom
         and     #$07
         adc     #$7c
         sta     $0279
         lda     player_laser_temp
         adc     #$08
         sta     player_laser_temp
         jsr     L743C
L6236:   lda     displayed_screen
         bne     L61F0
         lda     #$20
         ldy     #$e0
         jsr     @L6245
         lda     #$30
         ldy     #$d0
@L6245:  sta     $70
         lda     $0279
         sta     $6e
         lda     $027a
         sta     $6f
         lda     #$87
         sta     $71
         jsr     DrawLine
         lda     $0279
         sta     $6e
         lda     $027a
         sta     $6f
         sty     $70
         lda     #$87
         sta     $71
         jmp     DrawLine

L626B:   lda     $de
         ora     $df
         bne     @L62A9
         lda     docked_flag
         bpl     @L62A9
         ldy     #$00
@L6277:  lda     text_stuff1-1,y
         cmp     $b4
         bne     @L62A6
         lda     text_stuff2,y
         and     #$7f
         cmp     ship_state2
         bne     @L62A6
         lda     text_stuff2,y
         bmi     @L6299
         lda     $028f
         lsr     A
         bcc     @L62A9
         jsr     SetBufferFlag
         lda     #$01
         .byte   $2c
@L6299:  lda     #$b0       ;0d 0e 13: set ucase flags; turn buffering on; ?
         jsr     PrintDockedToken
         tya
         jsr     PrintExtDockedStr
         lda     #$b1       ;. [ff], turn buffering off
         bne     @PrintStr

@L62A6:  dey
         bne     @L6277
@L62A9:  ldx     #$03
@L62AB:  lda     $94,x
         sta     rng_state,x
         dex
         bpl     @L62AB
         lda     #$05
@PrintStr:
         jmp     PrintDockedStr ;buffered: <thing> IS <thing>.

L62B7:   lda     $028f
         ora     #$04
         sta     $028f
         lda     #$0b
L62C1:   jsr     PrintDockedStr
         jmp     L7F2D

L62C7:   lda     $028f
         and     #$f0
         ora     #$0a
         sta     $028f
         lda     #$de
         bne     L62C1

L62D5:   lda     $028f
         ora     #$04
         sta     $028f
         lda     #$02
         sta     have_energy_unit
         inc     kill_score+1
         lda     #$df
         bne     L62C1

L62E9:   lsr     $028f
         asl     $028f
         ldx     #$50
         ldy     #$c3
         jsr     AddCredits
         lda     #$0f
L62F8:   bne     L62C1

L62FA:   lsr     $028f
         sec
         rol     $028f
         jsr     PrintIncomingMessage
         jsr     ZeroInfo
         lda     #$1f
         sta     $b8
         jsr     L7545
         lda     #$01
         sta     text_hposn
         sta     polyobj_zpos_mi
         lda     #$0d
         jsr     PrintFlightHud
         lda     #$40
         sta     $b6
@L631D:  ldx     #$7f
         stx     polyobj_roll
         stx     polyobj_pitch
         jsr     DrawObject
         jsr     MVEIT
         dec     $b6
         bne     @L631D
@L632D:  lsr     polyobj_xpos_lo
         inc     polyobj_zpos_lo
         beq     @L634D
         inc     polyobj_zpos_lo
         beq     @L634D
         ldx     polyobj_ypos_lo
         inx
         cpx     #$50
         bcc     @L6340
         ldx     #$50
@L6340:  stx     polyobj_ypos_lo
         jsr     DrawObject
         jsr     MVEIT
         dec     $b6
         jmp     @L632D

@L634D:  inc     polyobj_zpos_mi
         jsr     L6363
         lda     #$0a
         bne     L62F8

PrintIncomingMessage:
         lda     #$d8
         jsr     PrintDockedStr
         ldy     #$64
         jmp     LongDelay

WaitKeyDrawHud:
         jsr     WaitForKey
L6363:   lda     #$01
         jmp     PrintFlightHud

Vposn9_SetMask:
         lda     #$09
         .byte   $2c
Vposn5_SetMask:
         lda     #$05
         sta     text_vposn
         jmp     SetUpperMask

; 
; Wait until a key is hit.  Pending input will be discarded.
; 
; On exit:
;   A-reg: key hit
;   (commands set as well)
; 
WaitForKey:
         jsr     CheckForInput ;check for pending input
         bne     WaitForKey ;if key available, discard and retry
         jsr     CheckForInput ;check for pending input
         beq     WaitForKey ;wait until one is available
         rts

GetInfo: txa
         asl     A
         tay
         lda     L4E7E,y
         sta     polyobj_ptr
         lda     L4E7F,y
         sta     polyobj_ptr+1
         rts

L638B:   ldx     #$01
@L638D:  lda     $0290,x
         sta     $e0,x
         dex
         bpl     @L638D
         rts

LongDelay:
         jsr     Delay
         dey
         bne     LongDelay
         rts

planet_desc_adj:
         .byte   $10,$15,$1a,$1f,$9b,$a0,$2e,$a5,$24,$29,$3d,$33,$38,$aa,$42,$47
         .byte   $4c,$51,$56,$8c,$60,$65,$87,$82,$5b,$6a,$b4,$b9,$be,$e1,$e6,$eb
         .byte   $f0,$f5,$fa,$73,$78,$7d

L63C3:   lsr     A
L63C4:   sta     $08
         lsr     A
         lsr     A
         sec
         sbc     $08
         eor     #$ff
         adc     #$01
         rts

L63D0:   jsr     L63C4
         adc     #$20
         rts

L63D6:   sta     $6e
         lda     #$13
         sta     $6f
         lda     #$73
         sta     $71
         jmp     DrawVerticalLine

L63E3:   sta     $02f0
         lda     #$01
L63E8:   pha
         ldx     #$0c
         cpx     $02f0
         bcc     @L63FE
@L63F0:  adc     player_cargo,x
         dex
         bpl     @L63F0
         adc     kill_score_rem-1
         cmp     cargo_capacity
         pla
         rts

@L63FE:  ldy     $02f0
         adc     player_cargo,y
         cmp     #$c8
         pla
         rts

L6408:   sta     text_hposn
         rts

L640B:   sta     text_vposn
         rts

IncTextVposn:
         inc     text_vposn
         rts

L6411:   jsr     PrintFlightHud
         jmp     ClearKbdStrb

         .byte   $60

L6418:   jsr     @L641B
@L641B:  jsr     L641E
L641E:   lda     $92
         clc
         adc     $94
         tax
         lda     $93
         adc     $95
         tay
         lda     $94
         sta     $92
         lda     $95
         sta     $93
         lda     $97
         sta     $95
         lda     $96
         sta     $94
         clc
         txa
         adc     $94
         sta     $96
         tya
         adc     $95
         sta     $97
         rts

L6445:   lda     $de
         ora     $df
         bne     @L644E
         inc     text_vposn
         rts

@L644E:  lda     #$bf       ;"Distance"
         jsr     PrintFlightTokCol
         ldx     $de
         ldy     $df
         sec
         jsr     Print4XloYhi
         lda     #$c3       ;"Light Years"
PrintFlightTokNL:
         jsr     PrintFlightToken
IncTextVpos1:
         inc     text_vposn
L6462:   lda     #$80
         sta     text_mod_flags
PrintFF: lda     #$0c       ;newline (technically form feed)
         jmp     PrintFlightToken

L646B:   lda     #$ad       ;"Mainly"
         jsr     PrintFlightToken
         jmp     L64A9

PrintTokSpc:
         jsr     PrintFlightToken
         jmp     PrintSpace

; 
; Planetary information screen.
; 
SystemDataScreen:
         lda     #$01
         jsr     L6411
         lda     #$09
         jsr     L6408
         lda     #$a3
         jsr     PrintFlightTokLine
         jsr     IncTextVpos1
         jsr     L6445
         lda     #$c2       ;"Economy"
         jsr     PrintFlightTokCol
         lda     $d7
         clc
         adc     #$01
         lsr     A
         cmp     #$02
         beq     L646B
         lda     $d7
         bcc     @L64A4
         sbc     #$05
         clc
@L64A4:  adc     #$aa       ;"Rich"
         jsr     PrintFlightToken
L64A9:   lda     $d7
         lsr     A
         lsr     A
         clc
         adc     #$a8
         jsr     PrintFlightTokNL
         lda     #$a2       ;"Government"
         jsr     PrintFlightTokCol
         lda     $d8
         clc
         adc     #$b1
         jsr     PrintFlightTokNL
         lda     #$c4       ;"Tech Level"
         jsr     PrintFlightTokCol
         ldx     $d9
         inx
         clc
         jsr     PrintNumInX
         jsr     IncTextVpos1
         lda     #$c0       ;"Population"
         jsr     PrintFlightTokCol
         sec
         ldx     $da
         jsr     PrintNumInX
         lda     #$c6
         jsr     PrintFlightTokNL
         lda     #$28       ;"("
         jsr     PrintFlightToken
         lda     $96
         bmi     @L64F0
         lda     #$bc       ;"Human Colonial"
         jsr     PrintFlightToken
         jmp     @L652C

@L64F0:  lda     $97
         lsr     A
         lsr     A
         pha
         and     #$07
         cmp     #$03
         bcs     @L6500
         adc     #$e3
         jsr     PrintTokSpc
@L6500:  pla
         lsr     A
         lsr     A
         lsr     A
         cmp     #$06
         bcs     @L650D
         adc     #$e6
         jsr     PrintTokSpc
@L650D:  lda     $95
         eor     $93
         and     #$07
         sta     $a1
         cmp     #$06
         bcs     @L651E
         adc     #$ec
         jsr     PrintTokSpc
@L651E:  lda     $97
         and     #$03
         clc
         adc     $a1
         and     #$07
         adc     #$f2       ;Rodent, Frog, Lizard, ...
         jsr     PrintFlightToken
@L652C:  lda     #$53       ;"S"
         jsr     PrintFlightToken
         lda     #$29       ;")"
         jsr     PrintFlightTokNL
         lda     #$c1       ;"Gross Productivity"
         jsr     PrintFlightTokCol
         ldx     $dc
         ldy     $dd
         jsr     L6C13
         jsr     PrintSpace
         lda     #$00
         sta     text_mod_flags
         lda     #$4d       ;"M"
         jsr     PrintFlightToken
         lda     #$e2       ;"Cr"
         jsr     PrintFlightTokNL
         lda     #$fa       ;"Average Radius"
         jsr     PrintFlightTokCol
         lda     $97
         ldx     $95
         and     #$0f
         clc
         adc     #$0b
         tay
         jsr     Print4XloYhi
         jsr     PrintSpace
         lda     #'k'
         jsr     PrintChar
         lda     #'m'
         jsr     PrintChar
         jsr     IncTextVpos1
         jmp     L626B

         .byte   $60

; BBC .TT24 "Calculate system Data"
L6579:   lda     $93
         and     #$07
         sta     $d7
         lda     $94
         lsr     A
         lsr     A
         lsr     A
         and     #$07
         sta     $d8
         lsr     A
         bne     @L6591
         lda     $d7
         ora     #$02
         sta     $d7
@L6591:  lda     $d7
         eor     #$07
         clc
         sta     $d9
         lda     $95
         and     #$03
         adc     $d9
         sta     $d9
         lda     $d8
         lsr     A
         adc     $d9
         sta     $d9
         asl     A
         asl     A
         adc     $d7
         adc     $d8
         adc     #$01
         sta     $da
         lda     $d7
         eor     #$07
         adc     #$03
         sta     $31
         lda     $d8
         adc     #$04
         sta     $ad
         jsr     L5F45
         lda     $da
         sta     $ad
         jsr     L5F45
         asl     $31
         rol     A
         asl     $31
         rol     A
         asl     $31
         rol     A
         sta     $dd
         lda     $31
         sta     $dc
         rts

; BBC .TT22 "Long range galactic chart"
GalacticChartScreen:
         lda     #$40
         jsr     PrintFlightHud
         lda     #$07
         sta     text_hposn
         jsr     L6A93
         lda     #$c7       ;"Galactic Chart #"
         jsr     PrintFlightToken
         lda     #$12
         jsr     IncTextDrawLine
         lda     #$74
         sta     $6f
         lda     #$1f
         sta     $6e
         lda     #$e4
         sta     $70
         jsr     DrawHorizLine
         lda     #$1e
         jsr     L63D6
         lda     #$e2
         jsr     L63D6
         jsr     L66C0
         ldx     #$00
@L660D:  stx     $b0
         lda     $95
         jsr     L63D0
         tax
         lda     #$ff
         sta     $b4
         lda     $93
         jsr     L63C3
         clc
         adc     #$13
         jsr     DrawStar
         jsr     L6418
         ldx     $b0
         inx
         bne     @L660D
         lda     $e0
         jsr     L63D0
         sta     $a1
         lda     $e1
         jsr     L63C3
         sta     $a2
         lda     #$04
         sta     $a3
         lda     #$08
         sta     $35
L6642:   lda     #$13
         ldx     displayed_screen
         bpl     @L664A
         lda     #$00
@L664A:  sta     $a6
         lda     $a1
         sec
         sbc     $a3
         bit     displayed_screen
         bmi     @L665B
         cmp     #$22
         bcs     @L665B
         lda     #$22
@L665B:  sta     $6e
         lda     $a1
         clc
         adc     #$02
         adc     $a3
         bit     displayed_screen
         bmi     @L666E
         cmp     #$e0
         bcc     @L666E
         lda     #$e0
@L666E:  sta     $70
         lda     $a2
         clc
         adc     $a6
         sta     $6f
         jsr     DrawHorizLine
         lda     $a2
         sec
         sbc     $a3
         bcs     @L6683
         lda     #$00
@L6683:  clc
         adc     $a6
         sta     $6f
         lda     $a2
         clc
         adc     $a3
         adc     $a6
         cmp     #$73
         bcc     @L6699
         ldx     displayed_screen
         bmi     @L6699
         lda     #$73
@L6699:  sta     $71
         lda     $a1
         sta     $6e
         jmp     DrawVerticalLine

L66A2:   lda     #$69
         sta     $a1
         lda     #$4b
         sta     $a2
         lda     #$10
         sta     $a3
         lda     #$08
         sta     $35
         jsr     L6642
         lda     player_fuel
         jsr     L63C4
         sta     $7a
         jmp     L66EF

L66C0:   lda     displayed_screen
         bmi     L66A2
         lda     player_fuel
         lsr     A
         jsr     L63C3
         sta     $7a
         lda     $0290
         jsr     L63D0
         sta     $a1
         lda     $0291
         jsr     L63C3
         sta     $a2
         lda     #$07
         sta     $a3
         lda     #$08
         sta     $35
         jsr     L6642
         lda     $a2
         clc
         adc     #$13
         sta     $a2
L66EF:   lda     $a1
         sta     $38
         lda     $a2
         sta     $46
         ldx     #$00
         stx     $47
         stx     $39
         inx
         stx     $91
         ldx     #$02
         stx     $bf
         jmp     L77BA

DockBuyCargo:
         lda     #$02
         jsr     L6411
         jsr     L6CB7
         lda     #$80
         sta     text_mod_flags
         lda     #$00
         sta     $02f0
@L6718:  jsr     L6C25
         lda     $02ee
         bne     @L672F
         jmp     @L6795

@L6723:  ldy     #$b0
@L6725:  jsr     PrintSpace
         tya
         jsr     PrintTokQu
         jsr     L6FF0
@L672F:  jsr     ClearLines
         lda     #$cc       ;"Quantity Of"
         jsr     PrintFlightToken
         lda     $02f0
         clc
         adc     #$d0       ;Food, Textiles, Radioactives, ...
         jsr     PrintFlightToken
         lda     #$2f       ;"/"
         jsr     PrintFlightToken
         jsr     L6C94
         lda     #$3f       ;"?"
         jsr     PrintFlightToken
         jsr     PrintFF
         ldx     #$00
         stx     $ae
         ldx     #$0c
         stx     $06
         jsr     L67B5
         bcs     @L6723
         sta     $31
         jsr     L63E8
         ldy     #$ce
         lda     $ae
         beq     @L676A
         bcs     @L6725
@L676A:  lda     $02ed
         sta     $ad
         jsr     L6E78
         jsr     SubCredits
         ldy     #$c5
         bcc     @L6725
         ldy     $02f0
         lda     $ae
         pha
         clc
         adc     player_cargo,y
         sta     player_cargo,y
         lda     $02c4,y
         sec
         sbc     $ae
         sta     $02c4,y
         pla
         beq     @L6795
         jsr     L6FE8
@L6795:  lda     $02f0
         clc
         adc     #$05
         jsr     L640B
         lda     #$00
         jsr     L6408
         inc     $02f0
         lda     $02f0
         cmp     #$11
         bcs     L67B0
         jmp     @L6718

L67B0:   lda     #$30
         jmp     FromGameInit

L67B5:   ldx     #$00
         stx     $ae
         ldx     #$0c
         stx     $06
@L67BD:  jsr     GetInput1
         ldx     $ae
         bne     @L67CC
         cmp     #$59
         beq     @L67FD
         cmp     #$4e
         beq     @L6808
@L67CC:  sta     $ad
         sec
         sbc     #$30
         bcc     @L67FA
         cmp     #$0a
         bcs     L67B0
         sta     $af
         lda     $ae
         cmp     #$1a
         bcs     @L67FA
         asl     A
         sta     $d0
         asl     A
         asl     A
         adc     $d0
         adc     $af
         sta     $ae
         cmp     $02ee
         beq     @L67F1
         bcs     @L67FA
@L67F1:  lda     $ad
         jsr     PrintChar
         dec     $06
         bne     @L67BD
@L67FA:  lda     $ae
         rts

@L67FD:  jsr     PrintChar
         lda     $02ee
         sta     $ae
         jmp     @L67FA

@L6808:  jsr     PrintChar
         lda     #$00
         sta     $ae
         jmp     @L67FA

L6812:   jsr     PrintFF
         lda     #$b0
         jsr     PrintTokQu
         jsr     L6FF0
         ldy     $02f0
         jmp     L683F

DockSellCargo:
         lda     #$04
         jsr     L6411
         lda     #$0a
         jsr     L6408
         lda     #$cd       ;"Sell"
         jsr     PrintFlightToken
         lda     #$ce       ;"Cargo"
         jsr     PrintFlightTokLine
         jsr     PrintFF
L683A:   ldy     #$00
L683C:   sty     $02f0
L683F:   ldx     player_cargo,y
         beq     @L68AC
         tya
         asl     A
         asl     A
         tay
         lda     MarketData+1,y
         sta     $a2
         txa
         pha
         jsr     L6462
         clc
         lda     $02f0
         adc     #$d0       ;Food, Textiles, Radioactives, ...
         jsr     PrintFlightToken
         lda     #$0e
         jsr     L6408
         pla
         tax
         sta     $02ee
         clc
         jsr     PrintNumInX
         jsr     L6C94
         lda     displayed_screen
         cmp     #$04
         bne     @L68AC
         lda     #$cd       ;"Sell"
         jsr     PrintFlightToken
         lda     #$ce       ;"(Y/N)?"
         jsr     PrintDockedStr
         jsr     L67B5
         beq     @L68AC
         bcs     L6812
         lda     $02f0
         ldx     #$ff
         stx     text_mod_flags
         jsr     L6C25
         ldy     $02f0
         lda     player_cargo,y
         sec
         sbc     $ae
         sta     player_cargo,y
         lda     $ae
         sta     $31
         lda     $02ed
         sta     $ad
         jsr     L6E78
         jsr     AddCredits
         lda     #$00
         sta     text_mod_flags
@L68AC:  ldy     $02f0
         iny
         cpy     #$11
         bcc     L683C
         lda     displayed_screen
         cmp     #$04
         bne     @L68C0
         jsr     L6FF0
         jmp     L67B0

@L68C0:  jsr     L6462
         lda     $02bf
         ora     kill_score_rem-1
         bne     @L68CC
@L68CB:  rts

@L68CC:  clc
         lda     #$00
         ldx     $02bf
         ldy     kill_score_rem-1
         jsr     L5468
         jsr     GetRandom
         and     #$03
         clc
         adc     #$6f
         jsr     PrintDockedStr
         lda     #$c6
         jsr     PrintDockedStr
         lda     kill_score_rem-1
         bne     @L68F3
         ldx     $02bf
         dex
         beq     @L68CB
@L68F3:  lda     #$73
         jmp     PrintChar

CargoListScreen:
         lda     #$08
         jsr     L6411
         lda     #$0b
         jsr     L6408
         lda     #$a4       ;"Inventory"
         jsr     PrintFlightTokNL
         jsr     T4EA9
         jsr     PrintFuelCash
         lda     cargo_capacity ;do we have the cargo bay expander?
         cmp     #26
         bcc     @L6919
         lda     #$6b       ;"Large Cargo Bay"
         jsr     PrintFlightToken
@L6919:  jmp     L683A

YN_unref:
         jsr     PrintFlightToken
         lda     #$ce       ;"(Y/N)?"
         jsr     PrintDockedStr
         jsr     GetInput1
         ora     #$20
         cmp     #'y'
         beq     @L6932
         lda     #'n'
         jmp     PrintChar

@L6932:  jsr     PrintChar
         sec
         rts

L6937:   txa
         pha
         dey
         tya
         eor     #$ff
         pha
         jsr     Delay
         jsr     L6960
         pla
         sta     $a4
         lda     $e1
         jsr     L697D
         lda     $a5
         sta     $e1
         sta     $a2
         pla
         sta     $a4
         lda     $e0
         jsr     L697D
         lda     $a5
         sta     $e0
         sta     $a1
L6960:   lda     #$08
         sta     $35
         lda     displayed_screen
         bmi     L698E
         lda     $e0
         jsr     L63D0
         sta     $a1
         lda     $e1
         jsr     L63C3
         sta     $a2
         lda     #$04
         sta     $a3
         jmp     L6642

L697D:   sta     $a5
         clc
         adc     $a4
         ldx     $a4
         bmi     @L6989
         bcc     @L698B
         rts

@L6989:  bcc     L698D
@L698B:  sta     $a5
L698D:   rts

L698E:   lda     $e0
         sec
         sbc     $0290
         cmp     #$1d
         bcc     @L699C
         cmp     #$e3
         bcc     L698D
@L699C:  asl     A
         asl     A
         clc
         adc     #$8c
         jsr     L63C4
         sta     $a1
         lda     $e1
         sec
         sbc     $0291
         cmp     #$23
         bcc     @L69B4
         cmp     #$e6
         bcc     L698D
@L69B4:  asl     A
         clc
         adc     #$63
         jsr     L63C4
         sta     $a2
         lda     #$08
         sta     $a3
         lda     #$08
         sta     $35
         jmp     L6642

LocalChartScreen:
         lda     #$80
         jsr     PrintFlightHud
         lda     #$07
         sta     text_hposn
         lda     #$be       ;"Short Range Chart"
         jsr     PrintFlightTokLine
         jsr     L66C0
         jsr     L6960
         jsr     L6A93
         lda     #$00
         sta     $c1
         ldx     #$18
@L69E5:  sta     polyobj_xpos_lo,x
         dex
         bpl     @L69E5
@L69EA:  lda     $95
         sec
         sbc     $0290
         bcs     @L69F6
         eor     #$ff
         adc     #$01
@L69F6:  cmp     #$1d
         bcs     @L6A5D
         lda     $93
         sec
         sbc     $0291
         bcs     @L6A06
         eor     #$ff
         adc     #$01
@L6A06:  cmp     #$28
         bcs     @L6A5D
         lda     $95
         sec
         sbc     $0290
         asl     A
         asl     A
         adc     #$8c
         jsr     L63C4
         sta     $74
         lsr     A
         lsr     A
         lsr     A
         clc
         adc     #$01
         sta     text_hposn
         lda     $93
         sec
         sbc     $0291
         asl     A
         adc     #$63
         jsr     L63C4
         sta     $46
         lsr     A
         lsr     A
         lsr     A
         tay
         ldx     polyobj_xpos_lo,y
         beq     @L6A42
         iny
         ldx     polyobj_xpos_lo,y
         beq     @L6A42
         dey
         dey
         ldx     polyobj_xpos_lo,y
         bne     @L6A6B
@L6A42:  sty     text_vposn
         cpy     #$03
         bcc     @L6A88
         cpy     #$11
         bcs     @L6A88
         tya
         pha
         lda     $95
         jsr     L6AF1
         pla
         tay
         lda     $df
         bne     @L6A88
         lda     $de
         cmp     #$46
@L6A5D:  bcs     @L6A88
         lda     #$ff
         sta     polyobj_xpos_lo,y
         lda     #$80
         sta     text_mod_flags
         jsr     PrintSelPlanet
@L6A6B:  lda     #$00
         sta     $39
         sta     $47
         sta     $7b
         lda     $74
         sta     $38
         lda     $97
         and     #$01
         adc     #$02
         sta     $7a
         jsr     L7428
         jsr     L767B
         jsr     L7428
@L6A88:  jsr     L6418
         inc     $c1
         beq     @L6A92
         jmp     @L69EA

@L6A92:  rts

L6A93:   ldx     #$05
@L6A95:  lda     $0292,x
         sta     $92,x
         dex
         bpl     @L6A95
         rts

L6A9E:   jsr     L6A93
         ldy     #$7f
         sty     $d0
         lda     #$00
         sta     $ac
@L6AA9:  lda     $95
         sec
         sbc     $e0
         bcs     @L6AB4
         eor     #$ff
         adc     #$01
@L6AB4:  lsr     A
         sta     $af
         lda     $93
         sec
         sbc     $e1
         bcs     @L6AC2
         eor     #$ff
         adc     #$01
@L6AC2:  lsr     A
         clc
         adc     $af
         cmp     $d0
         bcs     @L6AD9
         sta     $d0
         ldx     #$05
@L6ACE:  lda     $92,x
         sta     $a1,x
         dex
         bpl     @L6ACE
         lda     $ac
         sta     $b4
@L6AD9:  jsr     L6418
         inc     $ac
         bne     @L6AA9
         ldx     #$05
@L6AE2:  lda     $a1,x
         sta     $92,x
         dex
         bpl     @L6AE2
         lda     $93
         sta     $e1
         lda     $95
         sta     $e0
L6AF1:   sec
         sbc     $0290
         bcs     @L6AFB
         eor     #$ff
         adc     #$01
@L6AFB:  jsr     L5F32
         sta     $7b
         lda     $31
         sta     $7a
         lda     $93
         sec
         sbc     $0291
         bcs     @L6B10
         eor     #$ff
         adc     #$01
@L6B10:  lsr     A
         jsr     L5F32
         pha
         lda     $31
         clc
         adc     $7a
         sta     $ad
         pla
         adc     $7b
         bcc     @L6B23
         lda     #$ff
@L6B23:  sta     $ae
         jsr     TwoByteSqrt
         lda     $ad
         asl     A
         ldx     #$00
         stx     $df
         rol     $df
         asl     A
         rol     $df
         sta     $de
         jmp     L6579

L6B39:   jsr     ClearLines
         lda     #$0f
         jsr     L6408
         lda     #$cd
         jmp     PrintDockedStr

L6B46:   lda     docked_flag
         bne     L6B39
         lda     $69
         beq     @L6B4F
         rts

@L6B4F:  lda     input_raw_key
         cmp     #$47
         beq     @L6BAF
         lda     displayed_screen
         beq     @L6BA9
         and     #$c0
         bne     @L6B5E
         rts

@L6B5E:  jsr     L705B
@L6B61:  lda     $de
         ora     $df
         bne     @L6B68
         rts

@L6B68:  ldx     #$05
@L6B6A:  lda     $92,x
         sta     $02fb,x
         dex
         bpl     @L6B6A
         lda     #$07
         sta     text_hposn
         lda     #$16
         ldy     display_mode_flag
         bmi     @L6B7E
         lda     #$10
@L6B7E:  sta     text_vposn
         lda     #$00
         sta     text_mod_flags
         lda     #$bd       ;"Hyperspace"
         jsr     PrintFlightToken
         lda     $df
         bne     @L6B94
         lda     player_fuel
         cmp     $de
         bcs     @L6B97
@L6B94:  jmp     PrintRangeQu

@L6B97:  lda     #$2d       ;"-"
         jsr     PrintFlightToken
         jsr     PrintSelPlanet
         lda     #$0f
@L6BA1:  sta     $69
         sta     $68
         tax
         jmp     L6C03

@L6BA9:  jsr     L6A9E
         jmp     @L6B61

@L6BAF:  ldx     have_galactic_hyper
         beq     @L6BD8
         inx
         stx     have_galactic_hyper
         stx     player_fug_inno
         lda     #$02
         jsr     @L6BA1
         ldx     #$05
         inc     ship_state2
         lda     ship_state2
         and     #$f7
         sta     ship_state2
@L6BCD:  lda     $0292,x
         asl     A
         rol     $0292,x
         dex
         bpl     @L6BCD
         .byte   $a9
@L6BD8:  rts

         sta     $e0
         sta     $e1
         jsr     LaunchOrLook
         jsr     L6A9E
         ldx     #$05
@L6BE5:  lda     $92,x
         sta     $02fb,x
         dex
         bpl     @L6BE5
         ldx     #$00
         stx     $de
         stx     $df
         lda     #$74       ;"Galactic Hyperspace"
         jsr     PrintMessageBriefly
L6BF8:   lda     $e0
         sta     $0290
         lda     $e1
         sta     $0291
         rts

L6C03:   lda     #$01
         jsr     L6408
         jsr     L640B
         ldy     #$00
         clc
         lda     #$03
         jmp     L5468

L6C13:   clc
Print4XloYhi:
         lda     #$05
         jmp     L5468

PrintRangeQu:
         lda     #$ca       ;"Range"
PrintTokQu:
         jsr     PrintFlightToken
         lda     #$3f       ;"?"
         jmp     PrintFlightToken

L6C23:   pla
         rts

L6C25:   pha
         sta     $a5
         asl     A
         asl     A
         sta     $a1
         lda     witch_space_flag
         bne     L6C23
         lda     #$01
         sta     text_hposn
         pla
         adc     #$d0       ;Food, Textiles, Radioactives, ...
         jsr     PrintFlightToken
         lda     #$0e
         sta     text_hposn
         ldx     $a1
         lda     MarketData+1,x
         sta     $a2
         lda     kill_score-1
         and     MarketData+3,x
         clc
         adc     MarketData,x
         sta     $02ed
         jsr     L6C94
         jsr     L6CF1
         lda     $a2
         bmi     @L6C65
         lda     $02ed
         adc     $a4
         jmp     @L6C6B

@L6C65:  lda     $02ed
         sec
         sbc     $a4
@L6C6B:  sta     $02ed
         sta     $31
         lda     #$00
         jsr     L6E7B
         sec
         jsr     Print4XloYhi
         ldy     $a5
         lda     #$05
         ldx     $02c4,y
         stx     $02ee
         clc
         beq     @L6C8C
         jsr     L5466
         jmp     L6C94

@L6C8C:  lda     #$19
         sta     text_hposn
         lda     #$2d
         bne     L6CA3

L6C94:   lda     $a2
         and     #$60
         beq     L6CA6
         cmp     #$20
         beq     L6CAD
         jsr     L6CB2
PrintSpace:
         lda     #$20       ;" "
L6CA3:   jmp     PrintFlightToken

L6CA6:   lda     #$74
         jsr     PrintChar
         bcc     PrintSpace
L6CAD:   lda     #$6b
         jsr     PrintChar
L6CB2:   lda     #$67
         jmp     PrintChar

L6CB7:   lda     #$11
         sta     text_hposn
         lda     #$ff
         bne     L6CA3

LocalMarketScreen:
         lda     #$10
         jsr     L6411
         lda     #$05
         sta     text_hposn
         lda     #$a7       ;"[cur-planet] Market Prices"
         jsr     PrintFlightTokLine
         lda     #$03
         sta     text_vposn
         jsr     L6CB7
         lda     #$06
         sta     text_vposn
         lda     #$00
         sta     $02f0
@L6CDD:  ldx     #$80
         stx     text_mod_flags
         jsr     L6C25
         inc     text_vposn
         inc     $02f0
         lda     $02f0
         cmp     #$11
         bcc     @L6CDD
         rts

L6CF1:   lda     $a2
         and     #$1f
         ldy     $02ef
         sta     $a3
         clc
         lda     #$00
         sta     $02d4
@L6D00:  dey
         bmi     @L6D08
         adc     $a3
         jmp     @L6D00

@L6D08:  sta     $a4
         rts

         .byte   $20
         .byte   $9e
         .byte   $6a

L6D0E:   jsr     L6BF8
         ldx     #$05
@L6D13:  lda     $02fb,x
         sta     $02f5,x
         dex
         bpl     @L6D13
         inx
         stx     PLAYER_STATE+53
         lda     $d7
         sta     $02ef
         lda     $d9
         sta     $02f2
         lda     $d8
         sta     $02f1
         jsr     GetRandom
         sta     kill_score-1
         ldx     #$00
         stx     $c0
@L6D39:  lda     MarketData+1,x
         sta     $a2
         jsr     L6CF1
         lda     MarketData+3,x
         and     kill_score-1
         clc
         adc     MarketData+2,x
         ldy     $a2
         bmi     @L6D55
         sec
         sbc     $a4
         jmp     @L6D58

@L6D55:  clc
         adc     $a4
@L6D58:  bpl     @L6D5C
         lda     #$00
@L6D5C:  ldy     $c0
         and     #$3f
         sta     $02c4,y
         iny
         tya
         sta     $c0
         asl     A
         asl     A
         tax
         cmp     #$3f
         bcc     @L6D39
         rts

L6D6F:   jsr     L7B5A
         lda     #$ff
         sta     polyobj_attack
         lda     #$1d
         jsr     L7545
         lda     #$1e
         jmp     L7545

L6D80:   lsr     ship_state1
         sec
         rol     ship_state1
L6D87:   lda     #$03
         jsr     PrintFlightHud
         jsr     L5D29
         jsr     RES2
         sty     witch_space_flag
@L6D95:  jsr     L6D6F
         lda     #$02
         cmp     PLAYER_STATE+38
         bcs     @L6D95
         sta     $e2
         ldx     #$00
         jsr     SetViewDirection
         lda     $0291
         eor     #$1f
         sta     $0291
         rts

L6DAF:   rts

L6DB0:   lda     player_fuel
         sec
         sbc     $de
         bcs     @L6DBA
         lda     #$00
@L6DBA:  sta     player_fuel
         lda     displayed_screen
         bne     @L6DC7
         jsr     PrintFlightHud
         jsr     L5D29
@L6DC7:  jsr     CheckForInput
         cmp     #$09
         bne     @L6DD3
         lda     ptb_pausecmd_x
         bmi     L6D80
@L6DD3:  jsr     GetRandom
         cmp     #$fd
         bcs     L6D87
         jsr     L6D0E
         jsr     RES2
         jsr     L7379
         lda     displayed_screen
         and     #$3f
         bne     L6DAF
         jsr     L94BB
         lda     displayed_screen
         bne     L6E28
         inc     displayed_screen
LaunchOrLook:
         ldx     docked_flag ;are we docked?
         beq     @SetFrontView ;no, branch
         jsr     DrawOctagonRings ;launch from dock
         jsr     RES2
         jsr     L6A9E
         inc     polyobj_zpos_hi
         jsr     L7366
         lda     #$80
         sta     polyobj_zpos_hi
         inc     polyobj_zpos_mi
         jsr     L74FE
         lda     #$0c
         sta     player_speed
         jsr     CountIllegalCargo
         ora     player_fug_inno
         sta     player_fug_inno
         lda     #$ff
         sta     displayed_screen
         jsr     L5D58
@SetFrontView:
         ldx     #$00       ;clear docked flag
         stx     docked_flag
         jmp     SetViewDirection ;set view to forward

L6E28:   bmi     @L6E2D
         jmp     GalacticChartScreen

@L6E2D:  jmp     LocalChartScreen

; 
; Subtract credits from player's account.
; 
; On entry:
;   X-reg: low part
;   Y-reg: high part
SubCredits:
         stx     $06
         lda     player_credits+3
         sec
         sbc     $06
         sta     player_credits+3
         sty     $06
         lda     player_credits+2
         sbc     $06
         sta     player_credits+2
         lda     player_credits+1
         sbc     #$00
         sta     player_credits+1
         lda     player_credits
         sbc     #$00
         sta     player_credits
         bcs     Return1    ;always?
; 
; Add credits to player's account.
; 
; On entry:
;   X-reg: low part
;   Y-reg: high part
AddCredits:
         txa
         clc
         adc     player_credits+3
         sta     player_credits+3
         tya
         adc     player_credits+2
         sta     player_credits+2
         lda     player_credits+1
         adc     #$00
         sta     player_credits+1
         lda     player_credits
         adc     #$00
         sta     player_credits
         clc
Return1: rts

L6E78:   jsr     L5F45
L6E7B:   asl     $31
         rol     A
         asl     $31
         rol     A
         tay
         ldx     $31
         rts

L6E85:   jmp     L7F2D

DockEquipShip:
         lda     #$20
         jsr     L6411
         lda     #$0c
         sta     text_hposn
         lda     #$cf
         jsr     PrintTokSpc
         lda     #$b9       ;"Ship"
         jsr     PrintFlightTokLine
         lda     #$80
         sta     text_mod_flags
         jsr     IncTextVposn
         lda     $02f2
         clc
         adc     #$03
         cmp     #$0c
         bcc     @L6EAE
         lda     #$0e
@L6EAE:  sta     $ad
         sta     $02ee
         inc     $ad
         lda     #$46
         sec
         sbc     player_fuel
         asl     A
         sta     equip_prices
         ldx     #$01
@L6EC1:  stx     $b5
         jsr     PrintFF
         ldx     $b5
         clc
         jsr     PrintNumInX
         jsr     PrintSpace
         lda     $b5
         clc
         adc     #$68       ;Beam Laser, Fuel, Missile, ...
         jsr     PrintFlightToken
         lda     $b5
         jsr     L7008
         sec
         lda     #$19
         sta     text_hposn
         lda     #$06
         jsr     L5468
         ldx     $b5
         inx
         cpx     $ad
         bcc     @L6EC1
         jsr     ClearLines
         lda     #$7f
         jsr     PrintTokQu
         jsr     L67B5
         beq     L6E85
         bcs     L6E85
         sbc     #$00
         pha
         lda     #$02
         sta     text_hposn
         inc     text_vposn
         pla
         pha
         jsr     L6FF8
         pla
         bne     @NotFuel
         ldx     #$46       ;A-reg=0 -> fuel
         stx     player_fuel
@NotFuel:
         cmp     #$01       ;missile?
         bne     @NotMissile
         ldx     missile_armed_flag
         inx
         ldy     #$7c
         cpx     #$05
         bcs     L6F6A
         stx     missile_armed_flag
         jsr     L7B29
         lda     #$01
@NotMissile:
         ldy     #$6b
         cmp     #$02       ;large cargo bay?
         bne     @NotLCB
         ldx     #$25
         cpx     cargo_capacity
         beq     L6F6A
         stx     cargo_capacity
@NotLCB: cmp     #$03       ;ECM system?
         bne     @NotEcm
         iny
         ldx     have_ecm
         bne     L6F6A
         dec     have_ecm
@NotEcm: cmp     #$04       ;extra pulse lasers?
         bne     @NotPulse
         jsr     PrintLaserInfo
         lda     #$0f
         jsr     L7067
         lda     #$04
@NotPulse:
         cmp     #$05       ;extra beam lasers?
         bne     @NotBeam
         jsr     PrintLaserInfo
         lda     #$8f
         jsr     L7067
@NotBeam:
         ldy     #$6f
         cmp     #$06       ;fuel scoops?
         bne     NotScoop
         ldx     have_fuel_scoop
         beq     L6F82
L6F6A:   sty     $7a
         jsr     L700B
         jsr     AddCredits
         lda     $7a
         jsr     PrintTokSpc
         lda     #$1f       ;"Present"
         jsr     PrintFlightToken
L6F7C:   jsr     L6FF0
         jmp     L7F2D

L6F82:   dec     have_fuel_scoop
NotScoop:
         iny
         cmp     #$07       ;escape pod?
         bne     @NotEscape
         ldx     have_escape_pod
         bne     L6F6A
         dec     have_escape_pod
@NotEscape:
         iny
         cmp     #$08       ;energy bomb?
         bne     @NotBomb
         ldx     have_energy_bomb
         bne     L6F6A
         ldx     #$7f
         stx     have_energy_bomb
@NotBomb:
         iny
         cmp     #$09       ;energy unit?
         bne     @NotEnergy
         ldx     have_energy_unit
         bne     L6F6A
         inc     have_energy_unit
@NotEnergy:
         iny
         cmp     #$0a       ;docking computer?
         bne     @NotDockComp
         ldx     have_docking_comp
         bne     L6F6A
         dec     have_docking_comp
@NotDockComp:
         iny
         cmp     #$0b       ;galactic hyperspace?
         bne     @NotGalHyper
         ldx     have_galactic_hyper
         bne     L6F6A
         dec     have_galactic_hyper
@NotGalHyper:
         iny
         cmp     #$0c       ;military laser?
         bne     @L6FD5
         jsr     PrintLaserInfo
         lda     #$97
         jsr     L7067
@L6FD5:  iny
         cmp     #$0d       ;mining laser?
         bne     @L6FE2
         jsr     PrintLaserInfo
         lda     #$32
         jsr     L7067
@L6FE2:  jsr     L6FE8
         jmp     DockEquipShip

L6FE8:   jsr     PrintSpace
         lda     #$77       ;"Cash: $$$$$$.0 Cr"
         jsr     PrintTokSpc
L6FF0:   jsr     Noise1
         ldy     #$19
         jmp     LongDelay

L6FF8:   jsr     L700B
         jsr     SubCredits
         bcs     L7014
         lda     #$c5       ;"Cash"
         jsr     PrintTokQu
         jmp     L6F7C

L7008:   sec
         sbc     #$01
L700B:   asl     A
         tay
         ldx     equip_prices,y
         lda     equip_prices+1,y
         tay
L7014:   rts

PrintLaserInfo:
         lda     $02f2
         cmp     #$08
         bcc     @L7021
         lda     #$20
         jsr     PrintFlightHud
@L7021:  lda     #$10
         tay
         sta     text_vposn
@L7026:  lda     #$0c
         sta     text_hposn
         tya
         clc
         adc     #$20
         jsr     PrintTokSpc
         lda     text_vposn
         clc
         adc     #$50       ;P, Q, R, ...
         jsr     PrintFlightToken
         inc     text_vposn
         ldy     text_vposn
         cpy     #$14
         bcc     @L7026
         jsr     ClearLines
@L7044:  lda     #$af       ;"View"
         jsr     PrintTokQu
         jsr     GetInput1
         sec
         sbc     #$30
         cmp     #$04
         bcc     @L7059
         jsr     ClearLines
         jmp     @L7044

@L7059:  tax
         rts

L705B:   jsr     L6960
         jsr     L6A9E
         jsr     L6960
         jmp     ClearLines

L7067:   sta     $06
         lda     $029f,x
         beq     @L708D
         ldy     #$04
         cmp     #$0f
         beq     @L7082
         ldy     #$05
         cmp     #$8f
         beq     @L7082
         ldy     #$0c
         cmp     #$97
         beq     @L7082
         ldy     #$0d
@L7082:  stx     $b4
         tya
         jsr     L700B
         jsr     AddCredits
         ldx     $b4
@L708D:  lda     $06
         sta     $029f,x
         rts

equip_prices:
         .word   1          ;fuel (updated for quantity currently in ship)
         .word   300        ;Missile (30.0 Cr)
         .word   4000       ;Large Cargo Bay (400.0 Cr)
         .word   6000       ;E.C.M. System
         .word   4000       ;Pulse Laser
         .word   10000      ;Beam Laser
         .word   5250       ;Fuel Scoop
         .word   10000      ;Escape Pod
         .word   9000       ;Energy Bomb
         .word   15000      ;Energy Unit
         .word   10000      ;Docking Computers
         .word   50000      ;Galactic Hyperdrive
         .word   60000      ;Military Laser
         .word   8000       ;Mining Laser

PrintSelPlanet:
         ldx     #$05
@L70B1:  lda     $92,x
         sta     $a1,x
         dex
         bpl     @L70B1
         ldy     #$03
         bit     $92
         bvs     @L70BF
         dey
@L70BF:  sty     $d0
@L70C1:  lda     $97
         and     #$1f
         beq     @L70CC
         ora     #$80
         jsr     PrintFlightToken
@L70CC:  jsr     L641E
         dec     $d0
         bpl     @L70C1
         ldx     #$05
@L70D5:  lda     $a1,x
         sta     $92,x
         dex
         bpl     @L70D5
         rts

PrintCmdrName:
         ldy     #$00
@L70DF:  lda     $0287,y
         cmp     #$0d
         beq     @L70EC
         jsr     PrintChar
         iny
         bne     @L70DF
@L70EC:  rts

PrintCurPlanet:
         bit     witch_space_flag
         bmi     @L7107
         jsr     @L70F8
         jsr     PrintSelPlanet
@L70F8:  ldx     #$05
@L70FA:  lda     $92,x
         ldy     $02f5,x
         sta     $02f5,x
         sty     $92,x
         dex
         bpl     @L70FA
@L7107:  rts

PrintGalNum:
         clc
         ldx     ship_state2
         inx
         jmp     PrintNumInX

PrintFuelCash:
         lda     #$69       ;"Fuel"
         jsr     PrintFlightTokCol ;":"
         ldx     player_fuel
         sec
         jsr     PrintNumInX
         lda     #$c3       ;" Light Years"
         jsr     PrintTokFF
         lda     #$77       ;"Cash:" + account balance
         bne     PrintFlightToken

PrintCash:
         ldx     #$03
@L7127:  lda     player_credits,x
         sta     $7a,x
         dex
         bpl     @L7127
         lda     #$09
         sta     $ac
         sec
         jsr     PrintNumber
         lda     #$e2       ;" Cr"
PrintTokFF:
         jsr     PrintFlightToken
         jmp     PrintFF

; 
; Prints a flight token, followed by a ':'.
; 
PrintFlightTokCol:
         jsr     PrintFlightToken
PrintColon:
         lda     #':'
; 
; Prints a flight string token.  This can be a single letter, a variable, a
; string expansion, or a meta command.
; 
; See also https://xania.org/201406/elites-crazy-string-format
; 
; Values:
;   $00-0d: special values, e.g. current cash on hand
;   $0e-1f: canned messages 128-145
;   $20-5f: ASCII
;   $60-7f: canned messages 96-127
;   $80-9f: flight digram
;   $a0-ff: canned messages 0-95
; 
; On entry:
;   A-reg: token (already "decrypted")
; 
PrintFlightToken:
         tax
         beq     PrintCash  ;token=0: print account balance
         bmi     @PrintCanOrDigram ;token >= 128, branch
         dex
         beq     PrintGalNum ;token=1: print galaxy number
         dex
         beq     PrintCurPlanet ;token=2: print current planet name
         dex
         bne     @Not0123
         jmp     PrintSelPlanet ;token=3: print selected planet name

@Not0123:
         dex
         beq     PrintCmdrName ;token=4: commander name
         dex
         beq     PrintFuelCash ;token=5: fuel, followed by cash
         dex
         bne     @Not456
         lda     #$80       ;token=6: set text flags to $80
         sta     text_mod_flags
         rts

@Not456: dex
         dex
         bne     @Not8
         stx     text_mod_flags ;token=8: set text flags to $00
         rts

@Not8:   dex
         beq     @PrintMidColon ;token=9: hposn to col 21, output ':'
         cmp     #$60       ;original token >= $60?
         bcs     PrintCannedMsg ;yes, print canned message
         cmp     #$0e       ;< $0e (7/9/a/b/c/d)?
         bcc     @HandleLo  ;yes, print as text (bell, LF, CR, etc)
         cmp     #$20       ;< $20 ($0e-$1f)?
         bcc     @Handle0e_1f ;yes, print as canned
@HandleLo:
         ldx     text_mod_flags ;get the flags
         beq     @DoPrint2  ;none set, print it
         bmi     @L7190     ;high bit set
         bit     text_mod_flags ;check bit 6 (convert-to-lower)
         bvs     @PrintAndClear6 ;bit 7 clear, bit 6 set; print upper then clear bit 6
@L7183:  cmp     #'A'       ;< 'A'?
         bcc     @DoPrint1
         cmp     #'['       ;> 'Z'?
         bcs     @DoPrint1
         adc     #$20       ;convert to lower case
@DoPrint1:
         jmp     PrintChar

@L7190:  bit     text_mod_flags
         bvs     @Bit76Set
         cmp     #'A'       ;< 'A'?
         bcc     @DoPrint2  ;just print it
         pha
         txa                ;get text_mod_flags
         ora     #$40       ;set bit 6, so next char is lower case
         sta     text_mod_flags
         pla
         bne     @DoPrint1  ;(always)
@Handle0e_1f:
         adc     #$72       ;add $72 (now $80-91)
         bne     PrintCannedMsg ;(always)
@PrintMidColon:
         lda     #21
         sta     text_hposn
         jmp     PrintColon

@Bit76Set:
         cpx     #$ff       ;both flags set; is it just $ff?
         beq     Done       ;yes, print nothing
         cmp     #'A'       ;>= 'A'?
         bcs     @L7183     ;conv lower
@PrintAndClear6:
         pha                ;preserve A-reg
         txa                ;get text_mod_flags
         and     #$bf       ;clear bit 6 in the text flags
         sta     text_mod_flags
         pla
@DoPrint2:
         jmp     PrintChar

@PrintCanOrDigram:
         cmp     #$a0       ;outside digram range?
         bcs     CannedStr  ;yes, it's a canned string
         and     #$7f       ;no, pull two chars out of digram table
         asl     A          ; using token value -128 as index
         tay
         lda     flight_digram_tab,y ;first char
         jsr     PrintFlightToken ;print (recursively)
         lda     flight_digram_tab+1,y ;second char
         cmp     #'?'       ;one entry ends with '?'
         beq     Done       ;do nothing
         jmp     PrintFlightToken ;print (tail recursion)

data_ptr .set    $5e
CannedStr:
         sbc     #$a0       ;reduce to canned message index
; 
; Prints a string from the canned flight message table.  The table is filled
; with null-terminated strings, so we need to scan forward to find the one we
; want.
; 
; On entry:
;   A-reg: message index
; 
PrintCannedMsg:
         tax                ;save A-reg
         lda     #<flight_text
         sta     data_ptr
         lda     #>flight_text
         sta     data_ptr+1
         ldy     #$00
         txa                ;restore A-reg
         beq     @PrintStrLoop ;special case entry 0
@ScanLoop:
         lda     (data_ptr),y ;get byte from compressed text
         beq     @StringEnd ;found zero terminator
         iny                ;advance ptr
         bne     @ScanLoop
         inc     data_ptr+1
         bne     @ScanLoop  ;(always)
@StringEnd:
         iny                ;advance string ptr
         bne     @NoInc
         inc     data_ptr+1
@NoInc:  dex                ;dec string index
         bne     @ScanLoop  ;haven't found the right one yet
@PrintStrLoop:
         tya
         pha                ;save current data pointer
         lda     data_ptr+1
         pha
         lda     (data_ptr),y ;get token
         eor     #EOR_FLIGHT ;"decrypt" value
         jsr     PrintFlightToken ;process it
         pla                ;restore data ptr
         sta     data_ptr+1
         pla
         tay
         iny                ;advance to next char
         bne     @NoInc1
         inc     data_ptr+1
@NoInc1: lda     (data_ptr),y ;get next token
         bne     @PrintStrLoop ;if not end of string, loop
Done:    rts

         .byte   $a2
         .byte   $39
         .byte   $b5
         .byte   $00
         .byte   $b4
         .byte   $00
         .byte   $95
         .byte   $00
         .byte   $94
         .byte   $00
         .byte   $e8
         .byte   $d0
         .byte   $f5
         .byte   $60

L7222:   lda     polyobj_vis
         ora     #$a0
         sta     polyobj_vis
         rts

DoExplosion:
         lda     polyobj_vis
         and     #$40
         beq     @L7232
         jsr     @L728F
@L7232:  lda     polyobj_zpos_lo
         sta     $d0
         lda     polyobj_zpos_mi
         cmp     #$20
         bcc     @L7240
         lda     #$fe
         bne     @L7248

@L7240:  asl     $d0
         rol     A
         asl     $d0
         rol     A
         sec
         rol     A
@L7248:  sta     $ad
         ldy     #$01
         lda     (tmp_ptr2),y
         sta     $0301
         adc     #$04
         bcs     L7222
         sta     (tmp_ptr2),y
         jsr     L60CE
         lda     $31
         cmp     #$1c
         bcc     @L7264
         lda     #$fe
         bne     @L726D

@L7264:  asl     $ae
         rol     A
         asl     $ae
         rol     A
         asl     $ae
         rol     A
@L726D:  dey
         sta     (tmp_ptr2),y
         lda     polyobj_vis
         and     #$bf
         sta     polyobj_vis
         and     #$08
         beq     Done
         ldy     #$02
         lda     (tmp_ptr2),y
         tay
@L727F:  lda     $00f9,y
         sta     (tmp_ptr2),y
         dey
         cpy     #$06
         bne     @L727F
         lda     polyobj_vis
         ora     #$40
         sta     polyobj_vis
@L728F:  ldy     #$00
         lda     (tmp_ptr2),y
         sta     $ad
         iny
         lda     (tmp_ptr2),y
         bpl     @L729C
         eor     #$ff
@L729C:  lsr     A
         lsr     A
         lsr     A
         lsr     A
         ora     #$01
         sta     $ac
         iny
         lda     (tmp_ptr2),y
         sta     $bb
         lda     rng_state+1
         pha
         ldy     #$06
@L72AE:  ldx     #$03
@L72B0:  iny
         lda     (tmp_ptr2),y
         sta     $38,x
         dex
         bpl     @L72B0
         sty     $bd
         ldy     #$02
@L72BC:  iny
         lda     (tmp_ptr2),y
         eor     $bd
         sta     $ffff,y
         cpy     #$06
         bne     @L72BC
         ldy     $ac
         sty     $be
@L72CC:  clc
         lda     rng_state
         rol     A
         tax
         adc     rng_state+2
         sta     rng_state
         stx     rng_state+2
         lda     rng_state+1
         tax
         adc     rng_state+3
         sta     rng_state+1
         stx     rng_state+3
         and     #$0c
         ora     #$10
         sta     $35
         lda     $39
         sta     $ae
         lda     $38
         jsr     @L7331
         bne     @L731A
         cpx     #$87
         bcs     @L731A
         stx     $6f
         lda     $3b
         sta     $ae
         lda     $3a
         jsr     @L7331
         bne     @L7307
         lda     $6f
         jsr     DrawColorPixel
@L7307:  dec     $be
         bpl     @L72CC
         ldy     $bd
         cpy     $bb
         bcc     @L72AE
         pla
         sta     rng_state+1
         lda     data_buffer+6
         sta     rng_state+3
         rts

@L731A:  clc
         lda     rng_state
         rol     A
         tax
         adc     rng_state+2
         sta     rng_state
         stx     rng_state+2
         lda     rng_state+1
         tax
         adc     rng_state+3
         sta     rng_state+1
         stx     rng_state+3
         jmp     @L7307

@L7331:  sta     $af
         clc
         lda     rng_state
         rol     A
         tax
         adc     rng_state+2
         sta     rng_state
         stx     rng_state+2
         lda     rng_state+1
         tax
         adc     rng_state+3
         sta     rng_state+1
         stx     rng_state+3
         rol     A
         bcs     @L7355
         jsr     FMLTU
         adc     $ae
         tax
         lda     $af
         adc     #$00
         rts

@L7355:  jsr     FMLTU
         sta     $d0
         lda     $ae
         sbc     $d0
         tax
         lda     $af
         sbc     #$00
         rts

         .byte   $00
         .byte   $02

L7366:   jsr     L7B29
         lda     #$7f
         sta     polyobj_roll
         sta     polyobj_pitch
         lda     $02f2
         and     #$02
         ora     #$80
         jmp     L7545

L7379:   lda     $02bf
         beq     @L739C
         lda     #$00
         sta     player_cargo
         sta     player_cargo+6
         jsr     GetRandom
         and     #$0f
         adc     $02bf
         ora     #$04
         rol     A
         sta     $02bf
         rol     kill_score_rem-1
         bpl     @L739C
         ror     kill_score_rem-1
@L739C:  lsr     player_fug_inno
         jsr     ZeroInfo
         lda     $93
         and     #$03
         adc     #$03
         sta     polyobj_zpos_hi
         ror     A
         sta     INWK+2
         sta     INWK+5
         jsr     L7366
         lda     $95
         and     #$07
         ora     #$81
         sta     polyobj_zpos_hi
         lda     $97
         and     #$03
         sta     INWK+2
         sta     INWK+1
         lda     #$00
         sta     polyobj_roll
         sta     polyobj_pitch
         lda     #$81
         jsr     L7545
L73CD:   lda     displayed_screen
         bne     L73F3
L73D1:   ldy     $e2
@L73D3:  jsr     GetRandom
         ora     #$08
         sta     SCRNHOLE5+4,y
         sta     $b4
         jsr     GetRandom
         sta     $06c8,y
         sta     $6e
         jsr     GetRandom
         sta     $06e2,y
         sta     $6f
         jsr     L4EDC
         dey
         bne     @L73D3
L73F3:   ldx     #$00
@L73F5:  lda     PLAYER_STATE,x
         beq     @L741D
         bmi     @L741A
         sta     $b8
         jsr     GetInfo
         ldy     #$1f
@L7403:  lda     (polyobj_ptr),y
         sta     polyobj_xpos_lo,y
         dey
         bpl     @L7403
         stx     $b0
         jsr     SCAN
         ldx     $b0
         ldy     #$1f
         lda     (polyobj_ptr),y
         and     #$a7
         sta     (polyobj_ptr),y
@L741A:  inx
         bne     @L73F5
@L741D:  ldx     #$00
         stx     $91
         dex
         stx     xcoords
         stx     ycoords
L7428:   ldy     #$c7
         lda     #$00
@L742C:  sta     $0600,y
         dey
         bne     @L742C
         dey
         sty     $d3
         rts

         .byte   $60

L7437:   dex
         rts

L7439:   inx
         beq     L7437
L743C:   dec     $d6
         php
         bne     @L7443
         inc     $d6
@L7443:  plp
         rts

L7445:   jsr     @L74A4
         lda     PLAYER_STATE+11
         bne     @L747E
         jsr     L8274
         jmp     @L7481

@L7453:  asl     A
         tax
         lda     #$00
         ror     A
         tay
         lda     #$14
         sta     $ad
         txa
         jsr     L60CE
         ldx     $31
         tya
         bmi     @L7469
         ldy     #$00
         rts

@L7469:  ldy     #$ff
         txa
         eor     #$ff
         tax
         inx
@L7470:  rts

@L7471:  ldx     #$08
@L7473:  lda     data_buffer+37,x
         sta     $38,x
         dex
         bpl     @L7473
         jmp     L8283

@L747E:  jsr     @L7471
@L7481:  lda     $6e
         jsr     @L7453
         txa
         adc     #$c3
         sta     $02dd
         lda     $6f
         jsr     @L7453
         stx     $d0
         lda     #$94
         sbc     $d0
         sta     $02de
         lda     #$60
         ldx     $70
         bpl     @L74A1
         lsr     A
@L74A1:  sta     L4543
@L74A4:  lda     L4543
         beq     @L7470
         sta     $b4
         lda     $02de
         ldx     $02dd
         jmp     DrawStar

L74B4:   sta     $d0
         ldx     #$00
         ldy     #$08
         lda     (polyobj_ptr),y
         bmi     @L74CD
         lda     $d4
         sbc     $d0
         bcc     @L74C7
         sta     $d4
         rts

@L74C7:  ldx     #$00
         stx     $d4
         bcc     @L74DA

@L74CD:  lda     $d5
         sbc     $d0
         bcc     @L74D6
         sta     $d5
         rts

@L74D6:  ldx     #$00
         stx     $d5
@L74DA:  adc     $d6
         sta     $d6
         beq     @L74E2
         bcs     @L74E5
@L74E2:  jmp     GameOver

@L74E5:  jsr     MakeNoise2
         jmp     OUCH

L74EB:   lda     data_buffer+1,x
         sta     $38,x
         lda     data_buffer+2,x
         tay
         and     #$7f
         sta     $39,x
         tya
         and     #$80
         sta     $3a,x
         rts

L74FE:   jsr     LA019
         ldx     #$81
         stx     polyobj_attack
         ldx     #$00
         stx     polyobj_pitch
         stx     $30
         stx     PLAYER_STATE+1
         dex
         stx     polyobj_roll
         ldx     #$0a
         jsr     L75DD
         jsr     L75DD
         jsr     L75DD
         lda     saved_station_addr
         sta     station_addr
         lda     saved_station_addr+1
         sta     station_addr+1
         lda     $02f2
         cmp     #$0a
         bcc     @L753B
         lda     dodo_addr
         sta     station_addr
         lda     dodo_addr+1
         sta     station_addr+1
@L753B:  lda     #$00
         sta     tmp_ptr2
         lda     #$06
         sta     tmp_ptr2+1
         lda     #$02
L7545:   sta     $d0
         ldx     #$00
@L7549:  lda     PLAYER_STATE,x
         beq     @L7555
         inx
         cpx     #$08
         bcc     @L7549
@L7553:  clc
@L7554:  rts

@L7555:  jsr     GetInfo
         lda     $d0        ;ship type
         bmi     @L75AE
         asl     A
         tay
         lda     hull_addr_hi,y
         beq     @L7553
         sta     hull_ptr+1
         lda     hull_addr_lo,y
         sta     hull_ptr
         cpy     #$04
         beq     @L759E
         ldy     #$05
         lda     (hull_ptr),y
         sta     $06
         lda     $02f3
         sec
         sbc     $06
         sta     tmp_ptr2
         lda     $02f4
         sbc     #$00
         sta     tmp_ptr2+1
         lda     tmp_ptr2
         sbc     polyobj_ptr
         tay
         lda     tmp_ptr2+1
         sbc     polyobj_ptr+1
         bcc     @L7554
         bne     @L7594
         cpy     #$25
         bcc     @L7554
@L7594:  lda     tmp_ptr2
         sta     $02f3
         lda     tmp_ptr2+1
         sta     $02f4
@L759E:  ldy     #$0e
         lda     (hull_ptr),y
         sta     $2f
         ldy     #$13       ;00LLLMMM laser|missile from hull
         lda     (hull_ptr),y
         and     #$07       ;lower 3 bits are number of missiles
         sta     polyobj_vis
         lda     $d0        ;get ship type
@L75AE:  sta     PLAYER_STATE,x
         tax
         bmi     @L75C6
         cpx     #$0f
         beq     @L75C0
         cpx     #$03
         bcc     @L75C3
         cpx     #$0b
         bcs     @L75C3
@L75C0:  inc     PLAYER_STATE+42
@L75C3:  inc     PLAYER_STATE+9,x
@L75C6:  ldy     $d0
         lda     hull_NEWB-1,y
         and     #$6f
         ora     $30
         sta     $30
         ldy     #$24
@L75D3:  lda     polyobj_xpos_lo,y
         sta     (polyobj_ptr),y
         dey
         bpl     @L75D3
         sec
         rts

L75DD:   lda     polyobj_xpos_lo,x
         eor     #$80
         sta     polyobj_xpos_lo,x
         inx
         inx
         rts

L75E6:   ldx     #$ff
L75E8:   stx     missile_thing
         ldx     missile_armed_flag
         jsr     DrawIndicator
         sty     PLAYER_STATE+48
         rts

         .byte   $04
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   $00

L75F9:   lda     polyobj_xpos_lo
         sta     $31
         lda     INWK+1
         sta     $32
         lda     INWK+2
         jsr     L78E3
         bcs     @L7630
         lda     $7a
         adc     #$80
         sta     $38
         txa
         adc     #$00
         sta     $39
         lda     polyobj_ypos_lo
         sta     $31
         lda     INWK+4
         sta     $32
         lda     INWK+5
         eor     #$80
         jsr     L78E3
         bcs     @L7630
         lda     $7a
         adc     #$44
         sta     $46
         txa
         adc     #$00
         sta     $47
         clc
@L7630:  rts

L7631:   lda     $b8        ;ship type
         lsr     A          ;bit 0 -> carry
         bcs     @L7639     ;sun has bit 0 set
         jmp     DrawSunOrPlanet ;wipe planet

@L7639:  jmp     L785B      ;wipe sun

; Draw planet or sun.
; 
; BBC .PLANET (flight code).
Planet:  lda     polyobj_zpos_hi
         cmp     #$30
         bcs     L7631      ;far away, branch
         ora     polyobj_zpos_mi
         beq     L7631      ;very close, branch
         jsr     L75F9      ;"Project K+INWK(x,y)/z to K3,K4 for center to screen"
         bcs     L7631
         lda     #$60       ;radius hi
         sta     $32
         lda     #$00       ;radius lo
         sta     $31
         jsr     L6143      ;"divide 3bytes by 2, K = P(2).A/INWK_z"
         lda     $7b
         beq     @L765E
         lda     #$f8
         sta     $7a
@L765E:  lda     $b8        ;ship type
         lsr     A          ;sun has bit 0 set
         bcc     @Planet    ;planet
         jmp     L767B      ;sun

@Planet: jsr     DrawSunOrPlanet
         jmp     L77A0

L766C:   jmp     L785B

L766F:   txa
         eor     #$ff
         clc
         adc     #$01
         tax
L7676:   lda     #$ff
         jmp     L76C3

L767B:   lda     #$14
         sta     $35
         lda     #$01
         sta     $d3
         jsr     L78A9
         bcs     L766C
         lda     #$00
         ldx     $7a
         cpx     #$60
         rol     A
         cpx     #$28
         rol     A
         cpx     #$10
         rol     A
         sta     $bd
         lda     $cc
         ldx     $33
         bne     @L76A7
         cmp     $32
         bcc     @L76A7
         lda     $32
         bne     @L76A7
         lda     #$01
@L76A7:  sta     $bb
         lda     $cc
         sec
         sbc     $46
         tax
         lda     #$00
         sbc     $47
         bmi     L766F
         bne     @L76BF
         inx
         dex
         beq     L7676
         cpx     $7a
         bcc     L76C3
@L76BF:  ldx     $7a
         lda     #$00
L76C3:   stx     data_ptr
         sta     data_ptr+1
         lda     $7a
         jsr     L5F32
         sta     $c7
         lda     $31
         sta     $c6
         ldy     $cc
         lda     $64
         sta     $62
         lda     $65
         sta     $63
@L76DC:  cpy     $bb
         beq     @L76EB
         lda     $0600,y
         beq     @L76E8
         jsr     L4EC6
@L76E8:  dey
         bne     @L76DC
@L76EB:  lda     data_ptr
         jsr     L5F32
         sta     $d0
         lda     $c6
         sec
         sbc     $31
         sta     $ad
         lda     $c7
         sbc     $d0
         sta     $ae
         sty     $6f
         jsr     TwoByteSqrt
         ldy     $6f
         jsr     GetRandom
         and     $bd
         clc
         adc     $ad
         bcc     @L7712
         lda     #$ff
@L7712:  ldx     $0600,y
         sta     $0600,y
         beq     @L7764
         lda     $64
         sta     $62
         lda     $65
         sta     $63
         txa
         jsr     L7878
         lda     $6e
         sta     $60
         lda     $70
         sta     $61
         lda     $38
         sta     $62
         lda     $39
         sta     $63
         lda     $0600,y
         jsr     L7878
         bcs     @L7749
         lda     $70
         ldx     $60
         stx     $70
         sta     $60
         jsr     DrawHorizLine
@L7749:  lda     $60
         sta     $6e
         lda     $61
         sta     $70
@L7751:  jsr     DrawHorizLine
@L7754:  dey
         beq     @L7796
         lda     data_ptr+1
         bne     @L7778
         dec     data_ptr
         bne     @L76EB
         dec     data_ptr+1
@L7761:  jmp     @L76EB

@L7764:  ldx     $38
         stx     $62
         ldx     $39
         stx     $63
         jsr     L7878
         bcc     @L7751
         lda     #$00
         sta     $0600,y
         beq     @L7754

@L7778:  ldx     data_ptr
         inx
         stx     data_ptr
         cpx     $7a
         bcc     @L7761
         beq     @L7761
         lda     $64
         sta     $62
         lda     $65
         sta     $63
@L778B:  lda     $0600,y
         beq     @L7793
         jsr     L4EC6
@L7793:  dey
         bne     @L778B
@L7796:  clc
         lda     $38
         sta     $64
         lda     $39
         sta     $65
L779F:   rts

L77A0:   jsr     L78A9
         bcs     L779F
         lda     #$00
         sta     xcoords
         ldx     $7a
         lda     #$08
         cpx     #$08
         bcc     @L77B8
         lsr     A
         cpx     #$3c
         bcc     @L77B8
         lsr     A
@L77B8:  sta     $bf
L77BA:   ldx     #$ff
         stx     $bc
         inx
         stx     $bd
@L77C1:  lda     $bd
         jsr     FMLTU2
         ldx     #$00
         stx     $d0
         ldx     $bd
         cpx     #$21
         bcc     @L77DD
         eor     #$ff
         adc     #$00
         tax
         lda     #$ff
         adc     #$00
         sta     $d0
         txa
         clc
@L77DD:  adc     $38
         sta     $9c
         lda     $39
         adc     $d0
         sta     $9d
         lda     $bd
         clc
         adc     #$10
         jsr     FMLTU2
         tax
         lda     #$00
         sta     $d0
         lda     $bd
         adc     #$0f
         and     #$3f
         cmp     #$21
         bcc     @L780B
         txa
         eor     #$ff
         adc     #$00
         tax
         lda     #$ff
         adc     #$00
         sta     $d0
         clc
@L780B:  jsr     L4F8B
         cmp     #$41
         bcs     @L7815
         jmp     @L77C1

@L7815:  clc
         rts

; This is called by the code that draws big circles (sun / planet).
DrawSunOrPlanet:
         ldy     xcoords
         bne     @L7851
@Loop:   cpy     $91
         bcs     @L7851
         lda     ycoords,y
         cmp     #$ff
         beq     @L7842
         sta     $71
         lda     xcoords,y
         sta     $70
         jsr     DrawLine
         iny
         lda     lcoord_swap_flag
         bne     @Loop
         lda     $70
         sta     $6e
         lda     $71
         sta     $6f
         jmp     @Loop

@L7842:  iny
         lda     xcoords,y
         sta     $6e
         lda     ycoords,y
         sta     $6f
         iny
         jmp     @Loop

@L7851:  lda     #$01
         sta     $91
         lda     #$ff
         sta     xcoords
L785A:   rts

L785B:   lda     $d3
         bmi     L785A
         lda     $64
         sta     $62
         lda     $65
         sta     $63
         ldy     #$87
@L7869:  lda     $0600,y
         beq     @L7871
         jsr     L4EC6
@L7871:  dey
         bne     @L7869
         dey
         sty     $d3
         rts

L7878:   sta     $d0
         clc
         adc     $62
         sta     $70
         lda     $63
         adc     #$00
         bmi     @L78A2
         beq     @L788B
         lda     #$ff
         sta     $70
@L788B:  lda     $62
         sec
         sbc     $d0
         sta     $6e
         lda     $63
         sbc     #$00
         bne     @L789A
         clc
         rts

@L789A:  bpl     @L78A2
         lda     #$00
         sta     $6e
         clc
         rts

@L78A2:  lda     #$00
         sta     $0600,y
         sec
         rts

L78A9:   lda     $38
         clc
         adc     $7a
         lda     $39
         adc     #$00
         bmi     L78E1
         lda     $38
         sec
         sbc     $7a
         lda     $39
         sbc     #$00
         bmi     @L78C1
         bne     L78E1
@L78C1:  lda     $46
         clc
         adc     $7a
         sta     $32
         lda     $47
         adc     #$00
         bmi     L78E1
         sta     $33
         lda     $46
         sec
         sbc     $7a
         tax
         lda     $47
         sbc     #$00
         bmi     L7906
         bne     L78E1
         cpx     $cc
         rts

L78E1:   sec
         rts

L78E3:   jsr     L6143
         lda     $7d
         and     #$7f
         ora     $7c
         bne     L78E1
         ldx     $7b
         cpx     #$04
         bcs     L7907
         lda     $7d
         bpl     L7907
         lda     $7a
         eor     #$ff
         adc     #$01
         sta     $7a
         txa
         eor     #$ff
         adc     #$00
         tax
L7906:   clc
L7907:   rts

L7908:   jsr     GetInput
         cmp     #$59
         beq     L7907
         cmp     #$4e
         bne     L7908
         clc
         rts

; 
; Processes all input.  Flight controls update appropriate values in zero page. 
; Non-flight keys are returned in the caller.
; 
; On exit:
;   A-reg: non-flight key hit, or $00 if none
; 
GetGameInput:
         lda     displayed_screen ;looking at space?
         bne     @L791E     ;no, branch
         jsr     HandleFlightInput
         txa
         rts

@L791E:  jsr     HandleFlightInput
         lda     ptb_joy_enab
         beq     @L7937
         lda     pitch_velocity
         jsr     @L7968
         tay
         lda     roll_velocity
         eor     #$ff
         jsr     @L7968
         tax
         lda     input_raw_key
         rts

@L7937:  lda     #$00
         sta     cmd_fire_mssl
         sta     cmd_local_jump
         lda     input_raw_key
         ldx     #$00
         ldy     #$00
         cmp     #$08
         beq     @L794B
         cmp     #$4a
         bne     @L794C
@L794B:  dex
@L794C:  cmp     #$15
         beq     @L7954
         cmp     #$4b
         bne     @L7955
@L7954:  inx
@L7955:  cmp     #$0a
         beq     @L795D
         cmp     #$4d
         bne     @L795E
@L795D:  dey
@L795E:  cmp     #$0b
         beq     @L7966
         cmp     #$49
         bne     @L7967
@L7966:  iny
@L7967:  rts

@L7968:  lsr     A
         lsr     A
         lsr     A
         lsr     A
         lsr     A
         adc     #$00
         sbc     #$03
         rts

L7972:   lda     $31
         sta     $02f3
         lda     $32
         sta     $02f4
         rts

L797D:   ldx     $b0
         jsr     @L79D6
         ldx     $b0
         jmp     L47B2

@L7987:  jsr     ZeroInfo
         jsr     L7428
         sta     PLAYER_STATE+1
         sta     PLAYER_STATE+11
         jsr     LA019
         lda     #$06
         sta     INWK+5
         lda     #$81
         jmp     L7545

@L799F:  ldx     #$ff
@L79A1:  inx
         lda     PLAYER_STATE,x
         beq     L7972
         cmp     #$01
         bne     @L79A1
         txa
         asl     A
         tay
         lda     L4E7E,y
         sta     $0a
         lda     L4E7F,y
         sta     $0b
         ldy     #$20
         lda     ($0a),y
         bpl     @L79A1
         and     #$7f
         lsr     A
         cmp     $c0
         bcc     @L79A1
         beq     @L79D0
         sbc     #$01
         asl     A
         ora     #$80
         sta     ($0a),y
         bne     @L79A1

@L79D0:  lda     #$00
         sta     ($0a),y
         beq     @L79A1

@L79D6:  stx     $c0
         lda     missile_thing
         cmp     $c0
         bne     @L79E8
         ldy     #$08
         jsr     L75E6
         lda     #$c8       ;"Target Lost"
         jsr     PrintMessageBriefly
@L79E8:  ldy     $c0
         ldx     PLAYER_STATE,y
         cpx     #$02
         beq     @L7987
         cpx     #$1f
         bne     @L7A00
         lda     $028f
         ora     #$02
         sta     $028f
         inc     kill_score+1
@L7A00:  cpx     #$0f
         beq     @L7A0C
         cpx     #$03
         bcc     @L7A0F
         cpx     #$0b
         bcs     @L7A0F
@L7A0C:  dec     PLAYER_STATE+42
@L7A0F:  dec     PLAYER_STATE+9,x
         ldx     $c0
         ldy     #$05
         lda     (hull_ptr),y
         ldy     #$21
         clc
         adc     (polyobj_ptr),y
         sta     $31
         iny
         lda     (polyobj_ptr),y
         adc     #$00
         sta     $32
@L7A26:  inx
         lda     PLAYER_STATE,x
         sta     PLAYER_STATE-1,x
         bne     @L7A32
         jmp     @L799F

@L7A32:  asl     A
         tay
         lda     hull_addr_lo,y
         sta     $0a
         lda     hull_addr_hi,y
         sta     $0b
         ldy     #$05
         lda     ($0a),y
         sta     $d0
         lda     $31
         sec
         sbc     $d0
         sta     $31
         lda     $32
         sbc     #$00
         sta     $32
         txa
         asl     A
         tay
         lda     L4E7E,y
         sta     $0a
         lda     L4E7F,y
         sta     $0b
         ldy     #$24
         lda     ($0a),y
         sta     (polyobj_ptr),y
         dey
         lda     ($0a),y
         sta     (polyobj_ptr),y
         dey
         lda     ($0a),y
         sta     $7b
         lda     $32
         sta     (polyobj_ptr),y
         dey
         lda     ($0a),y
         sta     $7a
         lda     $31
         sta     (polyobj_ptr),y
         dey
@L7A7C:  lda     ($0a),y
         sta     (polyobj_ptr),y
         dey
         bpl     @L7A7C
         lda     $0a
         sta     polyobj_ptr
         lda     $0b
         sta     polyobj_ptr+1
         ldy     $d0
@L7A8D:  dey
         lda     ($7a),y
         sta     ($31),y
         tya
         bne     @L7A8D
         beq     @L7A26

L7A97:   ldx     ship_state2
         dex
         bne     @L7AAB
         lda     $0290
         cmp     #$90
         bne     @L7AAB
         lda     $0291
         cmp     #$21
         beq     @L7AAC
@L7AAB:  clc
@L7AAC:  rts

; C64 _83ca "clear ships slots and some other data?"
ClearStuff:
         jsr     ZeroPlayerState ;leaves $00 in A-reg
         ldx     #$06
@L7AB2:  sta     $66,x      ;pitch, roll, ...
         dex
         bpl     @L7AB2
         stx     ptb_joy_y_flip ;store $FF
         txa
         sta     docked_flag
         ldx     #$02
@L7ABF:  sta     $d4,x
         dex
         bpl     @L7ABF
RES2:    lda     #$0c       ;BBC .RES2
         sta     $e2
         ldx     #$ff
         stx     xcoords
         stx     ycoords
         stx     missile_thing
         lda     #$80
         sta     pitch_velocity
         sta     $6c
         sta     $a7
         asl     A
         sta     $66
         sta     $67
         sta     $6d
         sta     $a8
         sta     $b6
         lda     #$03
         sta     player_speed
         sta     $b9
         sta     $6b
         lda     #$00
         sta     $cb
         lda     #$87
         sta     $cc
         lda     PLAYER_STATE+11
         beq     @L7AFD
         jsr     LA019
@L7AFD:  lda     ecm_active_flag
         beq     @L7B04
         jsr     L9512
@L7B04:  jsr     L73F3
         jsr     ZeroPlayerState
         lda     #$5f
         sta     $02f3
         lda     #$0b
         sta     $02f4
ZeroInfo:
         ldy     #$24       ;BBC ZINF
         lda     #$00
@L7B18:  sta     polyobj_xpos_lo,y
         dey
         bpl     @L7B18
         lda     #$60
         sta     $1e
         sta     $22
         ora     #$80
         sta     polyobj_mox2_hi
         rts

L7B29:   ldx     #$04
@L7B2B:  cpx     missile_armed_flag
         beq     @L7B39
         ldy     #$00
         jsr     DrawIndicator
         dex
         bne     @L7B2B
         rts

@L7B39:  ldy     #$08
         jsr     DrawIndicator
         dex
         bne     @L7B39
         rts

L7B42:   lda     displayed_screen
         bne     @L7B54
         lda     in_flight_msg_token
         jsr     PrintMessageBriefly
         lda     #$00
         sta     PLAYER_STATE+54
         jmp     L7BC7

@L7B54:  jsr     ClearLines
         jmp     L7BC7

L7B5A:   jsr     ZeroInfo
         jsr     GetRandom
         sta     $06
         and     #$80
         sta     INWK+2
         txa
         and     #$80
         sta     INWK+5
         lda     #$19
         sta     INWK+1
         sta     INWK+4
         sta     polyobj_zpos_mi
         txa
         cmp     #$f5
         rol     A
         ora     #$c0
         sta     polyobj_attack
SaveScramble:
         clc
; 
; Generate a random number.
; 
; Used for various things, notably the programmatically generated planet data.
; 
; On exit:
;   A-reg: random number (0-255)
; 
GetRandom:
         lda     rng_state
         rol     A
         tax
         adc     rng_state+2
         sta     rng_state
         stx     rng_state+2
         lda     rng_state+1
         tax
         adc     rng_state+3
         sta     rng_state+1
         stx     rng_state+3
         rts

L7B90:   jsr     GetRandom
         lsr     A
         sta     polyobj_attack
         sta     polyobj_roll
         rol     polyobj_vis
         and     #$1f
         ora     #$10
         sta     polyobj_vertex_lo
         jsr     GetRandom
         bmi     @L7BAF
         lda     polyobj_attack
         ora     #$c0       ;active | target
         sta     polyobj_attack
         ldx     #$10
         stx     $30
@L7BAF:  and     #$02
         adc     #$0b
         cmp     #$0f
         beq     L7BBA
         jsr     L7545
L7BBA:   jsr     UpdateShipControls
         dec     PLAYER_STATE+54
         beq     L7B42
         bpl     L7BC7
         inc     PLAYER_STATE+54
L7BC7:   dec     $b6
         beq     @L7BCE
@MainLoop_jmp:
         jmp     MainLoop

@L7BCE:  lda     witch_space_flag ;in witch space?
         bne     @MainLoop_jmp ;yes, skip this
         jsr     GetRandom
         cmp     #$23
         bcs     @L7C2F
         lda     PLAYER_STATE+42
         cmp     #$03
         bcs     @L7C2F
         jsr     ZeroInfo
         lda     #$26
         sta     polyobj_zpos_mi
         jsr     GetRandom
         sta     polyobj_xpos_lo
         stx     polyobj_ypos_lo
         and     #$80
         sta     INWK+2
         txa
         and     #$80
         sta     INWK+5
         rol     INWK+1
         rol     INWK+1
         jsr     GetRandom
         bvs     L7B90
         ora     #$6f
         sta     polyobj_roll
         lda     PLAYER_STATE+11
         bne     @L7C2F
         txa
         bcs     @L7C15
         and     #$1f
         ora     #$10
         sta     polyobj_vertex_lo
         bcc     @L7C19

@L7C15:  ora     #$7f
         sta     polyobj_pitch
@L7C19:  jsr     GetRandom
         cmp     #$fc
         bcc     @L7C26
         lda     #$0f
         sta     polyobj_attack
         bne     @L7C2C

@L7C26:  cmp     #$0a
         and     #$01
         adc     #$05
@L7C2C:  jsr     L7545
@L7C2F:  lda     PLAYER_STATE+11
         beq     @L7C37
@L7C34:  jmp     MainLoop

@L7C37:  jsr     CountIllegalCargo
         asl     A
         ldx     PLAYER_STATE+25
         beq     @L7C43
         ora     player_fug_inno
@L7C43:  sta     $d0
         jsr     L7B5A
         cmp     #$88
         beq     @L7C72
         cmp     $d0
         bcs     @L7C55
         lda     #$10
         jsr     L7545
@L7C55:  lda     PLAYER_STATE+25
         bne     @L7C34
         dec     PLAYER_STATE+53
         bpl     @L7C34
         inc     PLAYER_STATE+53
         lda     $028f
         and     #$0c
         cmp     #$08
         bne     @L7C75
         jsr     GetRandom
         cmp     #$c8
         bcc     @L7C75
@L7C72:  jsr     L6D6F
@L7C75:  jsr     GetRandom
         ldy     $02f1
         beq     @L7C88
         cmp     #$5a
         bcs     @L7C34
         and     #$07
         cmp     $02f1
         bcc     @L7C34
@L7C88:  jsr     L7B5A
         cmp     #$64
         bcs     @L7CC5
         inc     PLAYER_STATE+53
         and     #$03
         adc     #$18
         tay
         jsr     L7A97
         bcc     @L7CAD
         lda     #$f9
         sta     polyobj_attack
         lda     $028f
         and     #$03
         lsr     A
         bcc     @L7CAD
         ora     PLAYER_STATE+40
         beq     @L7CBD
@L7CAD:  lda     #$04
         sta     $30
         jsr     GetRandom
         cmp     #$c8
         rol     A
         ora     #$c0
         sta     polyobj_attack
         tya
         .byte   $2c
@L7CBD:  lda     #$1f
         jsr     L7545
         jmp     MainLoop

@L7CC5:  and     #$03
         sta     PLAYER_STATE+53
         sta     $b5
@L7CCC:  jsr     GetRandom
         sta     $d0
         jsr     GetRandom
         and     $d0
         and     #$07
         adc     #$11
         jsr     L7545
         dec     $b5
         bpl     @L7CCC
; 
; This appears to be the main game play loop while in space.
; 
; The BBC Micro and C64 versions are similar but different.  For example, the
; C64 version has additional code to handle "trumbles" (a non-infringing species
; of tribble).
; 
MainLoop:
         ldx     #$ff       ;reset the stack pointer
         txs
         ldx     player_laser_temp ;cool the lasers
         beq     @Cold
         dec     player_laser_temp
@Cold:   ldx     main_dec2_thing
         beq     @Was0
         dex
         beq     @Was1
         dex
@Was1:   stx     main_dec2_thing
@Was0:   jsr     DrawHud
         lda     displayed_screen ;viewing space?
         beq     @NoDelay   ;yes
         and     ptb_pausecmd_x
         lsr     A          ;check the low bit (set for planet info screen?)
         bcs     @NoDelay   ;set, don't delay
         ldy     #$02       ;this seems to slow things down when you're in
         jsr     LongDelay  ; space but not looking at space
@NoDelay:
         jsr     GetGameInput
FromGameInit:
         jsr     HandleNonFlightKey
         lda     docked_flag ;docked?
         beq     @CheckStuff ;no, check some stuff
         jmp     MainLoop

@CheckStuff:
         jmp     L7BBA

HandleNonFlightKey:
         cmp     #'9'
         bne     @Not9
         jmp     ShipStatusScreen

@Not9:   cmp     #'5'
         bne     @Not5
         jmp     GalacticChartScreen

@Not5:   cmp     #'6'
         bne     @Not6
         jmp     LocalChartScreen

@Not6:   cmp     #'7'
         bne     @Not7
         jsr     L6A9E
         jmp     SystemDataScreen

@Not7:   cmp     #'0'
         bne     @Not0
         jmp     CargoListScreen

@Not0:   cmp     #'8'
         bne     @Not8
         jmp     LocalMarketScreen

@Not8:   cmp     #'1'
         bne     @Not1
         jmp     LaunchOrLook

@Not1:   bit     docked_flag ;are we docked?
         bpl     @NotDocked ;no, skip these
         cmp     #'4'
         bne     @Not4
         jmp     DockEquipShip ;equip ship

@Not4:   cmp     #'2'
         bne     @Not2
         jmp     DockBuyCargo

@Not2:   cmp     #'I'
         bne     @L7D6F
         jsr     FileAccessMenu
         bcc     @L7D6C
         jmp     L7EF8

@L7D6C:  jmp     L7F2D

@L7D6F:  cmp     #'3'
         bne     @L7D8D
         jmp     DockSellCargo

@NotDocked:
         cmp     #'2'
         beq     @View2
         cmp     #'3'
         beq     @View3
         cmp     #'4'
         bne     @L7D8D
         ldx     #$03
         .byte   $2c
@View3:  ldx     #$02
         .byte   $2c
@View2:  ldx     #$01
         jmp     SetViewDirection

@L7D8D:  lda     input_raw_key
         cmp     #'H'
         bne     @NotH
         jmp     L6B46      ;hyperspace

@NotH:   cmp     #'G'
         bne     @NotG
         jmp     L6B46      ;intergalactic travel

@NotG:   cmp     #'D'
         beq     ShowDistToPlanet
         cmp     #'F'
         bne     @NotF
; 'F': find planet by name (while looking at charts)
         lda     docked_flag
         beq     L7DEE
         lda     displayed_screen
         and     #$c0
         beq     L7DEE
         jmp     L5765

@NotF:   sta     $06
         lda     displayed_screen
         and     #$c0
         beq     @L7DD0
         lda     $69
         bne     @L7DD0
         lda     $06
         cmp     #$4f
         bne     @L7DCD
         jsr     L6960
         jsr     L638B
         jmp     L6960

@L7DCD:  jsr     L6937
@L7DD0:  lda     $69
         beq     L7DEE
         dec     $68
         bne     L7DEE
         ldx     $69
         dex
         jsr     L6C03
         lda     #$05
         sta     $68
         ldx     $69
         jsr     L6C03
         dec     $69
         bne     L7DEE
         jmp     L6DB0

L7DEE:   rts

; 'D' key hit (distance to system under crosshairs)
ShowDistToPlanet:
         lda     displayed_screen
         and     #$c0
         beq     L7DEE
         jsr     L705B
         jsr     PrintSelPlanet
         lda     #$80
         sta     text_mod_flags
         lda     #$0c
         jsr     PrintChar
         jmp     L6445

; BBC .BAD "Legal status from Cargo scan"
CountIllegalCargo:
         lda     player_cargo+3 ;slaves
         clc
         adc     player_cargo+6 ;narcotics
         asl     A          ;double penalty for slaves/narcotics
         adc     player_cargo+10 ;firearms
         rts

L7E13:   lda     #$e0
L7E15:   cmp     INWK+1
         bcc     @L7E1F
         cmp     INWK+4
         bcc     @L7E1F
         cmp     polyobj_zpos_mi
@L7E1F:  rts

L7E20:   ora     INWK+1
         ora     INWK+4
         ora     polyobj_zpos_mi
         rts

L7E27:   .byte   $00
         .byte   $ce
         .byte   $27
         .byte   $7e
         .byte   $a2
         .byte   $ff
         .byte   $9a
         .byte   $20
         .byte   $67
         .byte   $82
         .byte   $a8
         .byte   $a9
         .byte   $07
         .byte   $20
         HiAscii "f H1}Px"
         .byte   $4c
         .byte   $de
         .byte   $7e

GameOver:
         ldy     #$d2
         jsr     L9571
         jsr     RES2
         asl     player_speed
         asl     player_speed
         lda     #$00
         jsr     PrintFlightHud
         jsr     L73D1
         lda     #$0c
         sta     text_hposn
         sta     text_vposn
         lda     #$92       ;"GAME OVER"
         jsr     PrintCannedMsg
@L7E5E:  jsr     L7B5A
         lsr     A
         lsr     A
         sta     polyobj_xpos_lo
         ldy     #$00
         sty     INWK+1
         sty     INWK+4
         sty     polyobj_zpos_mi
         sty     polyobj_attack
         dey
         sty     $b6
         eor     #$2a
         sta     polyobj_ypos_lo
         ora     #$50
         sta     polyobj_zpos_lo
         txa
         and     #$8f
         sta     polyobj_roll
         ldy     #$40
         sty     main_dec2_thing
         sec
         ror     A
         and     #$87
         sta     polyobj_pitch
         ldx     #$05
         lda     plate_addr+1
         beq     @L7E94
         bcc     @L7E94
         dex
@L7E94:  jsr     L5C29
         jsr     GetRandom
         and     #$80
         ldy     #$1f
         sta     (polyobj_ptr),y
         lda     PLAYER_STATE+4
         beq     @L7E5E
         lda     #$00
         sta     player_speed
         jsr     UpdateShipControls
@L7EAC:  jsr     UpdateShipControls
         dec     main_dec2_thing
         bne     @L7EAC
         jmp     RestartGame

saved_station_addr:
         .byte   $88
         .byte   $88

; 
; Finishes initialization and falls into the welcome screen.
; 
InitGame:
         ldx     #$1d
         lda     #$00
@Loop:   sta     L4543,x    ;zero out $4543-4560
         dex                ;(pause-mode toggles + other stuff)
         bpl     @Loop
         lda     station_addr
         sta     saved_station_addr
         lda     station_addr+1
         sta     saved_station_addr+1
         jsr     InitPlayerData ;reset player save data to default
         ldx     #$ff       ;reset system stack
         txs
         jsr     ClearStuff
; 
; Welcome screen.  We get here after initialization completes, or when ESC is
; hit in the pause menu.
; 
RestartGame:
         ldx     #$ff
         txs
         jsr     RES2
         jsr     ResetInputs
         lda     #$03
         sta     text_hposn
         ldx     #11        ;11 == Cobra Mk III
         lda     #$06       ;"Load New Commander (Y/N)?"
         ldy     #$fa
         jsr     GameStartScreen
         cpx     #'Y'
         bne     L7EF8
         jsr     L7F36
         jsr     FileAccessMenu
L7EF8:   jsr     L7F36
         jsr     L7B29
         lda     #$07       ;"Press space or fire, commander."
         ldx     #17        ;17 = Sidewinder
         ldy     #$4b
         jsr     GameStartScreen
         jsr     L638B
         jsr     L6A9E
         jsr     L6BF8
         ldx     #$05
@L7F12:  lda     $92,x
         sta     $02f5,x
         dex
         bpl     @L7F12
         inx
         stx     PLAYER_STATE+53
         lda     $d7
         sta     $02ef
         lda     $d9
         sta     $02f2
         lda     $d8
         sta     $02f1
L7F2D:   lda     #$ff
         sta     docked_flag
         lda     #$39
         jmp     FromGameInit

L7F36:   ldx     #$54
@L7F38:  lda     commander_name-1,x
         sta     $0286,x
         dex
         bne     @L7F38
         stx     displayed_screen
@L7F43:  jsr     L8029
         cmp     scramble_thing+1
         bne     @L7F43
         eor     #$a9
         tax
         lda     ship_state1
         cpx     scramble_thing-1
         beq     @L7F58
         ora     #$80
@L7F58:  ora     #$08
         sta     ship_state1
         jsr     L8037
         cmp     scramble_thing
         bne     @L7F43
         rts

GameStartScreen:
         sty     intro_parameter ;Z distance?
         pha                ;docked string token; save for later
         stx     $b8        ;ship type
         lda     #$ff
         sta     unused_thing1
         jsr     ClearStuff
         lda     #$00
         sta     unused_thing1
         jsr     ResetInputs
         lda     #$0d
         jsr     PrintFlightHud
         lda     #$00
         sta     displayed_screen
         lda     #$60
         sta     polyobj_mox2_hi
         lda     #$60
         sta     polyobj_zpos_mi
         ldx     #$7f
         stx     polyobj_roll
         stx     polyobj_pitch
         inx
         stx     text_mod_flags ;set to $80
         lda     $b8
         jsr     L7545
         lda     #$06
         sta     text_hposn
         lda     #$1e       ;"---- E L I T E ----"
         jsr     PrintTokFF
         lda     #$0a
         jsr     PrintChar
         lda     #$06
         sta     text_hposn
         lda     ptb_pausecmd_x ;check pause-X flag
         beq     @NotX      ;not set, branch
         lda     #$0d       ;"By D.Braben & I.Bell"
         jsr     PrintDockedStr ;draw a second copy of author's names
@NotX:   lda     L7E27
         beq     @L7FD1
         inc     L7E27
         lda     #$07
         sta     text_hposn
         lda     #$09
         sta     text_vposn
         ldy     #$00
@loop:   jsr     OutputChar
         iny
         lda     ($fd),y
         bne     @loop
@L7FD1:  ldy     #$00
         sty     player_speed
         sty     ptb_joy_enab
         lda     #14
         sta     text_vposn
         lda     #1
         sta     text_hposn
         pla                ;A=reg = $06 or $07
         jsr     PrintDockedStr
         lda     #$03
         sta     text_hposn
         lda     #$0c       ;"(C) D.Braben & I.Bell 1985"
         jsr     PrintDockedStr
         lda     #$0c
         sta     $be
         lda     #$05
         sta     $b6
; Animate the ship.
@WaitLoop:
         lda     polyobj_zpos_mi
         cmp     #$01
         beq     @NoDec
         dec     polyobj_zpos_mi
@NoDec:  jsr     MVEIT
         ldx     intro_parameter
         stx     polyobj_zpos_lo
         lda     $b6        ;?
         and     #$03       ;?
         lda     #$00
         sta     polyobj_xpos_lo
         sta     polyobj_ypos_lo
         jsr     DrawObject
         jsr     CheckForInput
         dec     $b6
         lda     BUTN0      ;check to see if either joystick button was hit
         ora     BUTN1
         and     joystick_found_nr ;ignore if joystick not found earlier (which it never
         bmi     EnableJoystick ; (is, because the code to find it isn't called)
         bcc     @WaitLoop  ;no key hit, loop
         rts

EnableJoystick:
         dec     ptb_joy_enab
         rts

L8029:   ldx     #$49
         clc
         txa
@L802D:  adc     save_game_state,x
         eor     save_game_state+1,x
         dex
         bne     @L802D
         rts

L8037:   ldx     #$49
         clc
         txa
@L803B:  stx     $d0
         eor     $d0
         ror     A
         adc     save_game_state,x
         eor     save_game_state+1,x
         dex
         bne     @L803B
         rts

InitPlayerData:
         ldy     #97
@Loop:   lda     commander_jameson,y
         sta     commander_name,y
         dey
         bpl     @Loop
         ldy     #$07
         sty     LoadSavedGame-1
         rts

L805B:   ldx     #$00
@L805D:  lda     INWK+5,x
         cmp     #$0d
         beq     @L806B
         sta     disk_filename,x
         inx
         cpx     #$07
         bcc     @L805D
@L806B:  lda     #$20
@L806D:  sta     disk_filename,x
         inx
         cpx     #$1e
         bcc     @L806D
         rts

L8076:   ldx     #$07
         lda     L81E9
         sta     LoadSavedGame-1
@L807E:  lda     INWK+5,x
         sta     commander_name,x
         dex
         bpl     @L807E
L8086:   ldx     #$07
@L8088:  lda     commander_name,x
         sta     INWK+5,x
         dex
         bpl     @L8088
         rts

L8091:   ldx     #$04
@L8093:  lda     L4D80,x
         sta     polyobj_xpos_lo,x
         dex
         bpl     @L8093
         lda     #$07
         sta     max_cmdr_name_len
         lda     #$08
         jsr     PrintDockedStr
         jsr     InputName
         lda     #$09
         sta     max_cmdr_name_len
         tya
         beq     L8086
         sty     L81E9
         rts

; 
; Enter a name, for the commander or a planet.
; 
InputName:
         ldy     #$08
         jsr     LongDelay
         jsr     ClearKbdStrb
         ldy     #$00
@Loop:   jsr     GetInput1
         cmp     #$0d       ;enter
         beq     @Accept
         cmp     #$1b       ;esc
         beq     @Cancel
         cmp     #$7f       ;delete
         beq     @Backspace
         cpy     max_cmdr_name_len
         bcs     @BadKey
         cmp     cmdr_name_min_char
         bcc     @BadKey
         cmp     cmdr_name_max_char
         bcs     @BadKey
         sta     INWK+5,y
         iny
         .byte   $2c
@BadKey: lda     #$07       ;bell
@L80E3:  jsr     OutputChar
         bcc     @Loop      ;(always?)
@Accept: sta     INWK+5,y
         lda     #$0c
         jmp     OutputChar

@Cancel: sec
         rts

@Backspace:
         tya                ;already at start of name?
         beq     @BadKey    ;yes, just beep
         dey
         lda     #$7f       ;print a DEL
         bne     @L80E3     ;(always)

         .byte   $11
         .byte   $00
max_cmdr_name_len:
         .byte   $09        ;max 9 chars
cmdr_name_min_char:
         .byte   '!'
cmdr_name_max_char:
         .byte   '{'

PrintDiskTape:
         lda     #$03       ;"tape"
         clc
         adc     ptb_pausecmd_t ;--> 3 or 2
         jmp     PrintDockedStr

PrintTapeDisk:
         lda     #$02       ;"disk"
         sec
         sbc     ptb_pausecmd_t ;--> 2 or 3
         jmp     PrintDockedStr

ZeroPlayerState:
         ldx     #55
         lda     #$00
@Loop:   sta     PLAYER_STATE,x
         dex
         bpl     @Loop
         rts

         .byte   $60
         .byte   $a2
         .byte   $0c
         .byte   $20
         .byte   $23
         .byte   $81
         .byte   $ca
         .byte   $a0
         .byte   $00
         .byte   $84
         .byte   $0a
         .byte   $a9
         .byte   $00
         .byte   $86
         .byte   $0b
         .byte   $91
         .byte   $0a
         .byte   $c8
         .byte   $d0
         .byte   $fb
         .byte   $60

txt_ptr  .set    $6e
FileAccessMenu:
         lda     #$01       ;"disk access menu ..."
         jsr     PrintDockedStr
         jsr     GetInput
         cmp     #'1'
         beq     LoadGame
         cmp     #'2'
         beq     SaveGame
         cmp     #'3'
         bne     @Return
         lda     #$e0       ;reset to default game
         jsr     PrintDockedStr
         jsr     L7908
         bcc     @Return
         jsr     InitPlayerData
         jmp     L7F36

@Return: clc
         rts

LoadGame:
         jsr     L8091
         jsr     LoadSavedGame
         jsr     L8076
         sec
         rts

SaveGame:
         jsr     L8091
         jsr     L8076
         lsr     $02d8
         lda     #$04
         jsr     PrintDockedStr
         ldx     #$4c
@Loop:   lda     $028f,x
         sta     save_game_state+1,x
         dex
         bpl     @Loop
         jsr     L8037
         sta     scramble_thing
         jsr     L8029
         sta     scramble_thing+1
         pha
         ora     #$80
         sta     $7a
         eor     ship_state1
         sta     $7c
         eor     player_credits+2
         sta     $7b
         eor     #$5a
         eor     kill_score+1
         sta     $7d
         clc
         jsr     PrintNumber
         jsr     PrintFF
         jsr     PrintFF
         pla
         eor     #$a9
         sta     scramble_thing-1
         jsr     L805B
         ldy     #$4c
@Loop1:  lda     save_game_state+1,y
         sta     scram_save_data+20,y
         dey
         bpl     @Loop1
         jsr     DiskSaveGame
         bcs     SaveFail
         jsr     L7F36
         jsr     GetInput
         clc
         rts

SaveFail:
         asl     A          ;error code in A-reg (1-5)
         tax
         lda     disk_err_msgs-2,x
         sta     txt_ptr
         lda     disk_err_msgs-1,x
         sta     txt_ptr+1
         ldy     #$00
@Loop:   lda     (txt_ptr),y
         beq     @StrEnd
         jsr     PrintChar
         iny
         bne     @Loop
@StrEnd: jsr     Noise1
         jsr     GetInput
         jmp     FileAccessMenu

L81E9:   .byte   $07
         .byte   $07

LoadSavedGame:
         jsr     L805B
         jsr     DiskLoadGame
         bcs     SaveFail
         jsr     UnscrambleSaveData
         lda     scram_save_data+20
         bmi     @L8208
         ldy     #$4c
@Loop:   lda     scram_save_data+20,y
         sta     save_game_state+1,y
         dey
         bpl     @Loop
         sec
         rts

@L8208:  lda     #$09
         jsr     PrintDockedStr
         jsr     GetInput
         jmp     FileAccessMenu

T8213:   .asciiz "DISK WRITE PROTECTED"
T8228:   .asciiz "DISK FULL"
T8232:   .asciiz "CATALOG FULL"
T823F:   .asciiz "DISK I/O ERROR"
T824E:   .asciiz "FILE NOT FOUND"
disk_err_msgs:
         .word   T8213
         .word   T8228
         .word   T8232
         .word   T823F
         .word   T824E
         .byte   $60
         .byte   $60

ResetInputs:
         lda     #$00
         ldx     #$10
@L826D:  sta     input_raw_key,x
         dex
         bpl     @L826D
         rts

         .byte   $60

L8274:   ldx     #$00
         jsr     L74EB
         ldx     #$03
         jsr     L74EB
         ldx     #$06
         jsr     L74EB
L8283:   lda     $38
         ora     $3b
         ora     $3e
         ora     #$01
         sta     $41
         lda     $39
         ora     $3c
         ora     $3f
@L8293:  asl     $41
         rol     A
         bcs     L82A6
         asl     $38
         rol     $39
         asl     $3b
         rol     $3c
         asl     $3e
         rol     $3f
         bcc     @L8293
L82A6:   lda     $39
         lsr     A
         ora     $3a
         sta     txt_ptr
         lda     $3c
         lsr     A
         ora     $3d
         sta     txt_ptr+1
         lda     $3f
         lsr     A
         ora     $40
         sta     $70
L82BB:   lda     txt_ptr
         jsr     L5F30
         sta     $ae
         lda     $31
         sta     $ad
         lda     txt_ptr+1
         jsr     L5F30
         sta     $d0
         lda     $31
         adc     $ad
         sta     $ad
         lda     $d0
         adc     $ae
         sta     $ae
         lda     $70
         jsr     L5F30
         sta     $d0
         lda     $31
         adc     $ad
         sta     $ad
         lda     $d0
         adc     $ae
         sta     $ae
         jsr     TwoByteSqrt
         lda     txt_ptr
         jsr     L8681
         sta     txt_ptr
         lda     txt_ptr+1
         jsr     L8681
         sta     txt_ptr+1
         lda     $70
         jsr     L8681
         sta     $70
         rts

; 
; Reads a paddle.
; 
; On entry:
;   X-reg: paddle # (0 or 1)
; 
; On exit:
;   X-reg: (unchanged)
;   Y-reg: paddle reading
;   A-reg: paddle reading (possibly modified)
; 
ReadPaddle:
         lda     PADDL0,x
         bmi     ReadPaddle ;let it settle
         ldy     PTRIG      ;reset the timer
         ldy     #$00
         nop
         nop
@Loop:   lda     PADDL0,x   ;test current value
         bpl     @Done      ;done
         iny
         bne     @Loop
         dey
@Done:   tya
         eor     ptb_joy_axis_flip ;invert both axes
         rts

; 
; Checks for input from the keyboard and/or joystick.
; 
; On exit:
;   $80: key hit, or $00 if none
;   A-reg/X-reg: same as $80
;   $81-90: bool 00/ff: command N issued
;   P-flags set (N/V/Z) according to Acc, (C) set if key was hit
; 
CheckForInput:
         tya
         pha
         jsr     ResetInputs
         clc
         lda     KBD        ;was a key hit?
         bpl     @NoKeyHit  ;no, check the next thing
         bit     KBDSTRB    ;clear input
         and     #$7f       ;clear hi bit
         sta     input_raw_key ;save for later
         ldx     #$10
@CheckKey:
         cmp     flight_key_cmds-1,x ;does it match one of the flight control keys?
         bne     @NotMatch  ;no, branch
         dec     input_raw_key,x ;set $8x to $FF to indicate key hit
@NotMatch:
         dex
         bne     @CheckKey
         sec                ;set carry to indicate key hit
@NoKeyHit:
         lda     ptb_joy_enab
_set_by_init:
         bpl     @NoPaddle  ;init code changes branch to $30==$8373
         ldx     computer_dock_flag ;is computer driving the ship?
         bne     @NoPaddle  ;yup, ignore the joystick
         jsr     ReadPaddle ;read X axis
         eor     #$ff       ;invert
         sta     roll_velocity
         inx                ;X-reg=1
         jsr     ReadPaddle ;read Y axis
         eor     ptb_joy_y_flip
         sta     pitch_velocity
@NoPaddle:
         lda     #$ff
         bit     BUTN0      ;button 0 hit?
         bpl     @NotBtn0   ;nope
         bit     BUTN1      ;button 1 hit?
         bpl     @OnlyBtn1  ;nope
         sta     cmd_throttle_down ;both buttons == throttle down
         bmi     @Cont      ;(always)

@OnlyBtn1:
         sta     cmd_fire_laser ;fire lasers
@NotBtn0:
         bit     BUTN1      ;button 1 hit?
         bpl     @Cont
         sta     cmd_throttle_up ;increase throttle
@Cont:   lda     displayed_screen ;something that disables commands?
@NoJoyBranchHere:
         beq     @Done      ;not set
         lda     #$00       ;clear all commands
         sta     cmd_energy_bomb
         sta     cmd_escape_cap
         sta     cmd_targ_mssl
         sta     cmd_unarm_mssl
         sta     cmd_fire_mssl
         sta     cmd_ecm
         sta     cmd_local_jump
         sta     cmd_dock_on
         sta     cmd_dock_off
@Done:   pla
         tay
         lda     input_raw_key
         tax
         rts

LocalJump:
         ldx     PLAYER_STATE+42
         lda     PLAYER_STATE+2,x
         ora     PLAYER_STATE+11
         ora     witch_space_flag
         bne     @L83E2
         ldy     data_buffer+8
         bmi     @L83AA
         tay
         jsr     L5261
         cmp     #$02
         bcc     @L83E2
@L83AA:  ldy     data_buffer+45
         bmi     @L83B8
         ldy     #$25
         jsr     L525F
         cmp     #$02
         bcc     @L83E2
@L83B8:  lda     #$81
         sta     $af
         sta     $ae
         sta     $31
         lda     data_buffer+8
         jsr     ADD
         sta     data_buffer+8
         lda     data_buffer+45
         jsr     ADD
         sta     data_buffer+45
         lda     #$01
         sta     displayed_screen
         sta     $b6
         lsr     A
         sta     PLAYER_STATE+53
         ldx     PLAYER_STATE+49
         jmp     SetViewDirection

@L83E2:  jmp     Noise1

         .res    1,$60
; 
; Flight-control keys.  When pressed, the corresponding zero-page location is
; set to true.
; 
flight_key_cmds:
         .byte   '/'        ;$81 throttle down
         .byte   ' '        ;$82 throttle up
         .byte   ','        ;$83 roll left
         .byte   '.'        ;$84 roll right
         .byte   'X'        ;$85 pitch down
         .byte   'S'        ;$86 pitch up
         .byte   'A'        ;$87 fire lasers
         .byte   'B'        ;$88 energy bomb
         .byte   $1b        ;$89 escape capsule
         .byte   'T'        ;$8a target missile
         .byte   'U'        ;$8b un-arm missile
         .byte   'M'        ;$8c fire missile
         .byte   'E'        ;$8d ECM
         .byte   'J'        ;$8e in-system jump
         .byte   'C'        ;$8f docking computer on
         .byte   'P'        ;$90 docking computer off
         .byte   $a2,$00,$2c,$00,$c0,$10,$04,$ca,$2c,$10,$c0,$8a,$60,$60 ;unreferenced code?

; 
; Check to see if a pause-mode key has been hit.  If so, update the toggle
; value.
; 
; On entry:
;   Y-reg: entry to check (0-8)
; 
CheckPauseToggles:
         txa
         cmp     pause_key_cmds,y ;does it match the Nth entry?
         bne     @Bail      ;no
         lda     ptb_kbd_dampening,y ;yes, flip the state of that variable
         eor     #$ff
         sta     ptb_kbd_dampening,y
         bpl     @SwitchOff
         jsr     PrintBell  ;chirp
@SwitchOff:
         jsr     PrintBell  ;twice when enabled
         tya                ;preserve Y-reg
         pha
         ldy     #$14
         jsr     LongDelay
         pla                ;restore Y-reg
         tay
@Bail:   rts

         .byte   $60

HandleFlightInput:
         jsr     CheckForInput
         lda     computer_dock_flag
         beq     @L8487
         jsr     ZeroInfo
         lda     #$60
         sta     polyobj_mox2_hi
         ora     #$80
         sta     $22
         sta     $b8
         lda     player_speed
         sta     polyobj_vertex_lo
         jsr     L5A50
         lda     polyobj_vertex_lo
         cmp     #$16
         bcc     @L8449
         lda     #$16
@L8449:  sta     player_speed
         lda     #$ff
         ldx     #$01
         ldy     $28
         beq     @L8459
         bmi     @L8457
         ldx     #$02
@L8457:  sta     input_raw_key,x
@L8459:  lda     #$80
         ldx     #$03
         asl     polyobj_roll
         beq     @L8473
         bcc     @L8465
         ldx     #$04
@L8465:  bit     polyobj_roll
         bpl     @L846F
         lda     #$40
         sta     roll_velocity
         lda     #$00
@L846F:  sta     input_raw_key,x
         lda     roll_velocity
@L8473:  sta     roll_velocity
         lda     #$80
         ldx     #$05
         asl     polyobj_pitch
         beq     @L8485
         bcs     @L8481
         ldx     #$06
@L8481:  sta     input_raw_key,x
         lda     pitch_velocity
@L8485:  sta     pitch_velocity
@L8487:  ldx     roll_velocity
         lda     #$14
         ldy     cmd_roll_left
         beq     @L8492
         jsr     L61F1
@L8492:  ldy     cmd_roll_right
         beq     @L8499
         jsr     REDU2
@L8499:  stx     roll_velocity
         ldx     pitch_velocity
         ldy     cmd_pitch_down
         beq     @L84A4
         jsr     REDU2
@L84A4:  ldy     cmd_pitch_up
         beq     @L84AB
         jsr     L61F1
@L84AB:  stx     pitch_velocity
         ldx     input_raw_key
         stx     input_raw_key
         cpx     #'='       ;pause key?
         bne     @Done
@PauseMode:
         jsr     Delay
         jsr     CheckForInput
         cpx     #'Q'       ;is it a 'Q'?
         bne     @L84C6
         ldx     #$ff       ;yes, disable sound
         stx     sound_disab_flag
         ldx     #'Q'       ;continue with 'Q'
@L84C6:  ldy     #$00
@TogLoop:
         jsr     CheckPauseToggles ;DAXFYJKUT
         iny
         cpy     #$09
         bne     @TogLoop
         cpx     #'S'       ;is it 'S'?
         bne     @L84D9
         lda     #$00       ;yes, enable sound
         sta     sound_disab_flag
@L84D9:  cpx     #$1b       ;ESC?
         bne     @L84E0
         jmp     RestartGame

@L84E0:  cpx     #'-'       ;unpause?
         bne     @PauseMode ;no, keep going
@Done:   rts

GetInput1:
         sty     $b1
GetInput:
         ldy     #$02
         jsr     LongDelay
         jsr     CheckForInput
         bne     GetInput
@L84F1:  jsr     CheckForInput
         beq     @L84F1
         ldy     $b1
         tax
Return2: rts

L84FA:   stx     PLAYER_STATE+54
         pha
         lda     in_flight_msg_token
         jsr     L8553
         pla
PrintMessageBriefly:
         pha
         lda     #$0f
         ldx     displayed_screen
         beq     @L8512
         jsr     ClearLines
         lda     #$19
         .byte   $2c
@L8512:  sta     text_vposn
         ldx     #$00
         stx     text_mod_flags
         lda     $ce
         sta     text_hposn
         pla
         ldy     #$14
         cpx     PLAYER_STATE+54
         bne     L84FA
         sty     PLAYER_STATE+54
         sta     in_flight_msg_token
         lda     #$c0
         sta     txt_buffer_flag
         lda     $0278
         lsr     A
         lda     #$00
         bcc     @L8539
         lda     #$0a
@L8539:  sta     txt_buffer_index
         lda     in_flight_msg_token
         jsr     PrintFlightToken
         lda     #$20
         sec
         sbc     txt_buffer_index
         lsr     A
         sta     $ce
         sta     text_hposn
         jsr     ClearBufferFlag
         lda     in_flight_msg_token
L8553:   jsr     PrintFlightToken
         lsr     $0278
         bcc     Return2
         lda     #$fd       ;"Destroyed"
         jmp     PrintFlightToken

; Shield depleted, losing cargo / equipment.
OUCH:    jsr     GetRandom
         bmi     Return2    ;50% chance of nothing lost
         cpx     #22        ;max equipment
         bcs     Return2    ;number too high, nothing lost
         lda     player_cargo,x ;check cargo
         beq     Return2    ;don't have that, nothing lost
         lda     PLAYER_STATE+54 ;"delay printing already going on"
         bne     Return2
         ldy     #$03
         sty     $0278
         sta     player_cargo,x ;A-reg=0 from above
         cpx     #17        ;cargo is 0-16, ECM=17 is first equipment
         bcs     @EquipLost
         txa                ;cargo is lost; get item name
         adc     #$d0       ;token $d0 = "Food"
         jmp     PrintMessageBriefly

@EquipLost:
         beq     @LostEcm   ;X=17, ECM lost
         cpx     #18        ;is it a fuel scoop?
         beq     @LostScoop ;yes
         txa
         adc     #$5d       ;$5d+19 = $70 "Escape Pod"
         jmp     PrintMessageBriefly

@LostEcm:
         lda     #$6c       ;"E.C.M. System"
         jmp     PrintMessageBriefly

@LostScoop:
         lda     #$6f       ;"Fuel Scoops"
         jmp     PrintMessageBriefly

; Market price info.
; 
; BBC: "base_price, gradient sign+5bits, base_quantity, mask, units 2bits"
MarketData:
         .byte   $13,$82,$06,$01 ;Food
         .byte   $14,$81,$0a,$03 ;Textiles
         .byte   $41,$83,$02,$07 ;Radioactives
         .byte   $28,$85,$e2,$1f ;Slaves
         .byte   $53,$85,$fb,$0f ;Liquor/Wines
         .byte   $c4,$08,$36,$03 ;Luxuries
         .byte   $eb,$1d,$08,$78 ;Narcotics
         .byte   $9a,$0e,$38,$03 ;Computers
         .byte   $75,$06,$28,$07 ;Machinery
         .byte   $4e,$01,$11,$1f ;Alloys
         .byte   $7c,$0d,$1d,$07 ;Firearms
         .byte   $b0,$89,$dc,$3f ;Furs
         .byte   $20,$81,$35,$03 ;Minerals
         .byte   $61,$a1,$42,$07 ;Gold
         .byte   $ab,$a2,$37,$1f ;Platinum
         .byte   $2d,$c1,$fa,$0f ;Gem-Stones
         .byte   $35,$0f,$c0,$07 ;Alien Items

L85DF:   tya
         ldy     #$02
         jsr     L86AE
         sta     $20
         jmp     L8627

L85EA:   tax
         lda     txt_ptr+1
         and     #$60
         beq     L85DF
         lda     #$02
         jsr     L86AE
         sta     $1e
         jmp     L8627

L85FB:   lda     $16
         sta     txt_ptr
         lda     $18
         sta     txt_ptr+1
         lda     polyobj_mox2_hi
         sta     $70
         jsr     L82BB
         lda     txt_ptr
         sta     $16
         lda     txt_ptr+1
         sta     $18
         lda     $70
         sta     polyobj_mox2_hi
         ldy     #$04
         lda     txt_ptr
         and     #$60
         beq     L85EA
         ldx     #$02
         lda     #$00
         jsr     L86AE
         sta     $1c
L8627:   lda     $1c
         sta     txt_ptr
         lda     $1e
         sta     txt_ptr+1
         lda     $20
         sta     $70
         jsr     L82BB
         lda     txt_ptr
         sta     $1c
         lda     txt_ptr+1
         sta     $1e
         lda     $70
         sta     $20
         lda     $18
         sta     $ad
         lda     $20
         jsr     MULT12
         ldx     polyobj_mox2_hi
         lda     $1e
         jsr     TIS1
         eor     #$80
         sta     $22
         lda     $1c
         jsr     MULT12
         ldx     $16
         lda     $20
         jsr     TIS1
         eor     #$80
         sta     $24
         lda     $1e
         jsr     MULT12
         ldx     $18
         lda     $1c
         jsr     TIS1
         eor     #$80
         sta     $26
         lda     #$00
         ldx     #$0e
@L867A:  sta     $15,x
         dex
         dex
         bpl     @L867A
         rts

L8681:   tay
         and     #$7f
         cmp     $ad
         bcs     @L86A8
         ldx     #$fe
         stx     $d0
@L868C:  asl     A
         cmp     $ad
         bcc     @L8693
         sbc     $ad
@L8693:  rol     $d0
         bcs     @L868C
         lda     $d0
         lsr     A
         lsr     A
         sta     $d0
         lsr     A
         adc     $d0
         sta     $d0
         tya
         and     #$80
         ora     $d0
         rts

@L86A8:  tya
         and     #$80
         ora     #$60
         rts

L86AE:   sta     $33
         lda     $16,x
         sta     $ad
         lda     $1c,x
         jsr     MULT12
         ldx     $16,y
         stx     $ad
         lda     $001c,y
         jsr     MAD
         stx     $31
         ldy     $33
         ldx     $16,y
         stx     $ad
         eor     #$80
         sta     $32
         eor     $ad
         and     #$80
         sta     $d0
         lda     #$00
         ldx     #$10
         asl     $31
         rol     $32
         asl     $ad
         lsr     $ad
@L86E1:  rol     A
         cmp     $ad
         bcc     @L86E8
         sbc     $ad
@L86E8:  rol     $31
         rol     $32
         dex
         bne     @L86E1
         lda     $31
         ora     $d0
         rts

         .byte   $02
         .byte   $0f
         .byte   "12345678901234567"

DrawShipAsPoint:
         jsr     L75F9
         ora     $39
         bne     @L8728
         lda     $46
         cmp     #$86
         bcs     @L8728
         jsr     @L8731
         lda     $46
         clc
         adc     #$01
         jsr     @L8731
         lda     #$08
         ora     polyobj_vis
         sta     polyobj_vis
         jmp     DrawDot

@L8728:  lda     #$f7
         and     polyobj_vis
         sta     polyobj_vis
         jmp     DrawDot

@L8731:  sta     txt_ptr+1
         sta     $71
         lda     $38
         sta     txt_ptr
         clc
         adc     #$03
         bcc     @L8740
         lda     #$ff
@L8740:  sta     $70
         jmp     DrawTwoThings

; "Q=SQR(RQ) two-byte square root, R is hi, Q is lo"
XX16     .set    $48
XX15     .set    $6e
q_val    .set    $ad
r_val    .set    $ae
s_val    .set    $af
t_val    .set    $d0
TwoByteSqrt:
         ldy     r_val
         lda     q_val
         sta     s_val
         ldx     #$00
         stx     q_val
         lda     #$08
         sta     t_val
@L8753:  cpx     q_val
         bcc     @L8765
         bne     @L875D
         cpy     #$40
         bcc     @L8765
@L875D:  tya
         sbc     #$40
         tay
         txa
         sbc     q_val
         tax
@L8765:  rol     q_val
         asl     s_val
         tya
         rol     A
         tay
         txa
         rol     A
         tax
         asl     s_val
         tya
         rol     A
         tay
         txa
         rol     A
         tax
         dec     t_val
         bne     @L8753
         rts

; "R=A*256/Q   byte from remainder of division"
; The BBC implementation was iterative.  It appears to have been replaced with a
; table lookup.
BFRDIV:  cmp     q_val      ;"is A >= Q ?"
         bcs     @TooBig    ;"if yes, answer too big for 1 byte, R=$FF"
         sta     $ca
         tax
         beq     @L879E
         lda     math_table2,x
         ldx     q_val
         sec
         sbc     math_table2,x
         ldx     $ca
         lda     math_table1,x
         ldx     q_val
         sbc     math_table1,x
         bcs     @TooBig
         tax
         lda     math_table3,x
@L879E:  sta     r_val
         rts

; Original implementation of BFRDIV, not referenced.
@unref_BFRDIV:
         bcs     @TooBig
         ldx     #$fe
         stx     r_val
@L87A7:  asl     A
         bcs     @L87B5
         cmp     q_val
         bcc     @L87B0
         sbc     q_val
@L87B0:  rol     r_val
         bcs     @L87A7
         rts

@L87B5:  sbc     q_val
         sec
         rol     r_val
         bcs     @L87A7
         lda     r_val
         rts

@TooBig: lda     #$ff
         sta     r_val
         rts

; Single-byte add/subtract.
; 
; .LL38 BADD "(Sign S)A = R + Q*(Sign from A^S)"
; 
; On entry:
;   $AE: R
;   $AD: Q
;   A-reg: sign bit to apply to Q
; 
; On exit:
;   A-reg: result
;   $AF: S (sign bit of result)
ByteAddSub:
         eor     s_val      ;check A^S (subtracting neg value -> add)
         bmi     @Subtract  ;negative, do subtraction
         lda     q_val      ;add values; sign in S is already correct
         clc
         adc     r_val
         rts

@Subtract:
         lda     r_val      ;compute R-Q
         sec
         sbc     q_val
         bcc     @FixSign   ;went negative
         clc
         rts

@FixSign:
         pha
         lda     s_val
         eor     #$80
         sta     s_val
         pla
         eor     #$ff
         adc     #$01
         rts

; 
; Computes the dot product of two vectors.  Mathematically, the dot product of
; [A,B,C] and [X,Y,Z] is A*X + B*Y + C*Z.  The value is the cosine of the angle
; between the vectors.
; 
; "XX12=XX15.XX16  each vector is 16-bit x,y,z"
; 
DotProduct:
         ldx     #$00
         ldy     #$00
@L87E8:  lda     XX15
         sta     q_val
         lda     XX16,x
         jsr     FMLTU
         sta     t_val
         lda     XX15+1
         eor     XX16+1,x
         sta     s_val
         lda     XX15+2
         sta     q_val
         lda     XX16+2,x
         jsr     FMLTU
         sta     q_val
         lda     t_val
         sta     r_val
         lda     XX15+3
         eor     XX16+3,x
         jsr     ByteAddSub
         sta     t_val
         lda     XX15+4
         sta     q_val
         lda     XX16+4,x
         jsr     FMLTU
         sta     q_val
         lda     t_val
         sta     r_val
         lda     XX15+5
         eor     XX16+5,x
         jsr     ByteAddSub
         sta     $0074,y
         lda     s_val
         sta     $0075,y
         iny
         iny
         txa
         clc
         adc     #$06
         tax
         cmp     #$11
         bcc     @L87E8
         rts

HandlePlanet:
         jmp     Planet

INWK_xlo .set    $0c
INWK_xhi .set    $0d
INWK_ylo .set    $0f
INWK_yhi .set    $10
INWK_zlo .set    $12
INWK_zhi .set    $13
polyobj_face_vis .set $38
face_ptr .set    $5e
normal_x .set    $74
nx_sign_flag .set $75
normal_y .set    $76
ny_sign_flag .set $77
normal_z .set    $78
nz_sign_flag .set $79
scale    .set    $b2        ;XX17
ship_type .set   $b8
xx4_visibility .set $c0
item_xcount .set $c1        ;BBC:XX20
tmp      .set    $d0
DrawObject:
         lda     ship_type  ;ship type
         bmi     HandlePlanet ;planet has high bit set
         lda     #$1f
         sta     xx4_visibility ;set visibility to max
         ldy     #$01
         sty     $c2
         dey                ;Y-reg=0
         lda     #$08
         bit     polyobj_vis
         bne     @L8854
         lda     #$00       ;visibility:display
         .byte   $2c
@L8854:  lda     (tmp_ptr2),y
         sta     $c3
         lda     $30
         bmi     CheckVisDrawDot
         lda     #$20       ;mask bit 5 (exploding)
         bit     polyobj_vis
         bne     @Explode   ;bit 5 set, explosion ongoing
         bpl     @Explode   ;bit 7 clear, start blowing up
         ora     polyobj_vis
         and     #%00111111 ;visibility:(exploding|firing) ^ $FF
         sta     polyobj_vis
         lda     #$00
         ldy     #$1c
         sta     (polyobj_ptr),y
         ldy     #$1e
         sta     (polyobj_ptr),y
         jsr     CheckVisDrawDot
         ldy     #$01
         lda     #$12
         sta     (tmp_ptr2),y
         ldy     #$07       ;hull explosion count
         lda     (hull_ptr),y
         ldy     #$02
         sta     (tmp_ptr2),y
@L8885:  iny
         jsr     GetRandom
         sta     (tmp_ptr2),y
         cpy     #$06       ;"bytes 3to6 = random bytes for seed"
         bne     @L8885
@Explode:
         lda     polyobj_zpos_hi ;sign of Z coord
         bpl     ObjInFront
TestRemove:
         lda     polyobj_vis
         and     #$20       ;ongoing explosion?
         beq     CheckVisDrawDot
         lda     polyobj_vis
         and     #$f7
         sta     polyobj_vis
         jmp     DoExplosion

CheckVisDrawDot:
         lda     #$08
         bit     polyobj_vis
         beq     @L88AF
         eor     polyobj_vis
         sta     polyobj_vis
         jmp     DrawDot

@L88AF:  rts

; Object in front of player (.LL10).
; (Looks like INWK has transformed center point of object?)
ObjInFront:
         lda     INWK_zhi
         cmp     #$c0       ;far in front?
         bcs     TestRemove ;test to remove object
         lda     INWK_xlo
         cmp     INWK_zlo
         lda     INWK_xhi
         sbc     INWK_zhi   ;gives angle to object
         bcs     TestRemove
         lda     INWK_ylo
         cmp     INWK_zlo
         lda     INWK_yhi
         sbc     INWK_zhi
         bcs     TestRemove
         ldy     #$06       ;+$06 gun vertex
         lda     (hull_ptr),y
         tax                ;vertex index in X-reg
         lda     #$ff       ;flag that vertex
         sta     BUFFER_0100,x
         sta     $0101,x
; Compute XX4 visibility.
         lda     INWK_zlo   ;take Z value
         sta     tmp        ;low in tmp, high in A-reg
         lda     INWK_zhi
         lsr     A          ;divide by 4
         ror     tmp
         lsr     A
         ror     tmp
         lsr     A
         ror     tmp
         lsr     A
         bne     @Far       ;still bits in high byte, it's far away
         lda     tmp        ;only bits in low byte now
         ror     A          ;(plus one in the carry flag)
         lsr     A
         lsr     A
         lsr     A          ;8 shifts, /256, == high byte?
         sta     xx4_visibility ;update visibility
         bpl     DrawWireframe ;(always)
@Far:    ldy     #$0d       ;+13 LOD distance (becomes a dot)
         lda     (hull_ptr),y
         cmp     INWK_zhi
         bcs     DrawWireframe
         lda     #$20       ;mask exploding bit
         and     polyobj_vis
         bne     DrawWireframe ;exploding do the draw
         jmp     DrawShipAsPoint ;too far, just draw a point

; "Draw wireframe (including nodes exploding)" (.LL17)
DrawWireframe:
         ldx     #$05       ;"load rotmat into XX16"
@L8906:  lda     $21,x
         sta     $48,x      ;"XX16,X"
         lda     $1b,x
         sta     $4e,x      ;"XX16+6,X"
         lda     $15,x
         sta     $54,x      ;"XX16+12,X"
         dex
         bpl     @L8906
         lda     #197       ;"comment here about NORM"
         sta     $ad
         ldy     #$10
@L891B:  lda     $0048,y
         asl     A
         lda     $0049,y
         rol     A
         jsr     BFRDIV     ;R=A*256/197
         ldx     $ae
         stx     $48,y
         dey
         dey
         bpl     @L891B
         ldx     #$08       ;"load craft coords into XX18"
@L8930:  lda     INWK_xlo,x
         sta     $98,x
         dex
         bpl     @L8930
         lda     #$ff       ;"last normal is always visible"
         sta     $47
         ldy     #$0c       ;+$0c face count
         lda     polyobj_vis
         and     #$20       ;are we exploding (bit 5)?
         beq     ComputeVis ;no, not all faces are visible
         lda     (hull_ptr),y ;get face count * 4
         lsr     A          ;divide by 4
         lsr     A
         tax
         lda     #$ff       ;mark visible
@Loop:   sta     polyobj_face_vis,x ;on all faces
         dex
         bpl     @Loop
         inx
         stx     xx4_visibility ;set to zero
DoTranspose:
         jmp     TransposeMatrix

scal_norm_x .set $6e
scal_norm_y .set $70
x_lo     .set    $98
x_hi     .set    $99
y_lo     .set    $9b
y_hi     .set    $9c
z_lo     .set    $9e
z_hi     .set    $9f
scal_norm_z .set $ae
s_val    .set    $af
ComputeVis:
         lda     (hull_ptr),y ;Y-reg=$0c: face count * 4
         beq     DoTranspose ;no faces
         sta     item_xcount
         ldy     #$12       ;+$12 "scaling of normals"
         lda     (hull_ptr),y ;normals scaled by 2^Q%
         tax
         lda     z_hi       ;get z_hi
         tay                ;is high byte zero?
         beq     @ObjClose  ;yes, object close/small
@ScaleLoop:
         inx
         lsr     y_hi
         ror     y_lo
         lsr     x_hi
         ror     x_lo
         lsr     A
         ror     z_lo
         tay                ;have we reduced z_hi to 0?
         bne     @ScaleLoop ;no, keep going
@ObjClose:
         stx     scale
         lda     $a0
         sta     $73
         lda     x_lo
         sta     scal_norm_x
         lda     $9a
         sta     $6f
         lda     y_lo
         sta     scal_norm_y
         lda     $9d
         sta     $71
         lda     z_lo
         sta     $72
         jsr     DotProduct
         lda     normal_x
         sta     x_lo
         lda     nx_sign_flag
         sta     $9a
         lda     normal_y
         sta     y_lo
         lda     ny_sign_flag
         sta     $9d
         lda     normal_z
         sta     z_lo
         lda     nz_sign_flag
         sta     $a0
         ldy     #$04       ;+4 face data offset low byte
         lda     (hull_ptr),y
         clc
         adc     hull_ptr
         sta     face_ptr
         ldy     #$11       ;+11 face data offset high byte
         lda     (hull_ptr),y
         adc     hull_ptr+1
         sta     face_ptr+1
; Iterate through all normals (BBC .LL86).
         ldy     #$00
@FaceLoop:
         lda     (face_ptr),y ;get 1st byte (flags) from face data
         sta     nx_sign_flag
         and     #%00011111 ;low 5 bits are the always-visible limit
         cmp     xx4_visibility ;compare to distance
         bcs     @CheckNormVis ;cutoff >= dist; might not be visible; check normal
         tya                ;face entry offset
         lsr     A          ;divide by 4 to get face index
         lsr     A
         tax
         lda     #$ff
         sta     polyobj_face_vis,x ;mark face as visible
         tya                ;advance to next face
         adc     #$04
         tay
         jmp     @NearEnd

@CheckNormVis:
         lda     nx_sign_flag ;unpack sign flags
         asl     A
         sta     ny_sign_flag
         asl     A
         sta     nz_sign_flag
         iny
         lda     (face_ptr),y ;extract face normal vector
         sta     normal_x
         iny
         lda     (face_ptr),y
         sta     normal_y
         iny
         lda     (face_ptr),y
         sta     normal_z
         ldx     scale
         cpx     #$04
         bcc     @Small
         lda     x_lo
         sta     scal_norm_x
         lda     $9a
         sta     $6f
         lda     y_lo
         sta     scal_norm_y
         lda     $9d
         sta     $71
         lda     z_lo
         sta     $72
         lda     $a0
         sta     $73
         jmp     @L8A73

@Ovflw:  lsr     x_lo
         lsr     z_lo
         lsr     y_lo
; Divide normal vector components by 4.
         ldx     #$01       ;scale=1
@Small:  lda     normal_x   ;BBC .LL92
         sta     scal_norm_x
         lda     normal_y
         sta     scal_norm_y
         lda     normal_z
         dex                ;scale--
         bmi     @ScaleDone ;scale done, branch
@DownShift:
         lsr     scal_norm_x
         lsr     scal_norm_y
         lsr     A
         dex
         bpl     @DownShift
@ScaleDone:
         sta     scal_norm_z
         lda     nz_sign_flag
         sta     s_val
         lda     z_lo
         sta     $ad
         lda     $a0
         jsr     ByteAddSub
         bcs     @Ovflw
         sta     $72
         lda     s_val
         sta     $73
         lda     scal_norm_x
         sta     scal_norm_z
         lda     nx_sign_flag
         sta     s_val
         lda     x_lo
         sta     $ad
         lda     $9a
         jsr     ByteAddSub
         bcs     @Ovflw
         sta     scal_norm_x
         lda     s_val
         sta     $6f
         lda     scal_norm_y
         sta     scal_norm_z
         lda     ny_sign_flag
         sta     s_val
         lda     y_lo
         sta     $ad
         lda     $9d
         jsr     ByteAddSub
         bcs     @Ovflw
         sta     scal_norm_y
         lda     s_val
         sta     $71
; "calculate 3D dot product XX12 . XX15 for (x,y,z)" .LL89
@L8A73:  lda     normal_x
         sta     $ad
         lda     scal_norm_x
         jsr     FMLTU      ;"A=A*Q/256unsg"
         sta     tmp
         lda     nx_sign_flag
         eor     $6f
         sta     s_val
         lda     normal_y
         sta     $ad
         lda     scal_norm_y
         jsr     FMLTU
         sta     $ad
         lda     tmp
         sta     scal_norm_z
         lda     ny_sign_flag
         eor     $71
         jsr     ByteAddSub
         sta     tmp
         lda     normal_z
         sta     $ad
         lda     $72
         jsr     FMLTU
         sta     $ad
         lda     tmp
         sta     scal_norm_z
         lda     $73
         eor     nz_sign_flag
         jsr     ByteAddSub
         pha                ;"push xdot+ydot+zdot"
         tya
         lsr     A
         lsr     A
         tax                ;normal index
         pla
         bit     s_val
         bmi     @L8ABE     ;"if -ve then keep acc"
         lda     #$00       ;"else face not visible"
@L8ABE:  sta     polyobj_face_vis,x
         iny
@NearEnd:
         cpy     item_xcount ;done with faces?  (BBC .LL88)
         bcs     TransposeMatrix
         jmp     @FaceLoop

TransposeMatrix:
         ldy     $4a        ;transpose matrix (BBC .LL42)
         ldx     $4b
         lda     $4e
         sta     $4a
         lda     $4f
         sta     $4b
         sty     $4e
         stx     $4f
         ldy     $4c
         ldx     $4d
         lda     $54
         sta     $4c
         lda     $55
         sta     $4d
         sty     $54
         stx     $55
         ldy     $52
         ldx     $53
         lda     $56
         sta     $52
         lda     $57
         sta     $53
         sty     $56
         stx     $57
; Read vertices.
tmp      .set    $31
vertex_ptr .set  $5e
vertex_x .set    $6e
vx_sign_flag .set $6f
vertex_y .set    $70
vy_sign_flag .set $71
vertex_z .set    $72
vz_sign_flag .set $73
count_v6 .set    $b2
count    .set    $bd        ;CNT
vertex_flags .set $d0
         ldy     #$08       ;+8 number of vertices * 6
         lda     (hull_ptr),y
         sta     item_xcount
         lda     hull_ptr   ;vertices start right after hull header
         clc
         adc     #20        ;which is 20 bytes
         sta     vertex_ptr
         lda     hull_ptr+1
         adc     #$00
         sta     vertex_ptr+1
         ldy     #$00
         sty     count
L8B0F:   sty     count_v6
         lda     (vertex_ptr),y
         sta     vertex_x
         iny
         lda     (vertex_ptr),y
         sta     vertex_y
         iny
         lda     (vertex_ptr),y
         sta     vertex_z
         iny
         lda     (vertex_ptr),y
         sta     vertex_flags
         and     #%00011111 ;mask visibility
         cmp     xx4_visibility ;is visible?
         bcc     @Next      ;no, skip it
         iny
         lda     (vertex_ptr),y ;get first two faces
         sta     tmp
         and     #$0f       ;face 1
         tax
         lda     polyobj_face_vis,x ;face visibility index
         bne     @IsVisible ;vertex is visible if any face visible
         lda     tmp        ;shift to get face 2
         lsr     A
         lsr     A
         lsr     A
         lsr     A
         tax
         lda     polyobj_face_vis,x ;check visibility
         bne     @IsVisible
         iny
         lda     (vertex_ptr),y ;get second pair of faces
         sta     tmp
         and     #$0f       ;face 3
         tax
         lda     polyobj_face_vis,x
         bne     @IsVisible
         lda     tmp        ;face 4
         lsr     A
         lsr     A
         lsr     A
         lsr     A
         tax
         lda     polyobj_face_vis,x
         bne     @IsVisible
@Next:   jmp     UpdateCounts

@IsVisible:
         lda     vertex_flags ;.LL49
         sta     vx_sign_flag
         asl     A
         sta     vy_sign_flag
         asl     A
         sta     vz_sign_flag
         jsr     DotProduct
         lda     INWK+2
         sta     vertex_y
         eor     nx_sign_flag
         bmi     @L8B80
         clc
         lda     normal_x
         adc     INWK_xlo
         sta     vertex_x
         lda     INWK_xhi
         adc     #$00
         sta     vx_sign_flag
         jmp     @L8BA3

@L8B80:  lda     INWK_xlo
         sec
         sbc     normal_x
         sta     vertex_x
         lda     INWK_xhi
         sbc     #$00
         sta     vx_sign_flag
         bcs     @L8BA3
         eor     #$ff
         sta     vx_sign_flag
         lda     #$01
         sbc     vertex_x
         sta     vertex_x
         bcc     @L8B9D
         inc     vx_sign_flag
@L8B9D:  lda     vertex_y
         eor     #$80
         sta     vertex_y
@L8BA3:  lda     INWK+5
         sta     vz_sign_flag
         eor     ny_sign_flag
         bmi     @L8BBB
         clc
         lda     normal_y
         adc     INWK_ylo
         sta     vy_sign_flag
         lda     INWK_yhi
         adc     #$00
         sta     vertex_z
         jmp     @L8BE0

@L8BBB:  lda     INWK_ylo
         sec
         sbc     normal_y
         sta     vy_sign_flag
         lda     INWK_yhi
         sbc     #$00
         sta     vertex_z
         bcs     @L8BE0
         eor     #$ff
         sta     vertex_z
         lda     vy_sign_flag
         eor     #$ff
         adc     #$01
         sta     vy_sign_flag
         lda     vz_sign_flag
         eor     #$80
         sta     vz_sign_flag
         bcc     @L8BE0
         inc     vertex_z
@L8BE0:  lda     nz_sign_flag
         bmi     @L8C2E
         lda     normal_z
         clc
         adc     INWK_zlo
         sta     vertex_flags
         lda     INWK_zhi
         adc     #$00
         sta     $ac
         jmp     @L8C4D

@L8BF4:  ldx     $ad
         beq     @L8C14
         ldx     #$00
@L8BFA:  lsr     A
         inx
         cmp     $ad
         bcs     @L8BFA
         stx     s_val
         jsr     BFRDIV
         ldx     s_val
         lda     scal_norm_z
@L8C09:  asl     A
         rol     $ac
         bmi     @L8C14
         dex
         bne     @L8C09
         sta     scal_norm_z
         rts

@L8C14:  lda     #$32
         sta     scal_norm_z
         sta     $ac
         rts

@L8C1B:  lda     #$80
         sec
         sbc     scal_norm_z
         sta     BUFFER_0100,x
         inx
         lda     #$00
         sbc     $ac
         sta     BUFFER_0100,x
         jmp     @L8C8D

@L8C2E:  lda     INWK_zlo
         sec
         sbc     normal_z
         sta     vertex_flags
         lda     INWK_zhi
         sbc     #$00
         sta     $ac
         bcc     @L8C45
         bne     @L8C4D
         lda     vertex_flags
         cmp     #$04
         bcs     @L8C4D
@L8C45:  lda     #$00
         sta     $ac
         lda     #$04
         sta     vertex_flags
@L8C4D:  lda     $ac
         ora     vx_sign_flag
         ora     vertex_z
         beq     @L8C64
         lsr     vx_sign_flag
         ror     vertex_x
         lsr     vertex_z
         ror     vy_sign_flag
         lsr     $ac
         ror     vertex_flags
         jmp     @L8C4D

@L8C64:  lda     vertex_flags
         sta     $ad
         lda     vertex_x
         cmp     $ad
         bcc     @L8C74
         jsr     @L8BF4
         jmp     @L8C77

@L8C74:  jsr     BFRDIV
@L8C77:  ldx     count
         lda     vertex_y
         bmi     @L8C1B
         lda     scal_norm_z
         clc
         adc     #$80
         sta     BUFFER_0100,x
         inx
         lda     $ac
         adc     #$00
         sta     BUFFER_0100,x
@L8C8D:  txa
         pha
         lda     #$00
         sta     $ac
         lda     vertex_flags
         sta     $ad
         lda     vy_sign_flag
         cmp     $ad
         bcc     @L8CB6
         jsr     @L8BF4
         jmp     @L8CB9

@L8CA3:  lda     #$44
         clc
         adc     scal_norm_z
         sta     BUFFER_0100,x
         inx
         lda     #$00
         adc     $ac
         sta     BUFFER_0100,x
         jmp     UpdateCounts

@L8CB6:  jsr     BFRDIV
@L8CB9:  pla
         tax
         inx
         lda     vz_sign_flag
         bmi     @L8CA3
         lda     #$44
         sec
         sbc     scal_norm_z
         sta     BUFFER_0100,x
         inx
         lda     #$00
         sbc     $ac
         sta     BUFFER_0100,x
UpdateCounts:
         clc                ;BBC .LL50
         lda     count      ;advance count by 4
         adc     #$04
         sta     count
         lda     count_v6   ;and other count by 6
         adc     #$06
         tay
         bcs     @L8CE5
         cmp     item_xcount
         bcs     @L8CE5
         jmp     L8B0F

@L8CE5:  lda     polyobj_vis ;display/exploding state|missiles
         and     #$20       ;check bit 5
         beq     L8CF4      ;no explosion, branch
         lda     polyobj_vis
         ora     #$08       ;"set bit3 to erase old line"
         sta     polyobj_vis
         jmp     DoExplosion

x0_lo    .set    $6e
x0_hi    .set    $6f
y0_lo    .set    $70
y0_hi    .set    $71
x1_lo    .set    $72
x1_hi    .set    $73
y1_lo    .set    $74
y1_hi    .set    $75
L8CF4:   ldy     #$09       ;+$09 number of edges
         lda     (hull_ptr),y
         sta     item_xcount
         lda     #$08
         ora     polyobj_vis
         sta     polyobj_vis
         ldy     #$00
         sty     count_v6
         bit     polyobj_vis ;check bit 6
         bvc     L8D47      ;bit 6 clear (laser not firing)
         lda     polyobj_vis
         and     #$bf       ;clear bit 6
         sta     polyobj_vis
         ldy     #$06       ;+$06 gun vertex
         lda     (hull_ptr),y
         tay
         ldx     BUFFER_0100,y
         stx     x0_lo
         inx
         beq     L8D47
         ldx     $0101,y
         stx     x0_hi
         inx
         beq     L8D47
         ldx     $0102,y
         stx     y0_lo
         ldx     $0103,y
         stx     y0_hi
         lda     #$00
         sta     x1_lo
         sta     x1_hi
         sta     y1_hi
         lda     INWK_zlo
         sta     y1_lo
         lda     INWK+2
         bpl     @L8D3F
         dec     x1_lo
@L8D3F:  jsr     ClipLine
         bcs     L8D47
         jsr     DrawTwoThings
; Calculate new lines.
edge_ptr .set    $5e
max_lines .set   $bd
L8D47:   ldy     #$03       ;+$03 offset to edges low byte
         clc
         lda     (hull_ptr),y
         adc     hull_ptr
         sta     edge_ptr
         ldy     #$10       ;+$10 offset to edges high byte
         lda     (hull_ptr),y
         adc     hull_ptr+1
         sta     edge_ptr+1
         ldy     #$05       ;+$05 (4 * maxlines) + 1
         lda     (hull_ptr),y
         sta     max_lines
@CountVis:
         ldy     #$00       ;count visible edges
         lda     (edge_ptr),y ;get visibility
         cmp     $c0
         bcc     @NotVis    ;not visible
         iny
         lda     (edge_ptr),y ;edge data byte
         sta     $31
         and     #$0f       ;face 1
         tax
         lda     $38,x      ;check visibility
         bne     @IsVis     ;visible if either face is visible
         lda     $31
         lsr     A
         lsr     A
         lsr     A
         lsr     A
         tax
         lda     $38,x
         beq     @NotVis
@IsVis:  iny
         lda     (edge_ptr),y ;get index of first vertex
         tax
         lda     BUFFER_0100,x
         sta     $6e
         lda     $0101,x
         sta     $6f
         lda     $0102,x
         sta     $70
         lda     $0103,x
         sta     $71
         iny
         lda     (edge_ptr),y ;get index of second vertex
         tax
         lda     BUFFER_0100,x
         sta     $72
         lda     $0102,x
         sta     $74
         lda     $0103,x
         sta     $75
         lda     $0101,x
         sta     $73
         jsr     ClipLine1
         bcs     @NotVis
         jsr     DrawTwoThings
@NotVis: lda     $c2
         cmp     max_lines
         bcs     @L8DCE
         lda     edge_ptr
         clc
         adc     #$04
         sta     edge_ptr
         bcc     @L8DC6
         inc     edge_ptr+1
@L8DC6:  inc     $b2
         ldy     $b2
         cpy     $c1
         bcc     @CountVis
@L8DCE:  jmp     DrawDot

L8DD1:   lda     $6f
         bpl     @L8DEC
         sta     $af
         jsr     @L8E4B
         txa
         clc
         adc     $70
         sta     $70
         tya
         adc     $71
         sta     $71
         lda     #$00
         sta     $6e
         sta     $6f
         tax
@L8DEC:  beq     @L8E07
         sta     $af
         dec     $af
         jsr     @L8E4B
         txa
         clc
         adc     $70
         sta     $70
         tya
         adc     $71
         sta     $71
         ldx     #$ff
         stx     $6e
         inx
         stx     $6f
@L8E07:  lda     $71
         bpl     @L8E25
         sta     $af
         lda     $70
         sta     $ae
         jsr     @L8E7A
         txa
         clc
         adc     $6e
         sta     $6e
         tya
         adc     $6f
         sta     $6f
         lda     #$00
         sta     $70
         sta     $71
@L8E25:  lda     $70
         sec
         sbc     #$88
         sta     $ae
         lda     $71
         sbc     #$00
         sta     $af
         bcc     @L8E4A
         jsr     @L8E7A
         txa
         clc
         adc     $6e
         sta     $6e
         tya
         adc     $6f
         sta     $6f
         lda     #$87
         sta     $70
         lda     #$00
         sta     $71
@L8E4A:  rts

@L8E4B:  lda     $6e
         sta     $ae
         jsr     @L8EB6
         pha
         ldx     $d0
         bne     @L8E82
@L8E57:  lda     #$00
         tax
         tay
         lsr     $af
         ror     $ae
         asl     $ad
         bcc     @L8E6C
@L8E63:  txa
         clc
         adc     $ae
         tax
         tya
         adc     $af
         tay
@L8E6C:  lsr     $af
         ror     $ae
         asl     $ad
         bcs     @L8E63
         bne     @L8E6C
         pla
         bpl     @L8EA9
         rts

@L8E7A:  jsr     @L8EB6
         pha
         ldx     $d0
         bne     @L8E57
@L8E82:  lda     #$ff
         tay
         asl     A
         tax
@L8E87:  asl     $ae
         rol     $af
         lda     $af
         bcs     @L8E93
         cmp     $ad
         bcc     @L8E9E
@L8E93:  sbc     $ad
         sta     $af
         lda     $ae
         sbc     #$00
         sta     $ae
         sec
@L8E9E:  txa
         rol     A
         tax
         tya
         rol     A
         tay
         bcs     @L8E87
         pla
         bmi     @L8EB5
@L8EA9:  txa
         eor     #$ff
         adc     #$01
         tax
         tya
         eor     #$ff
         adc     #$00
         tay
@L8EB5:  rts

@L8EB6:  ldx     $76
         stx     $ad
         lda     $af
         bpl     @L8ECF
         lda     #$00
         sec
         sbc     $ae
         sta     $ae
         lda     $af
         pha
         eor     #$ff
         adc     #$00
         sta     $af
         pla
@L8ECF:  eor     $77
         rts

; 
; Clips a line to the viewport.
; 
; Looks like it's performing midpoint subdivision.
; 
; Viewport area appears to be 256x135.
; 
; On entry:
;   $6e/6f: x0
;   $70/71: y0
;   $72/73: x1
;   $74/75: y1
; 
; On exit:
;   $6e: clipped x0
;   $6f: clipped y0
;   $70: clipped x1
;   $71: clipped y1
; 
x0_lo    .set    $6e
x0_hi    .set    $6f
y0_lo    .set    $70
y0_hi    .set    $71
x1_lo    .set    $72
x1_hi    .set    $73
y1_lo    .set    $74
y1_hi    .set    $75
yclip    .set    $b5
ClipLine:
         lda     #$00
         sta     lcoord_swap_flag
         lda     x1_hi
ClipLine1:
         ldx     #135       ;viewport height
         ora     y1_hi
         bne     @SkipYcReset
         cpx     y1_lo
         bcc     @SkipYcReset
         ldx     #$00
@SkipYcReset:
         stx     yclip
         lda     x0_hi
         ora     y0_hi
         bne     @L8F09
         lda     #135       ;viewport height
         cmp     y0_lo
         bcc     @L8F09
         lda     yclip
         bne     @L8F07
@L8EF7:  lda     y0_lo      ;copy *_lo to outputs
         sta     x0_hi
         lda     x1_lo
         sta     y0_lo
         lda     y1_lo
         sta     y0_hi
         clc                ;valid to plot
         rts

@NotVisible:
         sec                ;clipped line not visible
         rts

@L8F07:  lsr     yclip      ;yclip = ymid
@L8F09:  lda     yclip
         bpl     @L8F3C
         lda     x0_hi
         and     x1_hi
         bmi     @NotVisible
         lda     y0_hi
         and     y1_hi
         bmi     @NotVisible
         ldx     x0_hi
         dex
         txa
         ldx     x1_hi
         dex
         stx     $76
         ora     $76
         bpl     @NotVisible
         lda     y0_lo
         cmp     #$88
         lda     y0_hi
         sbc     #$00
         sta     $76
         lda     y1_lo
         cmp     #$88
         lda     y1_hi
         sbc     #$00
         ora     $76
         bpl     @NotVisible
@L8F3C:  tya
         pha
         lda     x1_lo
         sec
         sbc     x0_lo
         sta     $76
         lda     x1_hi
         sbc     x0_hi
         sta     $77
         lda     y1_lo
         sec
         sbc     y0_lo
         sta     $78
         lda     y1_hi
         sbc     y0_hi
         sta     $79
         eor     $77
         sta     $af
         lda     $79
         bpl     @L8F6D
         lda     #$00
         sec
         sbc     $78
         sta     $78
         lda     #$00
         sbc     $79
         sta     $79
@L8F6D:  lda     $77
         bpl     @L8F7C
         sec
         lda     #$00
         sbc     $76
         sta     $76
         lda     #$00
         sbc     $77
@L8F7C:  tax
         bne     @L8F83
         ldx     $79
         beq     @L8F8D
@L8F83:  lsr     A
         ror     $76
         lsr     $79
         ror     $78
         jmp     @L8F7C

@L8F8D:  stx     $d0
         lda     $76
         cmp     $78
         bcc     @L8F9F
         sta     $ad
         lda     $78
         jsr     BFRDIV
         jmp     @L8FAA

@L8F9F:  lda     $78
         sta     $ad
         lda     $76
         jsr     BFRDIV
         dec     $d0
@L8FAA:  lda     $ae
         sta     $76
         lda     $af
         sta     $77
         lda     yclip
         beq     @L8FB8
         bpl     @L8FCB
@L8FB8:  jsr     L8DD1
         lda     yclip
         bpl     @L8FF1
         lda     x0_hi
         ora     y0_hi
         bne     @L8FF6
         lda     y0_lo
         cmp     #$88
         bcs     @L8FF6
@L8FCB:  ldx     x0_lo
         lda     x1_lo
         sta     x0_lo
         stx     x1_lo
         lda     x1_hi
         ldx     x0_hi
         stx     x1_hi
         sta     x0_hi
         ldx     y0_lo
         lda     y1_lo
         sta     y0_lo
         stx     y1_lo
         lda     y1_hi
         ldx     y0_hi
         stx     y1_hi
         sta     y0_hi
         jsr     L8DD1
         dec     lcoord_swap_flag
@L8FF1:  pla
         tay
         jmp     @L8EF7

@L8FF6:  pla
         tay
         sec
         rts

screen_x0 .set   $6e
screen_y0 .set   $6f
screen_x1 .set   $70
screen_y1 .set   $71
DrawDot: ldy     $c2
@Loop:   cpy     $c3
         bcs     @Done
         lda     (tmp_ptr2),y
         iny
         sta     screen_x0
         lda     (tmp_ptr2),y
         iny
         sta     screen_y0
         lda     (tmp_ptr2),y
         iny
         sta     screen_x1
         lda     (tmp_ptr2),y
         iny
         sta     screen_y1
         jsr     DrawLine
         jmp     @Loop

@Done:   lda     $c2
         ldy     #$00
         sta     (tmp_ptr2),y
Return3: rts

DrawTwoThings:
         ldy     $c2
         cpy     $c3
         php
         ldx     #$03
@CopyLoop:
         lda     screen_x0,x
         sta     $74,x
         dex
         bpl     @CopyLoop
         jsr     DrawLine
         lda     (tmp_ptr2),y
         sta     screen_x0
         lda     $74
         sta     (tmp_ptr2),y
         iny
         lda     (tmp_ptr2),y
         sta     screen_y0
         lda     $75
         sta     (tmp_ptr2),y
         iny
         lda     (tmp_ptr2),y
         sta     screen_x1
         lda     $76
         sta     (tmp_ptr2),y
         iny
         lda     (tmp_ptr2),y
         sta     screen_y1
         lda     $77
         sta     (tmp_ptr2),y
         iny
         sty     $c2
         plp
         bcs     Return3
         jmp     DrawLine

MVEIT:   lda     polyobj_vis
         and     #$a0
         bne     @L9089
         lda     $b6
         eor     $b0
         and     #$0f
         bne     @L906F
         jsr     L85FB
@L906F:  ldx     $b8
         bpl     @L9076
         jmp     L92FB

@L9076:  lda     polyobj_attack
         bpl     @L9089
         cpx     #$01
         beq     @L9086
         lda     $b6
         eor     $b0
         and     #$07
         bne     @L9089
@L9086:  jsr     TACTICS
@L9089:  jsr     SCAN
         lda     polyobj_vertex_lo
         asl     A
         asl     A
         sta     $ad
         lda     $16
         and     #$7f
         jsr     FMLTU
         sta     $ae
         lda     $16
         ldx     #$00
         jsr     L9208
         lda     $18
         and     #$7f
         jsr     FMLTU
         sta     $ae
         lda     $18
         ldx     #$03
         jsr     L9208
         lda     polyobj_mox2_hi
         and     #$7f
         jsr     FMLTU
         sta     $ae
         lda     polyobj_mox2_hi
         ldx     #$06
         jsr     L9208
         lda     polyobj_vertex_lo
         clc
         adc     $28
         bpl     @L90CB
         lda     #$00
@L90CB:  ldy     #$0f       ;max speed
         cmp     (hull_ptr),y ;get from hull definition
         bcc     @NotMax
         lda     (hull_ptr),y ;cap it at max
@NotMax: sta     polyobj_vertex_lo
         lda     #$00
         sta     $28
         ldx     $6b
         lda     polyobj_xpos_lo
         eor     #$ff
         sta     $31
         lda     INWK+1
         jsr     MLTU2
         sta     $33
         lda     $6d
         eor     INWK+2
         ldx     #$03
         jsr     L92C6
         sta     $c9
         lda     $32
         sta     $c7
         eor     #$ff
         sta     $31
         lda     $33
         sta     $c8
         ldx     $67
         jsr     MLTU2
         sta     $33
         lda     $c9
         eor     $a7
         ldx     #$06
         jsr     L92C6
         sta     polyobj_zpos_hi
         lda     $32
         sta     polyobj_zpos_lo
         eor     #$ff
         sta     $31
         lda     $33
         sta     polyobj_zpos_mi
         jsr     MLTU2_2
         sta     $33
         lda     $c9
         sta     INWK+5
         eor     $a7
         eor     polyobj_zpos_hi
         bpl     @L913B
         lda     $32
         adc     $c7
         sta     polyobj_ypos_lo
         lda     $33
         adc     $c8
         sta     INWK+4
         jmp     @L915B

@L913B:  lda     $c7
         sbc     $32
         sta     polyobj_ypos_lo
         lda     $c8
         sbc     $33
         sta     INWK+4
         bcs     @L915B
         lda     #$01
         sbc     polyobj_ypos_lo
         sta     polyobj_ypos_lo
         lda     #$00
         sbc     INWK+4
         sta     INWK+4
         lda     INWK+5
         eor     #$80
         sta     INWK+5
@L915B:  ldx     $6b
         lda     polyobj_ypos_lo
         eor     #$ff
         sta     $31
         lda     INWK+4
         jsr     MLTU2
         sta     $33
         lda     $6c
         eor     INWK+5
         ldx     #$00
         jsr     L92C6
         sta     INWK+2
         lda     $33
         sta     INWK+1
         lda     $32
         sta     polyobj_xpos_lo
L917D:   lda     player_speed
         sta     $ae
         lda     #$80
         ldx     #$06
         jsr     L920A
         lda     $b8
         and     #$81
         cmp     #$81
         bne     @L9191
         rts

@L9191:  ldy     #$09
         jsr     L925F
         ldy     #$0f
         jsr     L925F
         ldy     #$15
         jsr     L925F
         lda     polyobj_pitch
         and     #$80
         sta     $c5
         lda     polyobj_pitch
         and     #$7f
         beq     @L91C9
         cmp     #$7f
         sbc     #$00
         ora     $c5
         sta     polyobj_pitch
         ldx     #$0f
         ldy     #$09
         jsr     L53D4
         ldx     #$11
         ldy     #$0b
         jsr     L53D4
         ldx     #$13
         ldy     #$0d
         jsr     L53D4
@L91C9:  lda     polyobj_roll
         and     #$80
         sta     $c5
         lda     polyobj_roll
         and     #$7f
         beq     @L91F2
         cmp     #$7f
         sbc     #$00
         ora     $c5
         sta     polyobj_roll
         ldx     #$0f
         ldy     #$15
         jsr     L53D4
         ldx     #$11
         ldy     #$17
         jsr     L53D4
         ldx     #$13
         ldy     #$19
         jsr     L53D4
@L91F2:  lda     polyobj_vis
         and     #$a0
         bne     @L9201
         lda     polyobj_vis
         ora     #$10
         sta     polyobj_vis
         jmp     SCAN

@L9201:  lda     polyobj_vis
         and     #$ef
         sta     polyobj_vis
         rts

L9208:   and     #$80
L920A:   asl     A
         sta     $af
         lda     #$00
         ror     A
         sta     $d0
         lsr     $af
         eor     INWK+2,x
         bmi     @L922D
         lda     $ae
         adc     polyobj_xpos_lo,x
         sta     polyobj_xpos_lo,x
         lda     $af
         adc     INWK+1,x
         sta     INWK+1,x
         lda     INWK+2,x
         adc     #$00
         ora     $d0
         sta     INWK+2,x
         rts

@L922D:  lda     polyobj_xpos_lo,x
         sec
         sbc     $ae
         sta     polyobj_xpos_lo,x
         lda     INWK+1,x
         sbc     $af
         sta     INWK+1,x
         lda     INWK+2,x
         and     #$7f
         sbc     #$00
         ora     #$80
         eor     $d0
         sta     INWK+2,x
         bcs     @L925E
         lda     #$01
         sbc     polyobj_xpos_lo,x
         sta     polyobj_xpos_lo,x
         lda     #$00
         sbc     INWK+1,x
         sta     INWK+1,x
         lda     #$00
         sbc     INWK+2,x
         and     #$7f
         ora     $d0
         sta     INWK+2,x
@L925E:  rts

L925F:   lda     $b9
         sta     $ad
         ldx     INWK+2,y
         stx     $ae
         ldx     polyobj_ypos_lo,y
         stx     $af
         ldx     polyobj_xpos_lo,y
         stx     $31
         lda     INWK+1,y
         eor     #$80
         jsr     MAD
         sta     polyobj_ypos_lo,y
         stx     INWK+2,y
         stx     $31
         ldx     polyobj_xpos_lo,y
         stx     $ae
         ldx     INWK+1,y
         stx     $af
         lda     polyobj_ypos_lo,y
         jsr     MAD
         sta     INWK+1,y
         stx     polyobj_xpos_lo,y
         stx     $31
         lda     $66
         sta     $ad
         ldx     INWK+2,y
         stx     $ae
         ldx     polyobj_ypos_lo,y
         stx     $af
         ldx     INWK+4,y
         stx     $31
         lda     INWK+5,y
         eor     #$80
         jsr     MAD
         sta     polyobj_ypos_lo,y
         stx     INWK+2,y
         stx     $31
         ldx     INWK+4,y
         stx     $ae
         ldx     INWK+5,y
         stx     $af
         lda     polyobj_ypos_lo,y
         jsr     MAD
         sta     INWK+5,y
         stx     INWK+4,y
         rts

L92C6:   tay
         eor     INWK+2,x
         bmi     @L92DA
         lda     $32
         clc
         adc     polyobj_xpos_lo,x
         sta     $32
         lda     $33
         adc     INWK+1,x
         sta     $33
         tya
         rts

@L92DA:  lda     polyobj_xpos_lo,x
         sec
         sbc     $32
         sta     $32
         lda     INWK+1,x
         sbc     $33
         sta     $33
         bcc     @L92ED
         tya
         eor     #$80
         rts

@L92ED:  lda     #$01
         sbc     $32
         sta     $32
         lda     #$00
         sbc     $33
         sta     $33
         tya
         rts

L92FB:   lda     $b9
         eor     #$80
         sta     $ad
         lda     polyobj_xpos_lo
         sta     $31
         lda     INWK+1
         sta     $32
         lda     INWK+2
         jsr     L5EA2
         ldx     #$03
         jsr     L5378
         lda     $7b
         sta     $c7
         sta     $31
         lda     $7c
         sta     $c8
         sta     $32
         lda     $66
         sta     $ad
         lda     $7d
         sta     $c9
         jsr     L5EA2
         ldx     #$06
         jsr     L5378
         lda     $7b
         sta     $31
         sta     polyobj_zpos_lo
         lda     $7c
         sta     $32
         sta     polyobj_zpos_mi
         lda     $7d
         sta     polyobj_zpos_hi
         eor     #$80
         jsr     L5EA2
         lda     $7d
         and     #$80
         sta     $d0
         eor     $c9
         bmi     @L9366
         lda     $7a
         clc
         adc     $c6
         lda     $7b
         adc     $c7
         sta     polyobj_ypos_lo
         lda     $7c
         adc     $c8
         sta     INWK+4
         lda     $7d
         adc     $c9
         jmp     @L9399

@L9366:  lda     $7a
         sec
         sbc     $c6
         lda     $7b
         sbc     $c7
         sta     polyobj_ypos_lo
         lda     $7c
         sbc     $c8
         sta     INWK+4
         lda     $c9
         and     #$7f
         sta     $31
         lda     $7d
         and     #$7f
         sbc     $31
         sta     $31
         bcs     @L9399
         lda     #$01
         sbc     polyobj_ypos_lo
         sta     polyobj_ypos_lo
         lda     #$00
         sbc     INWK+4
         sta     INWK+4
         lda     #$00
         sbc     $31
         ora     #$80
@L9399:  eor     $d0
         sta     INWK+5
         lda     $b9
         sta     $ad
         lda     polyobj_ypos_lo
         sta     $31
         lda     INWK+4
         sta     $32
         lda     INWK+5
         jsr     L5EA2
         ldx     #$00
         jsr     L5378
         lda     $7b
         sta     polyobj_xpos_lo
         lda     $7c
         sta     INWK+1
         lda     $7d
         sta     INWK+2
         jmp     L917D

L93C2:   ldx     PLAYER_STATE+49
         beq     @L93FA
         dex
         bne     @L93FB
         lda     INWK+2
         eor     #$80
         sta     INWK+2
         lda     polyobj_zpos_hi
         eor     #$80
         sta     polyobj_zpos_hi
         lda     $16
         eor     #$80
         sta     $16
         lda     polyobj_mox2_hi
         eor     #$80
         sta     polyobj_mox2_hi
         lda     $1c
         eor     #$80
         sta     $1c
         lda     $20
         eor     #$80
         sta     $20
         lda     $22
         eor     #$80
         sta     $22
         lda     $26
         eor     #$80
         sta     $26
@L93FA:  rts

@L93FB:  lda     #$00
         cpx     #$02
         ror     A
         sta     $c5
         eor     #$80
         sta     $c4
         lda     polyobj_xpos_lo
         ldx     polyobj_zpos_lo
         sta     polyobj_zpos_lo
         stx     polyobj_xpos_lo
         lda     INWK+1
         ldx     polyobj_zpos_mi
         sta     polyobj_zpos_mi
         stx     INWK+1
         lda     INWK+2
         eor     $c4
         tax
         lda     polyobj_zpos_hi
         eor     $c5
         sta     INWK+2
         stx     polyobj_zpos_hi
         ldy     #$09
         jsr     @L942F
         ldy     #$0f
         jsr     @L942F
         ldy     #$15
@L942F:  lda     polyobj_xpos_lo,y
         ldx     INWK+4,y
         sta     INWK+4,y
         stx     polyobj_xpos_lo,y
         lda     INWK+1,y
         eor     $c4
         tax
         lda     INWK+5,y
         eor     $c5
         sta     INWK+1,y
         stx     INWK+5,y
Return4: rts

L944A:   stx     PLAYER_STATE+49
         jsr     PrintFlightHud
         jsr     L947D
         lda     have_energy_bomb
         bpl     @L945B
         jsr     DrawBombAnim
@L945B:  jmp     L73CD

; 
; Set the view direction (forward/left/right/back).
; 
; On entry:
;   X-reg: direction (0=front, 1=rear, 2=left, 3=right)
; 
SetViewDirection:
         lda     #$00
         ldy     displayed_screen
         bne     L944A
         cpx     PLAYER_STATE+49
         beq     Return4    ;view unchanged
         stx     PLAYER_STATE+49
         jsr     PrintFlightHud
         jsr     L5026
         lda     have_energy_bomb
         bpl     @L947A
         jsr     DrawBombAnim
@L947A:  jsr     L73F3
L947D:   ldy     PLAYER_STATE+49
         lda     $029f,y
         beq     Return4
         ldy     #$00
         cmp     #$0f
         beq     @L9496
         iny
         cmp     #$8f
         beq     @L9496
         iny
         cmp     #$97
         beq     @L9496
         iny
@L9496:  lda     @L94B1,y
         sta     $35
         lda     #$80
         sta     $a1
         lda     #$2c
         sta     $a2
         lda     #$14
         sta     $a3
         jsr     L6642
         lda     #$0a
         sta     $a3
         jmp     L6642

@L94B1:  .byte   $10
         .byte   $14
         .byte   $0c
         .byte   $0c
         .byte   $04
         .byte   $14
         .byte   $08
         .byte   $0c

PrintFlightHud:
         sta     displayed_screen
L94BB:   jsr     SetUcaseMask
         lda     #$00
         sta     $91
         lda     #$80
         sta     text_mod_flags
         sta     txt_lcase_flag
         lda     #$01
         sta     text_hposn
         sta     text_vposn
         jsr     LA197
         lda     display_mode_flag
         bmi     @L94D9
         jsr     L7428
@L94D9:  lda     #$00
         sta     PLAYER_STATE+47
         sta     PLAYER_STATE+54
         sta     $0278
         ldx     $69
         beq     @L94EB
         jsr     L6C03
@L94EB:  lda     #$01
         sta     text_vposn
         lda     displayed_screen
         bne     @L9507
         lda     #11
         sta     text_hposn
         lda     PLAYER_STATE+49
         ora     #$60       ;"Front"/"Rear"/"Left"/"Right"
         jsr     PrintFlightToken
         jsr     PrintSpace
         lda     #$af       ;"View"
         jsr     PrintFlightToken
@L9507:  ldx     #$01
         stx     text_hposn
         stx     text_vposn
         dex
         stx     text_mod_flags ;flags=0
         rts

L9511:   rts

L9512:   lda     #$00
         sta     ecm_active_flag
         sta     player_ecm_active
         jmp     LA013

; BBC .SFRMIS
; "Spawn missile with ai=#$FE max but no ecm"
LaunchMissile:
         ldx     #1         ;missile
         jsr     LaunchObject
         bcc     L9511
         lda     #$78       ;"Incoming Missile"
         jsr     PrintMessageBriefly
         ldy     #$32
         jmp     MakeNoise1

CountKill:
         lda     kill_score_rem
         clc
         adc     kill_score_lo-1,x
         sta     kill_score_rem
         lda     kill_score
         adc     kill_score_hi-1,x
         sta     kill_score
         bcc     @NoInc
         inc     kill_score+1
         lda     #$65       ;"Right On Commander!"
         jsr     PrintMessageBriefly ;(prints every 256 kill-scores)
@NoInc:  ldy     #$37
         bne     L9571

L954E:   ldy     #$0f
         bne     L9571

Noise1:  ldy     #$63
         ldx     #$ff
         bne     MakeNoise31

MakeNoise1:
         bit     sound_disab_flag
         bmi     Return5
@L955D:  lda     SPKR       ;click
         jsr     GetRandom
@L9563:  dex
         nop
         nop
         bne     @L9563
         dey
         bne     @L955D
         lda     SPKR
         rts

MakeNoise2:
         ldy     #$28
L9571:   bit     sound_disab_flag
         bmi     Return5
         ldx     #$32
         stx     $08
@L957A:  lda     SPKR
         inc     $08
         ldx     $08
@L9581:  dex
         nop
         nop
         bne     @L9581
         jsr     GetRandom
@L9589:  dex
         nop
         bne     @L9589
         dey
         bne     @L957A
         lda     SPKR
         rts

MakeNoise3:
         ldy     #$1e
         ldx     #$6e
MakeNoise31:
         bit     sound_disab_flag
         bmi     Return5
         stx     $08
@L959F:  lda     SPKR
         ldx     $08
@L95A4:  dex
         bne     @L95A4
         dey
         bne     @L959F
         lda     SPKR
Return5: rts

MakeNoise4:
         bit     sound_disab_flag
         bmi     Return5
         stx     $08
@L95B5:  lda     SPKR
         dec     $08
         ldx     $08
@L95BC:  dex
         nop
         bne     @L95BC
         dey
         bne     @L95B5
         lda     SPKR
         rts

MakeNoise5:
         ldy     #$0b
         ldx     #$96
         bit     sound_disab_flag
         bmi     Return5
         stx     $08
@L95D2:  lda     SPKR
         inc     $08
         inc     $08
         ldx     $08
@L95DB:  dex
         bne     @L95DB
         dey
         bne     @L95D2
         lda     SPKR
         rts

         .byte   $a0
         .byte   $0b
         .byte   $a2
         .byte   $82

MakeNoise6:
         bit     sound_disab_flag
         bmi     Return5
         ldy     #$19
@L95F0:  lda     SPKR
         jsr     GetRandom
         and     #$1f
         ora     #$e0
         tax
@L95FB:  dex
         nop
         bne     @L95FB
         dey
         bne     @L95F0
         lda     SPKR
         rts

MakeNoise7:
         bit     sound_disab_flag
         bmi     @L960E
         lda     SPKR
@L960E:  rts

; 
; Initialize some basic things: show the hi-res screen, zero out variable
; storage, etc.
; 
ptr      .set    $0a
InitSystem:
         jsr     ShowHiRes
         lda     #$08       ;set ptr to $800
         sta     ptr+1
         ldx     #$02       ;erase two pages ($800-9FF)
         lda     #$00
         sta     ptr
         tay                ;A/Y to zero
@Loop:   sta     (ptr),y
         iny
         bne     @Loop
         inc     ptr+1
         dex
         bne     @Loop
@L9627:  sta     $0200,y    ;clear $200-2ff
         dey
         bne     @L9627
         lda     #$41       ;set NMI vector for some reason
         sta     NMIVEC+1
         lda     #$96
         sta     NMIVEC+2
         lda     #$93       ;line ~18
         sta     text_vposn
         lda     #$a0
         sta     text_mod_flags
         sei                ;disable interrupts
         rts

         .byte   $58
         .byte   $40
disk_filename:
         .byte   "COMMANDER                     "

DiskLoadGame:
         tsx
         stx     rwts_saved_stack
         jsr     DiskFindFile
         lda     #$05
         bcs     Return6
         jsr     DiskLoadTSList
         jsr     DiskReadSector
         ldy     #$00       ;copy data to scrambled-save area
@Loop:   lda     data_buffer+4,y ;start at offset +4 to skip 'B' header
         sta     scram_save_data,y
         iny
         cpy     #$6e       ;length of saved-game data
         bne     @Loop
         clc
Return6: rts

DiskSaveGame:
         jsr     ScrambleSaveData
         tsx
         stx     rwts_saved_stack
         jsr     DiskFindFile
         bcc     @FoundFile
; File doesn't exist, create it.
         jsr     L97C4
         lda     #$02
         bcs     Return6
         jsr     DiskFindEmpty ;find an empty slot (returned in Y-reg)
         lda     #$03
         bcs     Return6    ;return with err 3 (cat full) if we failed
         lda     rwts_ts_track ;set track/sector for file T/S list
         sta     data_buffer,y
         lda     rwts_ts_sector
         sta     data_buffer+1,y
         lda     #$04       ;type 'B'
         sta     data_buffer+2,y
         lda     #$02       ;length in sectors = $0002
         sta     data_buffer+33,y
         lda     #$00
         sta     data_buffer+34,y
         tax                ;X-reg=0
@Loop:   lda     disk_filename,x ;copy filename
         ora     #$80       ;set high ASCII
         sta     data_buffer+3,y
         iny
         inx
         cpx     #30
         bne     @Loop
         jsr     DiskWriteSector ;write the catalog sector
         jsr     L97C4
         jsr     DiskWriteSector
         lda     #$00
         tay
@L96D1:  sta     data_buffer,y
         iny
         bne     @L96D1
         lda     rwts_alloc_track
         sta     data_buffer+12
         lda     rwts_alloc_sector
         sta     data_buffer+13
         lda     rwts_ts_track
         sta     rwts_track
         lda     rwts_ts_sector
         sta     rwts_sector
         jsr     DiskWriteSector
         lda     rwts_alloc_track
         sta     rwts_track
         lda     rwts_alloc_sector
         sta     rwts_sector
         bpl     @L9703
@FoundFile:
         jsr     DiskLoadTSList
@L9703:  ldy     #$00
@L9705:  lda     scram_save_data,y
         sta     data_buffer+4,y
         iny
         cpy     #$6e
         bne     @L9705
         jmp     DiskWriteSector

; 
; Finds an entry with a matching filename in the disk catalog.
; 
max_tries .set   $6e
chksum   .set    $6f
max_retry .set   $70
DiskFindFile:
         clc
         bcc     DiskFindCommon

; 
; Finds the first empty or deleted slot in the catalog.
; 
DiskFindEmpty:
         sec
DiskFindCommon:
         ror     rwts_find_slot_flag ;set high bit to carry flag
         jsr     DiskReadVtoc ;load the VTOC
@GetCatSect:
         lda     data_buffer+1 ;T/S of first catalog sector
         sta     rwts_track
         lda     data_buffer+2
         sta     rwts_sector
         jsr     DiskReadSector ;read sector
         ldy     #11        ;first cat entry at +11
@CheckEntry:
         lda     data_buffer,y ;+0 is unused/deleted flag
         bit     rwts_find_slot_flag ;are we looking for an empty slot?
         bpl     @FindFile  ;no, branch
         tax                ;see if entry is unused
         beq     @Done      ;yes, bail out
         cmp     #$ff       ;deleted file?
         beq     @Done      ;yes, bail out
         bne     @TryNext

@FindFile:
         tax                ;empty slot?
         beq     @Fail      ;yes, assume end of catalog
         cmp     #$ff       ;deleted file?
         beq     @TryNext   ;yes, try next slot
         tya
         pha                ;save offset
         ldx     #$00
@StrCmp: lda     data_buffer+3,y ;filename starts at +3
         and     #$7f       ;normalize high bit
         cmp     disk_filename,x ;compare to desired filename
         bne     @NoMatch
         iny
         inx
         cpx     #30        ;filenames are 30 chars long
         bne     @StrCmp    ;not done yet
         pla                ;success; restore slot offset
         tay
@Done:   clc
         rts

@NoMatch:
         pla                ;restore offset
         tay
@TryNext:
         tya
         clc
         adc     #35        ;advance to next entry (35 bytes each)
         tay
         bne     @CheckEntry
         lda     data_buffer+1 ;is there another catalog sector?
         bne     @GetCatSect ;yes, try that one
@Fail:   sec
         rts

sector   .set    $6e
DiskAllocateSector:
         lda     #$00
         sta     sector
         beq     @L9777     ;(always)

@L9774:  lda     data_buffer+49 ;+$31 direction of allocation
@L9777:  clc
         adc     data_buffer+48 ;+$30 last track where sectors were allocated
         beq     @L9786
         cmp     data_buffer+52 ;+$34 number of tracks per disk
         bcc     @L9794
         lda     #$ff
         bne     @L978E

@L9786:  lda     sector
         bne     @L97C2
         lda     #$01
         sta     sector
@L978E:  sta     data_buffer+49
         clc
         adc     #$11
@L9794:  sta     data_buffer+48
         asl     A
         asl     A
         tay
         ldx     #$10
         lda     data_buffer+56,y ;+$38 volume bitmap
         bne     @L97A9
         iny
         ldx     #$08
         lda     data_buffer+56,y
         beq     @L9774
@L97A9:  stx     sector
         ldx     #$00
@L97AD:  inx
         dec     sector
         rol     A
         bcc     @L97AD
         clc
@L97B4:  ror     A
         dex
         bne     @L97B4
         sta     data_buffer+56,y
         ldx     data_buffer+48 ;track
         ldy     sector     ;sector
         clc
         rts

@L97C2:  sec
         rts

L97C4:   jsr     DiskReadVtoc
         jsr     DiskAllocateSector
         bcs     @L97DB
         stx     rwts_ts_track
         sty     rwts_ts_sector
         jsr     DiskAllocateSector
         stx     rwts_alloc_track ;T/S list track/sector
         sty     rwts_alloc_sector
@L97DB:  rts

; 
; Load a file's T/S list into memory.
; 
; On entry:
;   data buffer holds the catalog sector
;   Y-reg: offset to entry in catalog
; 
; On exit:
;   rwts_track: first entry from T/S list
;   rwts_sector: first entry from T/S list
;   Y-reg: $0C (offset of first entry)
; 
DiskLoadTSList:
         lda     data_buffer,y
         sta     rwts_track
         lda     data_buffer+1,y
         sta     rwts_sector
         jsr     DiskReadSector ;read T/S list
         ldy     #$0c       ;offset of first entry in list
         lda     data_buffer,y
         sta     rwts_track
         lda     data_buffer+1,y
         sta     rwts_sector
         rts

; 
; Read the disk VTOC.
; 
DiskReadVtoc:
         lda     #17        ;disk VTOC (T17 S0)
         sta     rwts_track
         lda     #0
         sta     rwts_sector ;fall through to read routine
; 
; Reads the requested track/sector.
; 
; Assumes slot 6 drive 1.
; 
; On entry:
;   rwts_track: track to read
;   rwts_sector: sector to read
; 
DiskReadSector:
         clc                ;C=0 -> read
         bcc     RWCommon

DiskWriteSector:
         sec                ;C=1 -> write
RWCommon:
         php                ;save flags for later
         lda     #$60       ;assume slot 6
         sta     rwts_slot
         lda     #$02
         sta     rwts_retry_1
         lda     #$04
         sta     rwts_retry_2
         lda     #$d8
         sta     rwts_delay_ctr+1
         ldx     rwts_slot
         lda     IWM_Q7_OFF,x ;configure read mode
         lda     IWM_Q6_OFF,x
         ldy     #$08       ;repeat 8x
@ChkChange:
         lda     IWM_Q6_OFF,x ;get pending byte
         pha
         pla
         pha
         pla
         cmp     BUFFER_0100 ;stall for 18 cycles
         cmp     IWM_Q6_OFF,x ;has the data changed?
         bne     @DidChange ;yes, good to go
         dey
         bne     @ChkChange ;try again
@DidChange:
         php                ;preserve Z flag
         lda     IWM_MOTOR_ON,x ;start the disk spinning
         lda     IWM_DRIVE_1,x ;select drive 1
         plp                ;restore Z flag
         php
         bne     @DidChange2
         ldy     #$07       ;call delay function 7x
@DelayLoop:
         jsr     DiskDelay  ;first call delays by whatever is in A-reg
         dey                ;subsequent calls delay by A=0 (256 iterations)
         bne     @DelayLoop
         ldx     rwts_slot  ;reload X-reg (trashed by delay func)
@DidChange2:
         lda     rwts_track
         jsr     DiskSeekToTrack ;seek to target track
         plp                ;restore Z flag
         bne     @DidChange3
         ldy     rwts_delay_ctr+1
         bpl     @DidChange3
@Loop1:  ldy     #$12       ;let's wait some more
@Loop2:  dey
         bne     @Loop2
         inc     rwts_delay_ctr
         bne     @Loop1
         inc     rwts_delay_ctr+1
         bne     @Loop1
@DidChange3:
         plp                ;restore initial flags
         php
         bcc     @ReadHeader
         jsr     DiskEncode62 ;for writing, perform 6&2 encoding
@ReadHeader:
         ldy     #$30
         sty     max_retry
@ReadHdrLoop:
         ldx     rwts_slot
         jsr     DiskReadNextAddr ;find the next address field
         bcc     @HdrOk
@TryNextSector:
         dec     max_retry
         bpl     @ReadHdrLoop
@DecRetry1:
         dec     rwts_retry_1
         beq     @Fail
; Something went wrong.  Try to reset.
         lda     #$04
         sta     rwts_retry_2
         lda     #$60
         sta     rwts_current_track
         lda     #$00       ;seek to track 0
         jsr     DiskSeekToTrack
@SeekToTrack:
         lda     rwts_track ;seek to desired track
         jsr     DiskSeekToTrack
         jmp     @ReadHeader ;try again

@HdrOk:  ldy     rwts_addr_track ;get the track we read from addr header
         cpy     rwts_track ;does it match where we think we are?
         beq     @GoodTrack ;yes, branch
         dec     rwts_retry_2
         bne     @SeekToTrack
         beq     @DecRetry1 ;(always)

         .byte   $a9,$01,$10,$34,$a9,$04

@ReturnErr:
         ldx     rwts_saved_stack
         txs
         ldx     rwts_slot
         ldy     IWM_MOTOR_OFF,x ;turn drive off
         sec                ;indicate error (code in A-reg)
         rts

@GoodTrack:
         ldy     rwts_sector ;get desired sector number
         lda     rwts_sect_skew,y ;convert to physical
         cmp     rwts_addr_sect ;is this what we found?
         bne     @TryNextSector ;no, keep looking
         plp                ;check status flags
         bcs     @DoWrite   ;C=1, writing
         jsr     DiskReadSectData ;C=0, reading
         php                ;push flags -- WARNING a failed read will switch us
         bcs     @TryNextSector ; to write mode!
         plp
         jsr     DiskDecode62
         jmp     @Done

@DoWrite:
         jsr     DiskWriteSectData
         bcc     @Done
         lda     #$01
         bpl     @ReturnErr ;(always)

@Fail:   lda     #$04
         ldx     rwts_saved_stack
         txs
         sec
         bcs     @MotorOff

@Done:   lda     #$00
         clc
@MotorOff:
         ldx     rwts_slot
         ldy     IWM_MOTOR_OFF,x
         rts

; 
; Reads the sector data header and contents.
; 
; This appears to be identical to the DOS 3.3 READ routine ($B8DC).
; 
; On entry:
;   X-reg: slot * 16
; 
; On exit:
;   C=0 on success, C=1 on failure
; 
bits     .set    $6e
DiskReadSectData:
         ldy     #$20
@L98FB:  dey
         beq     @Fail
@RdLoop: lda     IWM_Q6_OFF,x ;look for data prologue (D5 AA AD)
         bpl     @RdLoop
@L9903:  eor     #$d5
         bne     @L98FB
         nop
@RdLoop1:
         lda     IWM_Q6_OFF,x
         bpl     @RdLoop1
         cmp     #$aa
         bne     @L9903
         ldy     #86        ;want 86 bytes of 2/2/2 data
@RdLoop2:
         lda     IWM_Q6_OFF,x
         bpl     @RdLoop2
         cmp     #$ad
         bne     @L9903
; Got the header, read the sector data.
         lda     #$00
@ReadTwosLoop:
         dey
         sty     bits
@RdLoop3:
         ldy     IWM_Q6_OFF,x
         bpl     @RdLoop3
         eor     TrackStep+2,y
         ldy     bits
         sta     L0A00,y
         bne     @ReadTwosLoop
@ReadSixesLoop:
         sty     bits       ;want 256 bytes of 6-bit data
@RdLoop4:
         ldy     IWM_Q6_OFF,x
         bpl     @RdLoop4
         eor     rwts_decode62-150,y
         ldy     bits
         sta     $0900,y
         iny
         bne     @ReadSixesLoop
@RdLoop5:
         ldy     IWM_Q6_OFF,x
         bpl     @RdLoop5
         cmp     rwts_decode62-150,y
         bne     @Fail
@RdLoop6:
         lda     IWM_Q6_OFF,x ;look for data epilogue (DE AA)
         bpl     @RdLoop6
         cmp     #$de
         bne     @Fail
         nop
@RdLoop7:
         lda     IWM_Q6_OFF,x
         bpl     @RdLoop7
         cmp     #$aa
         beq     @L9961
@Fail:   sec
         rts

@L9961:  clc
         rts

; 
; Writes the sector data header and contents.  This appears to be identical to
; the DOS 3.3 WRITE routine ($B82A).
; 
; IMPORTANT: most of this code is timing-critical and must fit on a single page,
; because branching across a page boundary costs an extra cycle.
; 
; On entry:
;   X-reg: slot * 16
; 
last_val .set    $6e
slot     .set    $6f
DiskWriteSectData:
         sec                ;set in case of write-protect failure
         stx     slot
         lda     IWM_Q6_ON,x ;check write protect
         lda     IWM_Q7_OFF,x
         bmi     @Done
         lda     L0A00
         sta     last_val
         lda     #$ff       ;sync bytes
         sta     IWM_Q7_ON,x ;write first
         ora     IWM_Q6_OFF,x
         pha
         pla
         nop
         ldy     #$04       ;write 5 more
@Loop:   pha
         pla
         jsr     DiskWriteByte2
         dey
         bne     @Loop
         lda     #$d5       ;write data prologue
         jsr     DiskWriteByte
         lda     #$aa
         jsr     DiskWriteByte
         lda     #$ad
         jsr     DiskWriteByte
         tya
         ldy     #$56
         bne     @SkipFwd   ;(always)

@Loop1:  lda     L0A00,y    ;get data
@SkipFwd:
         eor     L0A00-1,y  ;exclusive-or with prev
         tax
         lda     rwts_encode62,x ;get 6&2 value
         ldx     slot
         sta     IWM_Q6_ON,x
         lda     IWM_Q6_OFF,x
         dey
         bne     @Loop1
         lda     last_val
         nop
@Loop2:  eor     $0900,y
         tax
         lda     rwts_encode62,x
         ldx     rwts_slot
         sta     IWM_Q6_ON,x
         lda     IWM_Q6_OFF,x
         lda     $0900,y
         iny
         bne     @Loop2
         tax
         lda     rwts_encode62,x ;get the last one
         ldx     slot
         jsr     DiskWriteByte3 ;write it
         lda     #$de       ;write the data epilogue
         jsr     DiskWriteByte
         lda     #$aa
         jsr     DiskWriteByte
         lda     #$eb
         jsr     DiskWriteByte
         lda     #$ff
         jsr     DiskWriteByte
         lda     IWM_Q7_OFF,x ;turn off write mode
@Done:   lda     IWM_Q6_OFF,x ;turn on read mode
         rts

; 
; Reads the header from the next address field to pass by.
; 
; Appears to be the same as the RDADR routine in DOS 3.3 ($B944).
; 
max_tries .set   $6e
chksum   .set    $6f
DiskReadNextAddr:
         ldy     #$fc       ;3 * 256 + 3 = 771 attempts
         sty     max_tries
@Retry:  iny
         bne     @RdLoop
         inc     max_tries
         beq     @Fail
@RdLoop: lda     IWM_Q6_OFF,x ;read a byte
         bpl     @RdLoop
@CheckD5:
         cmp     #$d5       ;look for D5 AA 96
         bne     @Retry
         nop
@RdLoop1:
         lda     IWM_Q6_OFF,x ;got D5, look for AA
         bpl     @RdLoop1
         cmp     #$aa
         bne     @CheckD5
         ldy     #$03       ;set Y-reg=3 (read 4 bytes)
@RdLoop2:
         lda     IWM_Q6_OFF,x
         bpl     @RdLoop2
         cmp     #$96
         bne     @CheckD5   ;note carry is set when byte matches
         lda     #$00       ;init checksum
@HdrFieldLoop:
         sta     chksum
@RdLoop3:
         lda     IWM_Q6_OFF,x ;read odd bits
         bpl     @RdLoop3   ;A-reg=1a1c1e1g
         rol     A          ;A-reg=a1c1e1g1
         sta     max_tries  ;re-use as temp var
@RdLoop4:
         lda     IWM_Q6_OFF,x ;read even bits
         bpl     @RdLoop4   ;A-reg=1b1d1f1h
         and     max_tries  ;merge: A-reg=abcdefgh
         sta     rwts_addr_fields,y
         eor     chksum
         dey
         bpl     @HdrFieldLoop
         tay
         bne     @Fail
@RdLoop5:
         lda     IWM_Q6_OFF,x ;look for epilogue DE AA
         bpl     @RdLoop5
         cmp     #$de
         bne     @Fail
         nop
@RdLoop6:
         lda     IWM_Q6_OFF,x
         bpl     @RdLoop6
         cmp     #$aa
         bne     @Fail
         clc
         rts

@Fail:   sec
         rts

; 
; Seek to desired track.  Essentially the same as SEEKABS in DOS 3.3 ($B9A0).
; 
; On entry:
;   A-reg: whole track number (0-34)
;   X-reg: slot number * 16
; 
; 
slot     .set    $6e
target_track .set $6f
htrack_count .set $70
cur_track .set   $71
DiskSeekToTrack:
         stx     slot       ;save slot index
         asl     A          ;double track number (half-tracks)
         cmp     rwts_current_track ;already there?
         beq     Return7    ;yes, bail
         sta     target_track
         lda     #$00
         sta     htrack_count
; Update the current track number to point to the next half-track.
@SeekLoop:
         lda     rwts_current_track
         sta     cur_track  ;compute delta between current and target
         sec
         sbc     target_track
         beq     @Finish    ;we're there, finish up
         bcs     @MovingIn  ;current is larger, branch
         eor     #$ff       ;make positive; note we implicitly subtract 1
         inc     rwts_current_track ;moving toward outside of disk
         bcc     @Cont      ;(always)

@MovingIn:
         adc     #$fe       ;carry is set, so this adds $FF (subtracts 1)
         dec     rwts_current_track
@Cont:   cmp     htrack_count
         bcc     @L9A78
         lda     htrack_count
@L9A78:  cmp     #$0c       ;after 12 iterations, don't update Y-reg
         bcs     @NoUpdateY
         tay
@NoUpdateY:
         sec
         jsr     TrackStep
         lda     seek_delay0,y
         jsr     DiskDelay  ;pause to let head move
         lda     cur_track  ;previous track
         clc
         jsr     TrackStep2 ;move head, call with carry clear
         lda     seek_delay1,y
         jsr     DiskDelay  ;pause to let head move
         inc     htrack_count
         bne     @SeekLoop  ;(always)
@Finish: jsr     DiskDelay
         clc
; Turn on the appropriate stepper motor.  Phase is determined by the target
; track and the carry flag.
TrackStep:
         lda     rwts_current_track
TrackStep2:
         and     #$03
         rol     A
         ora     slot
         tax
         lda     IWM_PH0_OFF,x
         ldx     slot
Return7: rts

; Arm move delay routine.  Delays for the specified number of 100usec intervals
; (A-reg).
; 
; Timing-critical, must not span a page boundary.
DiskDelay:
         ldx     #$11
@Loop1:  dex
         bne     @Loop1
         inc     rwts_delay_ctr
         bne     @Loop2
         inc     rwts_delay_ctr+1
@Loop2:  sec
         sbc     #$01
         bne     DiskDelay
         rts

seek_delay0:
         .byte   $01,$30,$28,$24,$20,$1e,$1d,$1c,$1c,$1c,$1c,$1c
seek_delay1:
         .byte   $70,$2c,$26,$22,$1f,$1e,$1d,$1c,$1c,$1c,$1c,$1c

; 
; Encodes 256 bytes into 6&2 format.
; 
; Same as DOS 3.3 PRENIBBLE routine ($B800).
; 
DiskEncode62:
         ldx     #$00
         ldy     #$02
@Loop:   dey
         lda     data_buffer,y
         lsr     A
         rol     L0A00,x
         lsr     A
         rol     L0A00,x
         sta     $0900,y
         inx
         cpx     #$56
         bcc     @Loop
         ldx     #$00
         tya
         bne     @Loop
         ldx     #$55
@Loop1:  lda     L0A00,x
         and     #$3f
         sta     L0A00,x
         dex
         bpl     @Loop1
         rts

; 
; Decodes 342 bytes of 6&2 data to 256 bytes.
; 
; Same as DOS 3.3 POSTNIBBLE routine ($B8C2).
; 
DiskDecode62:
         ldy     #$00
@Loop1:  ldx     #$56
@Loop2:  dex
         bmi     @Loop1
         lda     $0900,y    ;raw data buffer
         lsr     L0A00,x    ;twos buffer
         rol     A
         lsr     L0A00,x    ;twos buffer
         rol     A
         sta     data_buffer,y ;cooked data buffer
         iny
         bne     @Loop2
         rts

DiskWriteByte:
         clc
DiskWriteByte2:
         pha
         pla
DiskWriteByte3:
         sta     IWM_Q6_ON,x
         ora     IWM_Q6_OFF,x
         rts

rwts_sect_skew:
         .byte   $00,$0d,$0b,$09,$07,$05,$03,$01,$0e,$0c,$0a,$08,$06,$04,$02,$0f
rwts_decode62:
         .byte   $00,$01,$98,$99,$02,$03,$9c,$04,$05,$06,$a0,$a1,$a2,$a3,$a4,$a5
         .byte   $07,$08,$a8,$a9,$aa,$09,$0a,$0b,$0c,$0d,$b0,$b1,$0e,$0f,$10,$11
         .byte   $12,$13,$b8,$14,$15,$16,$17,$18,$19,$1a,$c0,$c1,$c2,$c3,$c4,$c5
         .byte   $c6,$c7,$c8,$c9,$ca,$1b,$cc,$1c,$1d,$1e,$d0,$d1,$d2,$1f,$d4,$d5
         .byte   $20,$21,$d8,$22,$23,$24,$25,$26,$27,$28,$e0,$e1,$e2,$e3,$e4,$29
         .byte   $2a,$2b,$e8,$2c,$2d,$2e,$2f,$30,$31,$32,$f0,$f1,$33,$34,$35,$36
         .byte   $37,$38,$f8,$39,$3a,$3b,$3c,$3d,$3e,$3f

; 
; Scrambles save-game data.  Updates the RNG state and records it to the game
; file, then uses it to scramble the data.
; 
ScrambleSaveData:
         lda     scramble_thing
         eor     rng_state
         sta     rng_state
         sta     scram_rng_seed
         eor     #$a5
         ora     #$11
         eor     rng_state+1
         sta     rng_state+1
         sta     scram_rng_seed+1
         eor     rng_state+2
         eor     #$f8
         sta     rng_state+2
         sta     scram_rng_seed+2
         eor     rng_state+3
         eor     #$12
         sta     rng_state+3
         sta     scram_rng_seed+3
DoScrambleSave:
         ldy     #$69
@L9BC6:  jsr     SaveScramble
         eor     scram_save_data,y
         sta     scram_save_data,y
         dey
         bpl     @L9BC6
         rts

UnscrambleSaveData:
         ldy     #$03
@L9BD5:  lda     scram_rng_seed,y ;restore the RNG seed
         sta     rng_state,y
         dey
         bpl     @L9BD5
         bmi     DoScrambleSave ;twice to undo

hi_res_pixel:
         .byte   $01,$02,$04,$08,$10,$20,$40
hi_res_2pixel:
         .byte   $83,$86,$8c,$98,$b0,$e0,$c0
rt_end_pixels:
         .byte   $83,$87,$8f,$9f,$bf,$ff,$ff
lf_end_pixels:
         .byte   $ff,$fe,$fc,$f8,$f0,$e0,$c0
; 
; Low byte of the address of a row on the text screen.  The high byte is
; computed directly.
; 
; Values are offset by 2 because the text and hi-res text appear in the same
; places, and we need to leave room for the hi-res window frame..
; 
text_addr_lo:
         .byte   $02,$82,$02,$82,$02,$82,$02,$82,$2a,$aa,$2a,$aa,$2a,$aa,$2a,$aa
         .byte   $52,$d2,$52,$d2,$52,$d2,$52,$d2
; 
; Hi-res row base address table.  This only has the entries for every 8th line,
; because you can trivially add $400 for the next 7.
; 
hires_line_lo:
         .byte   $00,$80,$00,$80,$00,$80,$00,$80,$28,$a8,$28,$a8,$28,$a8,$28,$a8
         .byte   $50,$d0,$50,$d0,$50,$d0,$50,$d0
hires_line_hi:
         .byte   $20,$20,$21,$21,$22,$22,$23,$23,$20,$20,$21,$21,$22,$22,$23,$23
         .byte   $20,$20,$21,$21,$22,$22,$23,$23
         .byte   "        "
hires_line_hi2:
         .byte   $3c,$3c,$3d,$3d,$3e,$3e,$3f,$3f,$3c,$3c,$3d,$3d,$3e,$3e,$3f,$3f
         .byte   $3c,$3c,$3d,$3d,$3e,$3e,$3f,$3f

; 
; Draws a line.  Pixels are XORed.  The end coordinate is exclusive, to avoid a
; situation where we draw then erase every vertex with an even number of edges.
; 
; On entry:
;   $6e/6f: x0,y0
;   $70/71: x1,y1
; 
; On exit:
;   Y-reg preserved
; 
row_div8 .set    $06
row_mod8 .set    $07
hptr     .set    $0a
delta_x  .set    $31
x0       .set    $6e
y0       .set    $6f
x1       .set    $70
y1       .set    $71
delta_y  .set    $ad
pixel_mask .set  $ae
err_term .set    $af
saved_y  .set    $b1
saved_x  .set    $d0
DrawLine:
         sty     saved_y
         lda     #$80       ;init line error to 1/2
         sta     err_term
         asl     A          ;A-reg=0 and C=1
         sta     lcoord_swap_flag
         lda     x1         ;compute deltaX
         sbc     x0
         bcs     @PosX
         eor     #$ff       ;was < 0, negate
         adc     #$01
         sec
@PosX:   sta     delta_x
         lda     y1         ;compute deltaY
         sbc     y0
         bcs     @PosY
         eor     #$ff       ;was < 0, negate
         adc     #$01
@PosY:   sta     delta_y
         cmp     delta_x    ;mostly horizontal?
         bcc     DrawLineHorizDom ;yes, branch
         jmp     DrawLineVertDom

; Draw a horizontally-dominant line.
DrawLineHorizDom:
         ldx     x0         ;is X0 on the left?
         cpx     x1
         bcc     @NoSwap    ;yes, render as-is
         dec     lcoord_swap_flag ;set flag (to $FF)
         lda     x1         ;swap X0,Y0 with X1,Y1 to ensure that we're
         sta     x0         ; drawing from left to right
         stx     x1
         tax
         lda     y1
         ldy     y0
         sta     y0
         sty     y1
@NoSwap: lda     y0         ;divide Y0 by 8
         lsr     A
         lsr     A
         lsr     A
         sta     row_div8
         tay
         lda     hires_line_lo,y ;look up base address, low byte
         sta     hptr       ;set low byte of address
         lda     y0         ;get Y0 again
         and     #$07       ;compute Y0 mod 8
         sta     row_mod8
         asl     A          ;multiply by 4
         asl     A
         adc     hires_line_hi,y ;add to the base address, high byte
         sta     hptr+1     ;set high byte of address
         ldy     mod7_table,x ;get X0 mod 7 (bit offset within byte)
         lda     hi_res_pixel,y ;convert to pixel mask
         sta     pixel_mask
         ldy     div7_table,x ;get X0 divided by 7 (byte offset)
         ldx     delta_y    ;check delta Y
         bne     @NotHoriz  ;nonzero, so not a horizontal line
         txa                ;A-reg=0
         beq     @CheckDir  ;(always)
; Compute error term adjustment (deltaX / deltaY).  This takes about 35 cycles,
; but reduces the cost per pixel, making it a win for longer lines.
; 
; For example, if deltaX=$0e and deltaY=$19, the result is $8e.  This
; corresponds to 14/25=0.56. (255 * 0.56 = 142.8 = $8e).
@NotHoriz:
         lda     math_table2,x
         ldx     delta_x
         sec
         sbc     math_table2,x
         ldx     delta_y
         lda     math_table1,x
         ldx     delta_x
         sbc     math_table1,x
         bcc     @L9CEB
         lda     #$ff
         bne     @CheckDir  ;(always)

@L9CEB:  tax
         lda     math_table3,x
; Setup complete, draw lines moving up or down.  (This is usually done with a
; simple bit of self-modifying code; here two separate routines are used.)
@CheckDir:
         sta     delta_y    ;set initial value
         sec
         ldx     delta_x
         inx
         lda     y1
         sbc     y0         ;is y1 > y0?  (why not CMP?)
         bcs     @MoveDown  ;yes, so we're moving downward
         lda     lcoord_swap_flag ;are we starting at the end?
         bne     @SkipFirst ;yes, skip first pixel
         dex                ;DEX so we stop before the last pixel
@UpLoop: lda     pixel_mask ;XOR pixel with screen value
         eor     (hptr),y
         sta     (hptr),y
@SkipFirst:
         asl     pixel_mask ;moving right, so pixel value moves left
         bpl     @SameByte  ;didn't shift into high bit, branch
         lda     #$01       ;we hit $80, so start over at $01
         sta     pixel_mask
         iny                ;advance to next byte
@SameByte:
         lda     err_term   ;update error term
         adc     delta_y    ;(carry cleared by pixel-mask ASL)
         sta     err_term
         bcc     @SameLine  ;didn't roll, still on same line
         dec     row_mod8   ;decrement mod8 counter
         bmi     @UpdateAddr8 ;rolled, do bigger calculation
         lda     hptr+1     ;within a set of 8 lines we can just subtract 4
         sbc     #$04       ; from the high byte
         sta     hptr+1
@SameLine:
         dex                ;done yet?
         bne     @UpLoop    ;no, keep going
         ldy     saved_y    ;restore Y-reg
         rts

@UpdateAddr8:
         lda     #$07       ;reset the mod8 counter
         sta     row_mod8
         stx     saved_x
         ldx     row_div8   ;advance the divided-by-8 row value
         dex
         stx     row_div8
         lda     hires_line_lo,x ;get the address
         sta     hptr
         lda     hires_line_hi2,x ;we're at an 8-line boundary, so no need to
         ldx     saved_x    ; add anything here
         sta     hptr+1
         jmp     @SameLine  ;back to it

@MoveDown:
         lda     row_mod8   ;this acts as a counter, so the distance to the next
         eor     #$07       ; 8-line boundary is (7 - row_mod8)
         sta     row_mod8   ; which we can compute with a simple EOR
; (See :UpLoop -- this is the same code, just moving downward.)
         lda     lcoord_swap_flag
         beq     @L9D54
         dex
@DnLoop: lda     pixel_mask
         eor     (hptr),y
         sta     (hptr),y
@L9D54:  asl     pixel_mask
         bpl     @L9D5D
         lda     #$01
         sta     pixel_mask
         iny
@L9D5D:  lda     err_term
         adc     delta_y
         sta     err_term
         bcc     @L9D6F
         dec     row_mod8
         bmi     @L9D75
         lda     hptr+1
         adc     #$03
         sta     hptr+1
@L9D6F:  dex
         bne     @DnLoop
         ldy     saved_y
         rts

@L9D75:  lda     #$07
         sta     row_mod8
         stx     saved_x
         ldx     row_div8
         inx
         stx     row_div8
         lda     hires_line_lo,x
         sta     hptr
         lda     hires_line_hi,x
         sta     hptr+1
         ldx     saved_x
         jmp     @L9D6F

; Draw a vertically-dominant line.
DrawLineVertDom:
         ldy     y0         ;is Y0 on the bottom?
         tya
         ldx     x0
         cpy     y1
         bcs     @NoSwap    ;yes, render as-is
         dec     lcoord_swap_flag ;set flag (to $FF)
         lda     x1         ;swap X0,Y0 with X1,Y1 to ensure that we're
         sta     x0         ; drawing from bottom to top
         stx     x1
         tax
         lda     y1
         sta     y0
         sty     y1
         tay
@NoSwap: lsr     A          ;divide Y0 by 8
         lsr     A
         lsr     A
         sta     row_div8
         tay
         lda     hires_line_lo,y ;look up base address, low byte
         sta     hptr       ;set low byte of address
         lda     y0         ;get Y0 again
         and     #$07       ;compute Y0 mod 8
         sta     row_mod8
         asl     A          ;multiply by 4
         asl     A
         adc     hires_line_hi,y ;add to the base address, high byte
         sta     hptr+1     ;set high byte of address
         ldy     mod7_table,x ;get X0 mod 7 (bit offset within byte)
         lda     hi_res_pixel,y ;convert to pixel mask
         sta     pixel_mask
         ldy     div7_table,x ;get X0 divided by 7 (byte offset)
         ldx     delta_x    ;check delta X
         beq     @IsVert    ;it's zero, this is a vertical line
; Compute error term adjustment (deltaY / deltaX).  Takes about 35 cycles.
         lda     math_table2,x
         ldx     delta_y
         sec
         sbc     math_table2,x
         ldx     delta_x
         lda     math_table1,x
         ldx     delta_y
         sbc     math_table1,x
         bcc     @L9DE9
         lda     #$ff
         bne     @L9DED

@L9DE9:  tax
         lda     math_table3,x
; Setup complete, draw lines toward left or right.
@L9DED:  sta     delta_x    ;set initial value
@IsVert: sec
         ldx     delta_y
         inx
         lda     x1
         sbc     x0         ;is x1 < x0?
         bcc     @RightToLeft ;yes, draw right to left
         clc
         lda     lcoord_swap_flag ;are we starting at the end?
         beq     @SkipFirst ;yes, skip first pixel
         dex                ;DEX so we stop before the last pixel
@RightLoop:
         lda     pixel_mask ;XOR pixel with screen value
         eor     (hptr),y
         sta     (hptr),y
@SkipFirst:
         dec     row_mod8   ;decrement mod8 counter
         bmi     @L9E28     ;rolled, do bigger calculation
         lda     hptr+1     ;within a set of 8 lines we can just subtract 4
         sbc     #$03       ; from the high byte
         sta     hptr+1     ;(should've gone top-down; carry would be clear)
         clc
@L9E11:  lda     err_term   ;update error term
         adc     delta_x
         sta     err_term
         bcc     @SameCol   ;didn't roll, still in same pixel column
         asl     pixel_mask ;moving right, so shift left
         bpl     @SameCol   ;still in same byte, branch
         lda     #$01       ;new byte, reset pixel mask
         sta     pixel_mask
         iny                ;and advance to next byte
@SameCol:
         dex                ;done yet?
         bne     @RightLoop ;no, keep going
         ldy     saved_y    ;restore Y-reg
         rts

@L9E28:  lda     #$07
         sta     row_mod8
         stx     saved_x
         ldx     row_div8
         dex
         stx     row_div8
         lda     hires_line_lo,x
         sta     hptr
         lda     hires_line_hi2,x
         ldx     saved_x
         sta     hptr+1
         jmp     @L9E11

@RightToLeft:
         lda     lcoord_swap_flag
         beq     L9E4E
         dex
LeftLoop:
         lda     pixel_mask
         eor     (hptr),y
         sta     (hptr),y
L9E4E:   dec     row_mod8
         bmi     L9E71
         lda     hptr+1
         sbc     #$03
         sta     hptr+1
         clc
L9E59:   lda     err_term
         adc     delta_x
         sta     err_term
         bcc     @L9E6B
         lsr     pixel_mask ;moving left, shift right
         bcc     @L9E6B     ;didn't shift mask into carry, still good
         lda     #$40
         sta     pixel_mask
         dey
         clc
@L9E6B:  dex
         bne     LeftLoop
         ldy     saved_y
Return8: rts

L9E71:   lda     #$07
         sta     row_mod8
         stx     saved_x
         ldx     row_div8
         dex
         stx     row_div8
         lda     hires_line_lo,x
         sta     hptr
         lda     hires_line_hi2,x
         ldx     saved_x
         sta     hptr+1
         jmp     L9E59

DrawDoubleHorizLine:
         jsr     @DrawDoubleInc ;draw a line then fall through to draw another
@DrawDoubleInc:
         inc     y0
; 
; Draws a horizontal line in color.
; 
; As with the other line drawing routines, the end point is exclusive (last
; point not plotted).
; 
; On entry:
;   $35: color index ($00-18, even values only)
;   $6e: x0
;   $6f: y0
;   $70: x1
; 
; On exit:
;   Y-reg preserved
; 
color0   .set    $06
color1   .set    $07
pixel_tmp .set   $09
hptr     .set    $0a
color_index .set $35
x0       .set    $6e
y0       .set    $6f
x1       .set    $70
byte_count .set  $ae
saved_y  .set    $b1
DrawHorizLine:
         sty     saved_y    ;preserve Y-reg
         lda     x0         ;strip low bit from X0
         and     #$fe
         sta     x0
         tax                ;hold X0 in X-reg
         lda     x1         ;strip low bit from X1
         and     #$fe
         sta     x1
         cmp     x0         ;is x1 > x0?
         beq     Return8    ;actually, x1==x0, nothing to do
         bcs     @L9EA8     ;yes, so we're moving left to right; branch
         stx     x1         ;swap X0 with X1
         tax                ;get X0 (was X1) in X-reg
@L9EA8:  lda     y0         ;get row
         lsr     A          ;divide by 8
         lsr     A
         lsr     A
         tay
         lda     hires_line_lo,y ;base address for 8-line section
         sta     hptr       ;save low byte
         lda     y0         ;compute Y-coord mod 8
         and     #$07
         asl     A          ;multiply by 4
         asl     A
         adc     hires_line_hi,y ;compute hi-res address, high byte
         sta     hptr+1
         lda     div7_table,x ;compute X coord / 7
         and     #$01       ;mask off all but low bit for odd/even
         ora     color_index ;merge with color index
         tay
         lda     color_masks,y ;get color pixel masks
         sta     color0
         lda     color_masks+1,y
         sta     color1
         ldy     x1         ;get end coordinate
         lda     div7_table-2,y ;compute (X1 - 2) / 7  (we don't plot last point)
         ldy     mod7_table,x ;compute X0 mod 7
         sec
         sbc     div7_table,x ;(X1 - 2) / 7 - (X0 / 7)
         sta     byte_count ;this is number of bytes we will update
         lda     lf_end_pixels,y ;get pixels for start of line
         and     color0     ;apply color mask
         ldy     div7_table,x ;get byte offset (X0 / 7)
         ldx     byte_count ;check if line fits in single byte
         beq     @SwapColor ;it does, swap the color and jump to end-of-line
         sta     pixel_tmp
         lda     (hptr),y   ;blend with screen contents
         and     #$7f       ;but don't touch the high bit
         eor     pixel_tmp
         sta     (hptr),y
         iny                ;advance to next byte
         dex                ;decrement counter
         beq     @EndOfLine ;if zero, go handle the rightmost byte
; Do the "middle" bytes.  The color alternates, so we do two at a time.
@WholeByteLoop:
         lda     (hptr),y
         and     #$7f
         eor     color1
         sta     (hptr),y
         iny
         dex                ;done?
         beq     @FinishWith0 ;yes; use color0 for end
         lda     (hptr),y
         and     #$7f
         eor     color0
         sta     (hptr),y
         iny
         dex                ;done?
         bne     @WholeByteLoop ;not yet
@EndOfLine:
         lda     color1     ;use color1 for end
@EndOfLine1:
         ldx     x1
         ldy     mod7_table-2,x ;get bit column for last pixel (-2 because we don't
         cpy     #$06       ; plot the last pixel, and color pixels are 2 bits)
         and     rt_end_pixels,y ;merge pixels with right-end mask
         ldy     div7_table-2,x ;get byte position for last pixel
         sta     pixel_tmp
         lda     (hptr),y   ;blend with screen contents
         and     #$7f
         eor     pixel_tmp
         sta     (hptr),y
         bcc     @Done      ;if not in pixel column 6, we're done
         lda     #$81       ;need to update the first pixel in the next byte
         and     color0     ; mask the color
         iny
         sta     pixel_tmp
         lda     (hptr),y   ;blend with screen contents
         and     #$7f
         eor     pixel_tmp
         sta     (hptr),y
@Done:   ldy     saved_y
         rts

@FinishWith0:
         lda     color0
@SwapColor:
         ldx     color1
         stx     color0
         jmp     @EndOfLine1

color_masks:
         .byte   $00,$00
         .byte   $00,$00
         .byte   $55,$2a
         .byte   $55,$00
         .byte   $2a,$55
         .byte   $2a,$00
         .byte   $7f,$7f
         .byte   $7f,$00
         .byte   $d5,$aa
         .byte   $d5,$00
         .byte   $aa,$d5
         .byte   $aa,$00
         .byte   $aa,$aa
         .byte   $aa,$00

; 
; Draws a vertical line, in color.
; 
; On entry:
;   $6e: x0
;   $6f: y0
;   $71: y1
; 
; On exit:
;   Y-reg preserved
; 
row_div8 .set    $06
row_mod8 .set    $07
pixel_mask1 .set $08
y1       .set    $71
pixel_mask0 .set $ae
saved_x  .set    $d0
DrawVerticalLine:
         sty     saved_y    ;preserve Y
         lda     y0
         cmp     y1         ;y0 >= y1?
         bcs     @NoSwap    ;yes, branch
         ldy     y1         ;no, swap
         sta     y1
         tya
@NoSwap: ldx     x0
         jsr     DrawColorPixel ;draw pixel at X0,Y0
         lda     y0         ;compute deltaY
         sec
         sbc     y1
         beq     @Done
         tax
         inx
         jmp     @NextLine

; Continue drawing the line, using the pixel masks set up for the first pixel.
@DrawLoop:
         lda     pixel_mask0 ;blend first byte
         eor     (hptr),y
         sta     (hptr),y
         lda     pixel_mask1 ;do we straddle the byte boundary?
         beq     @NextLine  ;no, skip 2nd byte
         iny                ;advance to next byte column
         eor     (hptr),y   ;blend
         sta     (hptr),y
         dey                ;back up
@NextLine:
         dec     row_mod8   ;decrement local 8 count
         bmi     @Recalc8   ;rolled, recompute
         lda     hptr+1     ;update row address by simply subtracting
         sec                ; four from the high byte
         sbc     #$04
         sta     hptr+1
@Cont:   dex                ;decrement count
         bne     @DrawLoop
@Done:   ldy     saved_y
         rts

@Recalc8:
         lda     #$07       ;reset local 8 count
         sta     row_mod8
         stx     saved_x    ;preserve X-reg
         ldx     row_div8   ;update 8-line section index
         dex
         stx     row_div8
         lda     hires_line_lo,x ;compute new row address
         sta     hptr
         lda     hires_line_hi2,x
         ldx     saved_x
         sta     hptr+1
         jmp     @Cont

; 
; Draws a color (two-bit) pixel.
; 
; On entry:
;   X-reg: x0
;   A-reg: y0
; 
; On exit:
;   $ae: pixel mask 0
;   $08: pixel mask 1
; 
DrawColorPixel:
         sta     y0         ;divide y0 by 8
         lsr     A
         lsr     A
         lsr     A
         sta     row_div8
         tay
         lda     hires_line_lo,y ;set hi-res address, low byte
         sta     hptr
         lda     y0         ;compute y0 mod 8
         and     #$07
         sta     row_mod8
         asl     A          ;multiply by 4
         asl     A
         adc     hires_line_hi,y ;compute hi-res address, high byte
         sta     hptr+1
         ldy     mod7_table,x ;compute x0 mod 7
         lda     #$00       ;init mask to zero
         cpy     #$06       ;at right edge of byte (2-pixel straddles bytes)?
         bne     @L9FE0     ;no
         lda     #$81       ;yes, use nonzero mask
@L9FE0:  sta     pixel_mask1
         lda     hi_res_2pixel,y ;get two-pixel pattern for this offset
         sta     pixel_mask0
         lda     div7_table,x ;compute X0 / 7
         and     #$01       ;get odd/even bit
         ora     color_index ;merge with color index
         tay
         lda     color_masks+1,y ;get the color mask for the second byte
         and     pixel_mask1 ;and it with the mask (so we keep either the leftmost
         sta     pixel_mask1 ; pixel, or no pixels)
         lda     color_masks,y ;get color mask for first byte
         and     pixel_mask0 ;merge with two-pixel mask
         sta     pixel_mask0
         ldy     div7_table,x ;compute X0 / 7 (byte column)
         eor     (hptr),y   ;blend with screen contents
         sta     (hptr),y
         lda     pixel_mask1 ;do we need to do the second byte?
         beq     @Done      ;no
         iny                ;yes, advance to next byte
         eor     (hptr),y   ; and blend with screen contents
         sta     (hptr),y
         dey
@Done:   rts

ActivateEcm:
         lda     #$20
         sta     ecm_active_flag
LA013:   lda     #$2a
         ldx     #$38
         bne     LA01D

LA019:   lda     #$2d
         ldx     #$c0
LA01D:   sta     $31
         lda     #$a0
         sta     $32
         lda     #$16
         sta     text_vposn
         jmp     LA14C

         .byte   $7f,$7f,$07,$7f,$7f,$07,$7f,$7f,$70,$7f,$7f

DrawIndicator:
         tya
         pha
         jsr     @LA03E
         pla
         sta     color_indices,x
@LA03E:  lda     color_indices,x
         beq     LA07C
         sta     color_index
         lda     hud_xcoords-1,x
         sta     x0
         clc
         adc     #$06
         sta     x1
         txa
         pha
         lda     #184
         sta     y0
         jsr     DrawDoubleHorizLine ;draw 4 lines total
         jsr     DrawDoubleHorizLine
         pla
         tax
         tya
         ldy     #$00
         rts

hud_xcoords:
         .byte   $28,$20,$18,$10,$20,$ff,$ff,$c9,$80,$90,$04,$a9,$07,$18,$60,$c9
         .byte   $20,$b0,$08,$c9,$0d,$f0,$04,$c9,$15,$d0,$f0

LA07C:   clc
         rts

Delay:   pha
         txa
         pha
         tya
         pha
         ldy     #$0f
         ldx     #$00
@LA087:  dex
         bne     @LA087
         dey
         bne     @LA087
         pla
         tay
         pla
         tax
         pla
         rts

Unref1:  cmp     #$7b
         bcs     @LA0A4
         cmp     #$0d
         bcc     @LA0A4
         bne     OutputChar
         lda     #$0c
         jsr     OutputChar
         lda     #$0d
@LA0A4:  clc
         rts

CtrlGBeep:
         jsr     MakeNoise3
         jmp     LA132

LA0AC:   bit     display_mode_flag
         bpl     @LA0B8
         jsr     ClearTextScreen
         lda     $38
         jmp     LA0F4

@LA0B8:  jsr     ClearViewportArea
         lda     $38
         jmp     LA0F4

; 
; Print a char to the text screen.
; 
; The sloppy upper-case conversion screws up text entry, e.g. if you type
; "[]<del>" for the commander name it comes out ";=_".
; 
PrintTextChar:
         bit     ptb_lower_case ;lower-case mode enabled?
         bmi     @LowerOkay ;yes, it's fine
         cmp     #'['       ;is it lower case letter (or [\]^_)?
         bcc     @LowerOkay ;no, leave it
         sbc     #$20       ;yes, convert to upper case
@LowerOkay:
         ora     #$80
         pha
         lda     text_addr_lo,y
         sta     hptr
         tya
         and     #$07       ;compute the high byte
         lsr     A
         clc
         adc     #$04
         sta     hptr+1
         txa
         tay
         pla
         sta     (hptr),y
         jmp     LA130

OutputFF:
         lda     #$0c
OutputChar:
         sta     $38
         sty     $0286
         stx     $0285
         ldy     text_mod_flags
         cpy     #$ff
         beq     LA132
LA0F4:   cmp     #$07       ;Ctrl+G?
         beq     CtrlGBeep  ;yes, beep
         cmp     #$20
         bcs     @LA10C
         cmp     #$0a
         beq     @LA104
@LA100:  ldx     #$01
         stx     text_hposn
@LA104:  cmp     #$0d
         beq     LA132
         inc     text_vposn
         bne     LA132
@LA10C:  ldx     text_hposn
         cpx     #31
         bcc     @HposnOkay
         jsr     @LA100
         ldx     text_hposn
@HposnOkay:
         ldy     text_vposn
         cpy     #24        ;off bottom of screen?
         bcs     LA0AC      ;yes, do something
         bit     display_mode_flag
         bmi     PrintTextChar
         pha                ;save char to print
         lda     text_hposn ;get text horizontal position
         asl     A          ;multiply by 7 and add 13
         asl     A
         asl     A
         adc     #$0d
         sbc     text_hposn
         tax
         pla
         jsr     PrintHiresChar
LA130:   inc     text_hposn
LA132:   ldy     $0286
         ldx     $0285
         lda     $38
         clc
         rts

; 
; Print a character on the hi-res screen.
; 
; Unlike most HRCGs, the horizontal offset is specified in pixels, and the glyph
; is bit-shifted in place.
; 
; On entry:
;   A-reg: char to print ($20-7f)
;   X-reg: pixel offset to print at
; 
first_col .set   $06
saved_y  .set    $07
glyph_hi .set    $08
hptr     .set    $0a
glyph_ptr .set   $31
pixel_index .set $33
PrintHiresChar:
         ldy     #>font_glyphs-1 ;start at -$100 because we INY later
         asl     A          ;multiply char by 4
         asl     A
         bcc     @LA144     ;branch if char value < $40 (numbers/symbols)
         ldy     #>font_glyphs+1 ;letters, start at $1Exx instead
@LA144:  asl     A          ;multiply by 2 (8 bytes per glyph)
         bcc     @LA148     ;branch if char [00,1f] (not expected) or [40,5f]
         iny                ;char is [20,3f] or [60,7f], add one
@LA148:  sta     glyph_ptr
         sty     glyph_ptr+1
LA14C:   ldy     text_vposn ;get hi-res row address
         lda     hires_line_lo,y
         sta     hptr
         lda     hires_line_hi,y
         sta     hptr+1
         ldy     mod7_table,x ;get hi-res column and pixel index
         sty     pixel_index
         ldy     div7_table,x
         sty     first_col
         ldy     #$00       ;prepare glyph data
@GlyphLoop:
         lda     #$00
         sta     glyph_hi
         lda     (glyph_ptr),y ;get byte for this row
         ldx     pixel_index
@ShiftLoop:
         cmp     #$80       ;shift it over, stepping across the high bit
         rol     glyph_hi
         dex
         bmi     @LA177
         asl     A
         jmp     @ShiftLoop

@LA177:  and     #$7f       ;clear high bit
         clc
         sty     saved_y
         ldy     first_col  ;blend first half onto display
         eor     (hptr),y
         sta     (hptr),y
         iny
         lda     glyph_hi   ;blend second half
         eor     (hptr),y
         sta     (hptr),y
         ldy     saved_y
         lda     hptr+1     ;update hi-res address
         adc     #$04
         sta     hptr+1
         iny
         cpy     #$08       ;are we done (glyph height = 8)?
         bne     @GlyphLoop ;not yet
         rts

LA197:   lda     displayed_screen
         beq     ClearAndDrawFrame
         cmp     #$0d
         beq     ClearAndDrawFrame
         and     #$c0
         bne     ClearAndDrawFrame
         jsr     ClearTextScreen
         jmp     ShowText

; 
; Erases $400-7ff to $A0 (high-ASCII space character).  Tramples screen holes.
; 
ptr      .set    $0a
ClearTextScreen:
         ldy     #$00
         ldx     #$04
         sty     ptr
         stx     ptr+1
         lda     #' ' | $80
@Loop:   sta     (ptr),y
         iny
         bne     @Loop
         inc     ptr+1
         dex
         bne     @Loop
         rts

ClearAndDrawFrame:
         jsr     ClearViewportArea
         jsr     DrawWindowTopLine
         jsr     ShowHiRes
         rts

color_index .set $35
x0       .set    $6e
y0       .set    $6f
x1       .set    $70
DrawWindowTopLine:
         ldx     #$00       ;draw from 0,0 to 255,0
         stx     x0
         stx     y0
         dex
         stx     x1
         lda     #$10       ;blue
         sta     color_index
         jsr     DrawHorizLine
         lda     #$aa
         sta     title_screen+1 ;unnecessary
         lda     #$aa
         sta     title_screen+37 ;needed because lines don't set the last pixel
         rts

ClearViewportArea:
         ldy     #16        ;clear lines 0-16
@Loop:   jsr     DrawFrameClearLine
         dey
         bpl     @Loop
         iny                ;Y=0
         sty     text_hposn
         sty     text_vposn
         rts

         .byte   $a0,$00,$84,$0a,$a9,$00,$86,$0b,$91,$0a,$88,$d0,$fb,$60,$a9,$00 ;unreferenced code?
         .byte   $91,$0a,$c8,$d0,$fb,$60,$85,$34,$60,$85,$36,$60,$a0,$00,$b1,$5e
         .byte   $91,$0a,$88,$d0,$f9,$e6,$5f,$e6,$0b,$ca,$d0,$f2,$60

ClearLines:
         lda     #$00
         sta     PLAYER_STATE+54
         sta     $0278
         jsr     Vposn21_Hposn1
         lda     #$ff
         sta     txt_lcase_flag
         lda     #$80
         sta     text_mod_flags
         lda     display_mode_flag ;text mode?
         bpl     ClearLinesHiRes ;no, do on hi-res screen
         lda     #$20       ;print 64 spaces
         ldx     #$40
@Loop:   jsr     OutputChar
         dex
         bne     @Loop
Vposn21_Hposn1:
         lda     #21
         sta     text_vposn
         lda     #1
         sta     text_hposn
         rts

counter  .set    $07
hptr     .set    $0a
ClearLinesHiRes:
         ldy     #15        ;clear text line 15
         sty     text_vposn
         lda     #$01
         sta     text_hposn
         jsr     DrawFrameClearLine
         iny                ;clear text line 16
; 
; Clears 8 lines on the hi-res screen (equivalent to one line on the text
; screen), drawing the sides of the viewport window frame.
; 
; On entry:
;   Y-reg: text line (0-23)
; 
; On exit:
;   Y-reg: preserved
; 
DrawFrameClearLine:
         lda     #$08       ;clear 8 hi-res lines
         sta     counter
         ldx     hires_line_lo,y ;set hi-res base address
         stx     hptr
         ldx     hires_line_hi,y
         tya                ;preserve Y-reg
         pha
@RowLoop:
         stx     hptr+1
         lda     #$a0       ;one pixel + high bit set on right edge
         ldy     #37        ;37 bytes in the middle
@MidLoop:
         sta     (hptr),y   ;set (not blend)
         lda     #$00       ;middle bytes are zero
         dey
         bne     @MidLoop
         lda     #$c0       ;one pixel + high bit set on left edge
         sta     (hptr),y   ;store that
         iny                ;move back one right
         asl     A          ;just the high bit this time
         sta     (hptr),y   ;set that
         inx                ;add 4 to the high byte of the address
         inx
         inx
         inx
         dec     counter    ;are we done?
         bne     @RowLoop   ;no, keep going
         pla                ;restore Y-reg
         tay
LA282:   rts

SCAN:    lda     polyobj_vis
         and     #$10
         beq     LA282
         ldx     $b8
         bmi     LA282
         lda     L4E58,x
         sta     $35
         lda     INWK+1
         ora     INWK+4
         ora     polyobj_zpos_mi
         and     #$c0
         bne     LA282
         lda     INWK+1
         clc
         ldx     INWK+2
         bpl     @LA2A8
         eor     #$ff
         adc     #$01
         clc
@LA2A8:  adc     #$7d
         and     #$fe
         sta     $6e
         tax
         dex
         dex
         lda     polyobj_zpos_mi
         lsr     A
         lsr     A
         clc
         ldy     polyobj_zpos_hi
         bpl     @LA2BD
         eor     #$ff
         sec
@LA2BD:  adc     #$5b
         eor     #$ff
         sta     $71
         lda     INWK+4
         lsr     A
         clc
         ldy     INWK+5
         bmi     @LA2CE
         eor     #$ff
         sec
@LA2CE:  adc     $71
         cmp     #$92
         bcs     @LA2D6
         lda     #$92
@LA2D6:  cmp     #$bf
         bcc     @LA2DC
         lda     #$be
@LA2DC:  jsr     DrawColorPixel
         jmp     DrawVerticalLine

; 
; Set the display to hi-res page 1.
; 
ShowHiRes:
         lda     TXTPAGE1
         lda     MIXCLR
         lda     HIRES
         lda     TXTCLR
         lsr     display_mode_flag ;clears high bit
         rts

; 
; Set the display to show text page 1.
; 
ShowText:
         lda     TXTPAGE1
         lda     TXTSET
         sec
         ror     display_mode_flag ;sets high bit
         rts

         .byte   $83,$6f,$63
; 
; Addresses of hull definitions, indexed by object type (1-32).  Entry 0 is not
; used, and entry 32 isn't used in most contexts: the space station entry (#2)
; will point to either the Coriolis or Dodecahedron station definition depending
; on which exists in the current system.
; 
hull_addr_lo:
         .res    1,$6f
hull_addr_hi:
         .res    1,$75
         .word   hull_missile ;1
station_addr:
         .word   hull_coriolis
         .word   hull_escape ;3
plate_addr:
         .word   hull_plate
         .word   hull_cargo
         .word   hull_boulder
         .word   hull_asteroid
         .word   hull_splinter
         .word   hull_shuttle
         .word   hull_transporter
         .word   hull_cobra_mk3 ;11
         .word   hull_python
         .word   hull_boa
         .word   hull_anaconda
         .word   hull_asteroid2
         .word   hull_viper
         .word   hull_sidewinder ;17 (first pirate)
         .word   hull_mamba
         .word   hull_krait
         .word   hull_adder
         .word   hull_gecko
         .word   hull_cobra_mk1
         .word   hull_worm
         .word   hull_cobra3_pir
         .word   hull_asp_mk2
         .word   hull_python_pir
         .word   hull_ferdelance
         .word   hull_moray
         .word   hull_thargoid ;29
         .word   hull_thargon ;30
         .word   hull_constrictor
dodo_addr:
         .word   hull_dodo
; 
; Hull characteristics, one per ship type.  Indexing is from <table-1>, so the
; first byte is for ship type #1 (missile).
; 
; This appears to be what the BBC disasm refers to as "NEWB":
;  0000 0001: trader
;  0000 0010: hunter
;  0000 0100: angry
;  0000 1000: pirate
;  0001 0000: ?
;  0010 0000: innocent
;  0100 0000: cop
;  1000 0000: has escape pod
hull_NEWB:
         .byte   $00,$00,$01,$00,$00,$00,$00,$00,$21,$61,$a0,$a0,$a0,$a1,$a1,$c2
         .byte   $0c,$8c,$8c,$8c,$0c,$8c,$05,$8c,$8c,$8c,$82,$0c,$0c,$04,$04,$00
; 
; Kill value.  Added to kill score when a ship is destroyed by shooting it with
; a laser or missile (but not an energy bomb).
; 
; In the BBC Micro version everything was worth one point (equivalent to $0100
; here).  In C64/Apple II the value can vary.
; 
; Indexed by ship type (1-31), starting with type #1 (missile).
kill_score_lo:
         .byte   $95,$00,$10,$0a,$0a,$06,$08,$0a,$10,$11,$ea,$aa,$d5,$00,$55,$1a
         .byte   $55,$80,$55,$5a,$55,$aa,$32,$2a,$15,$2a,$40,$c0,$aa,$21,$55,$00
kill_score_hi:
         .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00
         .byte   $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$00,$02,$00,$05,$00
;*******************************************************************************
;* 3D mesh definitions.                                                        *
;*                                                                             *
;* Hull definitions start with a 20-byte header, and are followed by a list of *
;* vertices.  In most cases this is followed by the edges and faces, but for   *
;* some ships the edge/face data from another mesh is used.                    *
;*                                                                             *
;* Using the Escape Capsule as an example:                                     *
;*                                                                             *
;*  +00   $20    ;high nibble is scoop info, low nibble is debris spin info    *
;*  +01   $0100  ;two-byte missile lock data                                   *
;*  +03   $2c    ;low byte of offset to edge data                              *
;*  +04   $44    ;low byte of offset to face data                              *
;*  +05   $1d    ;(4 * maxlines + 1) for ship lines stack                      *
;*  +06   $00    ;gun vertex * 4                                               *
;*  +07   $16    ;explosion count, e.g. $2A = 4*n+6                            *
;*  +08   $18    ;vertex count * 6 (byte count)                                *
;*  +09   $06    ;edge count                                                   *
;*  +0a   $0000  ;bounty value (in 0.1 Cr)                                     *
;*  +0c   $10    ;face count * 4 (byte count)                                  *
;*  +0d   $08    ;LOD distance; past this it's just drawn as a dot             *
;*  +0e   $11    ;energy (hit points)                                          *
;*  +0f   $08    ;speed                                                        *
;*  +10   $00    ;high byte of offset to edge data                             *
;*  +11   $00    ;high byte of offset to face data                             *
;*  +12   $04    ;down-scaling of normals (larger value -> smaller ship)       *
;*  +13   $00    ;00LLLMMM laser power and missile count                       *
;*                                                                             *
;* Vertices:                                                                   *
;*  +0/1/2: unsigned X/Y/Z value                                               *
;*  +3: flags XYZV VVVV                                                        *
;*      X/Y/Z = 1 if coordinate value is negative                              *
;*      VVVVV = visibility cutoff                                              *
;*  +4/5: four face indexes (one per nibble), for visibility test              *
;*      (if fewer than 4 are relevant, one is repeated)                        *
;*  .bulk   $07,$00,$24,$9f, $12,$33 ;-$07, $00, $24 / faces 1,2,3             *
;*  .bulk   $07,$0e,$0c,$ff, $02,$33 ;-$07,-$0e,-$0c / faces 0,2,3             *
;*  .bulk   $07,$0e,$0c,$bf, $01,$33 ;-$07, $0e,-$0c / faces 0,1,3             *
;*  .bulk   $15,$00,$00,$1f, $01,$22 ; $15, $00, $00 / faces 0,1,2             *
;*                                                                             *
;* Edges:                                                                      *
;*  +0: flags 000V VVVV                                                        *
;*      VVVVV = visibility cutoff                                              *
;*  +1: two face indices (one per nibble), for visibility test                 *
;*  +2/3: vertex index * 4                                                     *
;*  .bulk   $1f,$23,$00,$04 ;vertices 0,1 / faces 2,3                          *
;*  .bulk   $1f,$03,$04,$08 ;vertices 1,2 / faces 0,3                          *
;*  .bulk   $1f,$01,$08,$0c ;vertices 2,3 / faces 0,1                          *
;*  .bulk   $1f,$12,$0c,$00 ;vertices 3,0 / faces 1,2                          *
;*  .bulk   $1f,$13,$00,$08 ;vertices 0,2 / faces 1,3                          *
;*  .bulk   $1f,$02,$0c,$04 ;vertices 3,1 / faces 0,2                          *
;*                                                                             *
;* Faces:                                                                      *
;*  +0: flags: XYZV VVVV                                                       *
;*      X/Y/Z = 1 if coordinate value is negative                              *
;*      VVVVV = always-visible cutoff                                          *
;*  +1/2/3: face normal x/y/z                                                  *
;*  .bulk   $3f,$34,$00,$7a ; $34, $00,-$7a                                    *
;*  .bulk   $1f,$27,$67,$1e ; $27, $67, $1e                                    *
;*  .bulk   $5f,$27,$67,$1e ; $27,-$67, $1e                                    *
;*  .bulk   $9f,$70,$00,$00 ;-$70, $00, $00                                    *
;*                                                                             *
;* Mesh definitions are commonly structured as a list of vertices and a list   *
;* of faces, where each face is a list of vertex indices.  This works          *
;* differently.                                                                *
;*                                                                             *
;* There is still a list of vertices, but what's drawn is a list of edges.     *
;* Each vertex has a set of 1-4 associated faces, and each edge has a set of   *
;* 1-2 associated faces.  Each face is just a normal vector used to determine  *
;* visibility for backface removal.  For each vertex and edge, if at least one *
;* associated face is visible, the item is considered visible.                 *
;*                                                                             *
;* This arrangement allows the code to quickly discard vertices that aren't    *
;* part of a visible edge.  It also provides a way for edges that aren't part  *
;* of a face, e.g. the prongs on the Krait, to be excluded: if the two nearby  *
;* faces aren't visible, the prong isn't drawn.  (It's not perfect, but at     *
;* 280x192 you'll never notice.)                                               *
;*                                                                             *
;* If the ship is very far away, it's not drawn.  If it's closer but still too *
;* far to have a distinct shape, determined by the Level of Detail (LOD)       *
;* value, it's drawn as a dot.  When it's close enough to see clearly, the     *
;* distance is compared to the 5-bit visibility limit that is encoded into     *
;* each vertex and edge.  If the distance is greater than the limit, the       *
;* element is not drawn.  This provides a second LOD test, allowing fine       *
;* details (like the cabin window on the Krait) to be excluded while the ship  *
;* is still far away.                                                          *
;*                                                                             *
;* The visibility limit works differently for faces: if the ship is outside    *
;* the visibility limit, the face is *always* visible, regardless of backface  *
;* tests.  You can see this used on the "plate / alloys" hull, which has a     *
;* single face that is always visible (limit=0).                               *
;*******************************************************************************
hull_missile:
         .byte   $00
         .word   $0640
         .byte   $7a        ;edge data offset low
         .byte   $da
         .byte   $55
         .byte   $00
         .byte   $0a
         .byte   $66        ;vertex count * 6 (byte count)
         .byte   $18        ;edge count
         .word   0
         .byte   $24        ;face count * 4 (byte count)
         .byte   $0e
         .byte   2
         .byte   44
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00000000
         .byte   $00,$00,$44,$1f,$10,$32 ;vertices
         .byte   $08,$08,$24,$5f,$21,$54
         .byte   $08,$08,$24,$1f,$32,$74
         .byte   $08,$08,$24,$9f,$30,$76
         .byte   $08,$08,$24,$df,$10,$65
         .byte   $08,$08,$2c,$3f,$74,$88
         .byte   $08,$08,$2c,$7f,$54,$88
         .byte   $08,$08,$2c,$ff,$65,$88
         .byte   $08,$08,$2c,$bf,$76,$88
         .byte   $0c,$0c,$2c,$28,$74,$88
         .byte   $0c,$0c,$2c,$68,$54,$88
         .byte   $0c,$0c,$2c,$e8,$65,$88
         .byte   $0c,$0c,$2c,$a8,$76,$88
         .byte   $08,$08,$0c,$a8,$76,$77
         .byte   $08,$08,$0c,$e8,$65,$66
         .byte   $08,$08,$0c,$28,$74,$77
         .byte   $08,$08,$0c,$68,$54,$55
         .byte   $1f,$21,$00,$04 ;edges
         .byte   $1f,$32,$00,$08
         .byte   $1f,$30,$00,$0c
         .byte   $1f,$10,$00,$10
         .byte   $1f,$24,$04,$08
         .byte   $1f,$51,$04,$10
         .byte   $1f,$60,$0c,$10
         .byte   $1f,$73,$08,$0c
         .byte   $1f,$74,$08,$14
         .byte   $1f,$54,$04,$18
         .byte   $1f,$65,$10,$1c
         .byte   $1f,$76,$0c,$20
         .byte   $1f,$86,$1c,$20
         .byte   $1f,$87,$14,$20
         .byte   $1f,$84,$14,$18
         .byte   $1f,$85,$18,$1c
         .byte   $08,$85,$18,$28
         .byte   $08,$87,$14,$24
         .byte   $08,$87,$20,$30
         .byte   $08,$85,$1c,$2c
         .byte   $08,$74,$24,$3c
         .byte   $08,$54,$28,$40
         .byte   $08,$76,$30,$34
         .byte   $08,$65,$2c,$38
         .byte   $9f,$40,$00,$10 ;faces
         .byte   $5f,$00,$40,$10
         .byte   $1f,$40,$00,$10
         .byte   $1f,$00,$40,$10
         .byte   $1f,$20,$00,$00
         .byte   $5f,$00,$20,$00
         .byte   $9f,$20,$00,$00
         .byte   $1f,$00,$20,$00
         .byte   $3f,$00,$00,$b0
; Coriolis space station.
hull_coriolis:
         .byte   $00
         .word   $6400
         .byte   $74
         .byte   $e4
         .byte   $59
         .byte   $00
         .byte   $36
         .byte   $60
         .byte   $1c
         .word   0
         .byte   $38
         .byte   $78
         .byte   240
         .byte   0
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   %00000110
         .byte   $a0,$00,$a0,$1f,$10,$62 ;vertices
         .byte   $00,$a0,$a0,$1f,$20,$83
         .byte   $a0,$00,$a0,$9f,$30,$74
         .byte   $00,$a0,$a0,$5f,$10,$54
         .byte   $a0,$a0,$00,$5f,$51,$a6
         .byte   $a0,$a0,$00,$1f,$62,$b8
         .byte   $a0,$a0,$00,$9f,$73,$c8
         .byte   $a0,$a0,$00,$df,$54,$97
         .byte   $a0,$00,$a0,$3f,$a6,$db
         .byte   $00,$a0,$a0,$3f,$b8,$dc
         .byte   $a0,$00,$a0,$bf,$97,$dc
         .byte   $00,$a0,$a0,$7f,$95,$da
         .byte   $0a,$1e,$a0,$5e,$00,$00
         .byte   $0a,$1e,$a0,$1e,$00,$00
         .byte   $0a,$1e,$a0,$9e,$00,$00
         .byte   $0a,$1e,$a0,$de,$00,$00
         .byte   $1f,$10,$00,$0c ;edges
         .byte   $1f,$20,$00,$04
         .byte   $1f,$30,$04,$08
         .byte   $1f,$40,$08,$0c
         .byte   $1f,$51,$0c,$10
         .byte   $1f,$61,$00,$10
         .byte   $1f,$62,$00,$14
         .byte   $1f,$82,$14,$04
         .byte   $1f,$83,$04,$18
         .byte   $1f,$73,$08,$18
         .byte   $1f,$74,$08,$1c
         .byte   $1f,$54,$0c,$1c
         .byte   $1f,$da,$20,$2c
         .byte   $1f,$db,$20,$24
         .byte   $1f,$dc,$24,$28
         .byte   $1f,$d9,$28,$2c
         .byte   $1f,$a5,$10,$2c
         .byte   $1f,$a6,$10,$20
         .byte   $1f,$b6,$14,$20
         .byte   $1f,$b8,$14,$24
         .byte   $1f,$c8,$18,$24
         .byte   $1f,$c7,$18,$28
         .byte   $1f,$97,$1c,$28
         .byte   $1f,$95,$1c,$2c
         .byte   $1e,$00,$30,$34
         .byte   $1e,$00,$34,$38
         .byte   $1e,$00,$38,$3c
         .byte   $1e,$00,$3c,$30
         .byte   $1f,$00,$00,$a0 ;faces
         .byte   $5f,$6b,$6b,$6b
         .byte   $1f,$6b,$6b,$6b
         .byte   $9f,$6b,$6b,$6b
         .byte   $df,$6b,$6b,$6b
         .byte   $5f,$00,$a0,$00
         .byte   $1f,$a0,$00,$00
         .byte   $9f,$a0,$00,$00
         .byte   $1f,$00,$a0,$00
         .byte   $ff,$6b,$6b,$6b
         .byte   $7f,$6b,$6b,$6b
         .byte   $3f,$6b,$6b,$6b
         .byte   $bf,$6b,$6b,$6b
         .byte   $3f,$00,$00,$a0
; Escape capsule.
hull_escape:
         .byte   $20
         .word   $0100
         .byte   $2c
         .byte   $44
         .byte   $1d
         .byte   $00
         .byte   $16
         .byte   $18
         .byte   $06
         .word   0
         .byte   $10
         .byte   $08
         .byte   17
         .byte   8
         .byte   $00
         .byte   $00
         .byte   $04
         .byte   %00000000
         .byte   $07,$00,$24,$9f,$12,$33 ;vertices
         .byte   $07,$0e,$0c,$ff,$02,$33
         .byte   $07,$0e,$0c,$bf,$01,$33
         .byte   $15,$00,$00,$1f,$01,$22
         .byte   $1f,$23,$00,$04 ;edges
         .byte   $1f,$03,$04,$08
         .byte   $1f,$01,$08,$0c
         .byte   $1f,$12,$0c,$00
         .byte   $1f,$13,$00,$08
         .byte   $1f,$02,$0c,$04
         .byte   $3f,$34,$00,$7a ;faces
         .byte   $1f,$27,$67,$1e
         .byte   $5f,$27,$67,$1e
         .byte   $9f,$70,$00,$00
; Plate, alloys.
hull_plate:
         .byte   $80
         .word   $0064
         .byte   $2c
         .byte   $3c
         .byte   $15
         .byte   $00
         .byte   $0a
         .byte   $18
         .byte   $04
         .word   0
         .byte   $04
         .byte   $05
         .byte   16
         .byte   16
         .byte   $00
         .byte   $00
         .byte   $03
         .byte   %00000000
         .byte   $0f,$16,$09,$ff,$ff,$ff ;vertices
         .byte   $0f,$26,$09,$bf,$ff,$ff
         .byte   $13,$20,$0b,$14,$ff,$ff
         .byte   $0a,$2e,$06,$54,$ff,$ff
         .byte   $1f,$ff,$00,$04 ;edges
         .byte   $10,$ff,$04,$08
         .byte   $14,$ff,$08,$0c
         .byte   $10,$ff,$0c,$00
         .byte   $00,$00,$00,$00 ;faces (always visible)
; Cargo canister.
hull_cargo:
         .byte   $00
         .word   $0190
         .byte   $50
         .byte   $8c
         .byte   $35
         .byte   $00
         .byte   $12
         .byte   $3c
         .byte   $0f
         .word   0
         .byte   $1c
         .byte   $0c
         .byte   17
         .byte   15
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00000000
         .byte   $18,$10,$00,$1f,$10,$55 ;vertices
         .byte   $18,$05,$0f,$1f,$10,$22
         .byte   $18,$0d,$09,$5f,$20,$33
         .byte   $18,$0d,$09,$7f,$30,$44
         .byte   $18,$05,$0f,$3f,$40,$55
         .byte   $18,$10,$00,$9f,$51,$66
         .byte   $18,$05,$0f,$9f,$21,$66
         .byte   $18,$0d,$09,$df,$32,$66
         .byte   $18,$0d,$09,$ff,$43,$66
         .byte   $18,$05,$0f,$bf,$54,$66
         .byte   $1f,$10,$00,$04 ;edges
         .byte   $1f,$20,$04,$08
         .byte   $1f,$30,$08,$0c
         .byte   $1f,$40,$0c,$10
         .byte   $1f,$50,$00,$10
         .byte   $1f,$51,$00,$14
         .byte   $1f,$21,$04,$18
         .byte   $1f,$32,$08,$1c
         .byte   $1f,$43,$0c,$20
         .byte   $1f,$54,$10,$24
         .byte   $1f,$61,$14,$18
         .byte   $1f,$62,$18,$1c
         .byte   $1f,$63,$1c,$20
         .byte   $1f,$64,$20,$24
         .byte   $1f,$65,$24,$14
         .byte   $1f,$60,$00,$00 ;faces
         .byte   $1f,$00,$29,$1e
         .byte   $5f,$00,$12,$30
         .byte   $5f,$00,$33,$00
         .byte   $7f,$00,$12,$30
         .byte   $3f,$00,$29,$1e
         .byte   $9f,$60,$00,$00
; Boulder.
hull_boulder:
         .byte   $00
         .word   $0384
         .byte   $3e
         .byte   $7a
         .byte   $31
         .byte   $00
         .byte   $0e
         .byte   $2a
         .byte   $0f
         .word   1          ;bounty (1)
         .byte   $28
         .byte   $14
         .byte   20
         .byte   30
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00000000
         .byte   $12,$25,$0b,$bf,$01,$59 ;vertices
         .byte   $1e,$07,$0c,$1f,$12,$56
         .byte   $1c,$07,$0c,$7f,$23,$67
         .byte   $02,$00,$27,$3f,$34,$78
         .byte   $1c,$22,$1e,$bf,$04,$89
         .byte   $05,$0a,$0d,$5f,$ff,$ff
         .byte   $14,$11,$1e,$3f,$ff,$ff
         .byte   $1f,$15,$00,$04 ;edges
         .byte   $1f,$26,$04,$08
         .byte   $1f,$37,$08,$0c
         .byte   $1f,$48,$0c,$10
         .byte   $1f,$09,$10,$00
         .byte   $1f,$01,$00,$14
         .byte   $1f,$12,$04,$14
         .byte   $1f,$23,$08,$14
         .byte   $1f,$34,$0c,$14
         .byte   $1f,$04,$10,$14
         .byte   $1f,$59,$00,$18
         .byte   $1f,$56,$04,$18
         .byte   $1f,$67,$08,$18
         .byte   $1f,$78,$0c,$18
         .byte   $1f,$89,$10,$18
         .byte   $df,$0f,$03,$08 ;faces
         .byte   $9f,$07,$0c,$1e
         .byte   $5f,$20,$2f,$18
         .byte   $ff,$03,$27,$07
         .byte   $ff,$05,$04,$01
         .byte   $1f,$31,$54,$08
         .byte   $3f,$70,$15,$15
         .byte   $7f,$4c,$23,$52
         .byte   $3f,$16,$38,$89
         .byte   $3f,$28,$6e,$26
; Asteroid.
hull_asteroid:
         .byte   $00
         .word   $1900
         .byte   $4a
         .byte   $9e
         .byte   $45
         .byte   $00
         .byte   $22
         .byte   $36
         .byte   $15
         .word   5          ;bounty (5)
         .byte   $38
         .byte   $32
         .byte   60
         .byte   30
         .byte   $00
         .byte   $00
         .byte   $01
         .byte   %00000000
         .byte   $00,$50,$00,$1f,$ff,$ff ;vertices
         .byte   $50,$0a,$00,$df,$ff,$ff
         .byte   $00,$50,$00,$5f,$ff,$ff
         .byte   $46,$28,$00,$5f,$ff,$ff
         .byte   $3c,$32,$00,$1f,$65,$dc
         .byte   $32,$00,$3c,$1f,$ff,$ff
         .byte   $28,$00,$46,$9f,$10,$32
         .byte   $00,$1e,$4b,$3f,$ff,$ff
         .byte   $00,$32,$3c,$7f,$98,$ba
         .byte   $1f,$72,$00,$04 ;edges
         .byte   $1f,$d6,$00,$10
         .byte   $1f,$c5,$0c,$10
         .byte   $1f,$b4,$08,$0c
         .byte   $1f,$a3,$04,$08
         .byte   $1f,$32,$04,$18
         .byte   $1f,$31,$08,$18
         .byte   $1f,$41,$08,$14
         .byte   $1f,$10,$14,$18
         .byte   $1f,$60,$00,$14
         .byte   $1f,$54,$0c,$14
         .byte   $1f,$20,$00,$18
         .byte   $1f,$65,$10,$14
         .byte   $1f,$a8,$04,$20
         .byte   $1f,$87,$04,$1c
         .byte   $1f,$d7,$00,$1c
         .byte   $1f,$dc,$10,$1c
         .byte   $1f,$c9,$0c,$1c
         .byte   $1f,$b9,$0c,$20
         .byte   $1f,$ba,$08,$20
         .byte   $1f,$98,$1c,$20
         .byte   $1f,$09,$42,$51 ;faces
         .byte   $5f,$09,$42,$51
         .byte   $9f,$48,$40,$1f
         .byte   $df,$40,$49,$2f
         .byte   $5f,$2d,$4f,$41
         .byte   $1f,$87,$0f,$23
         .byte   $1f,$26,$4c,$46
         .byte   $bf,$42,$3b,$27
         .byte   $ff,$43,$0f,$50
         .byte   $7f,$42,$0e,$4b
         .byte   $ff,$46,$50,$28
         .byte   $7f,$3a,$66,$33
         .byte   $3f,$51,$09,$43
         .byte   $3f,$2f,$5e,$3f
; Splinter, rock.
; 
; Header seems broken (but matches C64 def)
;   edges offset = $fd78 --> A5E6 == escape pod edges
;   faces offset = $0044 --> A8B2 == hull_shuttle header
; 
; The data parses as valid, but the backface removal fails at some angles.
hull_splinter:
         .byte   $b0
         .word   $0100
         .byte   $78        ;edge offset lo
         .byte   $44        ;face offset lo
         .byte   $1d
         .byte   $00
         .byte   $16
         .byte   $18        ;vertex count = 4 * 6
         .byte   $06        ;edge count = 6
         .word   0
         .byte   $10        ;face count = 4 * 4
         .byte   $08
         .byte   20
         .byte   10
         .byte   $fd        ;edge offset hi
         .byte   $00        ;face offset hi
         .byte   $05
         .byte   %00000000
         .byte   $18,$19,$10,$df,$12,$33 ;vertices
         .byte   $00,$0c,$0a,$3f,$02,$33
         .byte   $0b,$06,$02,$5f,$01,$33
         .byte   $0c,$2a,$07,$1f,$01,$22
         .byte   $1f,$23,$00,$04 ;looks like edge data (but not used)
         .byte   $1f,$03,$04,$08
         .byte   $1f,$01,$08,$0c
         .byte   $1f,$12,$0c,$00
; Shuttle.
hull_shuttle:
         .byte   $0f
         .word   $09c4
         .byte   $86
         .byte   $fe
         .byte   $71
         .byte   $00
         .byte   $26
         .byte   $72
         .byte   $1e
         .word   0
         .byte   $34
         .byte   $16
         .byte   32
         .byte   8
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00000000
         .byte   $00,$11,$17,$5f,$ff,$ff ;vertices
         .byte   $11,$00,$17,$9f,$ff,$ff
         .byte   $00,$12,$17,$1f,$ff,$ff
         .byte   $12,$00,$17,$1f,$ff,$ff
         .byte   $14,$14,$1b,$ff,$12,$39
         .byte   $14,$14,$1b,$bf,$34,$59
         .byte   $14,$14,$1b,$3f,$56,$79
         .byte   $14,$14,$1b,$7f,$17,$89
         .byte   $05,$00,$1b,$30,$99,$99
         .byte   $00,$02,$1b,$70,$99,$99
         .byte   $05,$00,$1b,$a9,$99,$99
         .byte   $00,$03,$1b,$29,$99,$99
         .byte   $00,$09,$23,$50,$0a,$bc
         .byte   $03,$01,$1f,$47,$ff,$02 ;v13 ($34)
         .byte   $04,$0b,$19,$08,$01,$f4
         .byte   $0b,$04,$19,$08,$a1,$3f
         .byte   $03,$01,$1f,$c7,$6b,$23 ;v16 ($40)
         .byte   $03,$0b,$19,$88,$f8,$c0
         .byte   $0a,$04,$19,$88,$4f,$18
         .byte   $1f,$02,$00,$04 ;edges
         .byte   $1f,$4a,$04,$08
         .byte   $1f,$6b,$08,$0c
         .byte   $1f,$8c,$00,$0c
         .byte   $1f,$18,$00,$1c
         .byte   $18,$12,$00,$10
         .byte   $1f,$23,$04,$10
         .byte   $18,$34,$04,$14
         .byte   $1f,$45,$08,$14
         .byte   $0c,$56,$08,$18
         .byte   $1f,$67,$0c,$18
         .byte   $18,$78,$0c,$1c
         .byte   $1f,$39,$10,$14
         .byte   $1f,$59,$14,$18
         .byte   $1f,$79,$18,$1c
         .byte   $1f,$19,$10,$1c
         .byte   $10,$0c,$00,$30
         .byte   $10,$0a,$04,$30
         .byte   $10,$ab,$08,$30
         .byte   $10,$bc,$0c,$30
         .byte   $10,$99,$20,$24
         .byte   $07,$99,$24,$28
         .byte   $09,$99,$28,$2c
         .byte   $07,$99,$20,$2c
         .byte   $05,$bb,$34,$38 ;window 1
         .byte   $08,$bb,$38,$3c
         .byte   $07,$bb,$34,$3c
         .byte   $05,$aa,$40,$44 ;window 2
         .byte   $08,$aa,$44,$48
         .byte   $07,$aa,$40,$48
         .byte   $df,$37,$37,$28 ;faces
         .byte   $5f,$00,$4a,$04
         .byte   $df,$33,$33,$17
         .byte   $9f,$4a,$00,$04
         .byte   $9f,$33,$33,$17
         .byte   $1f,$00,$4a,$04
         .byte   $1f,$33,$33,$17
         .byte   $1f,$4a,$00,$04
         .byte   $5f,$33,$33,$17
         .byte   $3f,$00,$00,$6b
         .byte   $9f,$29,$29,$5a ;face 10
         .byte   $1f,$29,$29,$5a
         .byte   $5f,$37,$37,$28
; Transporter.
hull_transporter:
         .byte   $00
         .word   $09c4
         .byte   $f2
         .byte   $aa
         .byte   $95
         .byte   $30
         .byte   $1a
         .byte   $de
         .byte   $2e
         .word   0
         .byte   $38
         .byte   $10
         .byte   32
         .byte   10
         .byte   $00
         .byte   $01
         .byte   $02
         .byte   %00000000
         .byte   $00,$0a,$1a,$3f,$06,$77 ;vertices
         .byte   $19,$04,$1a,$bf,$01,$77
         .byte   $1c,$03,$1a,$ff,$01,$22
         .byte   $19,$08,$1a,$ff,$02,$33
         .byte   $1a,$08,$1a,$7f,$03,$44
         .byte   $1d,$03,$1a,$7f,$04,$55
         .byte   $1a,$04,$1a,$3f,$05,$66
         .byte   $00,$06,$0c,$13,$ff,$ff
         .byte   $1e,$01,$0c,$df,$17,$89
         .byte   $21,$08,$0c,$df,$12,$39
         .byte   $21,$08,$0c,$5f,$34,$5a
         .byte   $1e,$01,$0c,$5f,$56,$ab
         .byte   $0b,$02,$1e,$df,$89,$cd
         .byte   $0d,$08,$1e,$df,$39,$dd
         .byte   $0e,$08,$1e,$5f,$3a,$dd
         .byte   $0b,$02,$1e,$5f,$ab,$cd
         .byte   $05,$06,$02,$87,$77,$77 ;decoration vertices, face 7
         .byte   $12,$03,$02,$87,$77,$77
         .byte   $05,$07,$07,$a7,$77,$77
         .byte   $12,$04,$07,$a7,$77,$77
         .byte   $0b,$06,$0e,$a7,$77,$77
         .byte   $0b,$05,$07,$a7,$77,$77
         .byte   $05,$07,$0e,$27,$66,$66 ;decoration vertices, face 6
         .byte   $12,$04,$0e,$27,$66,$66
         .byte   $0b,$05,$07,$27,$66,$66
         .byte   $05,$06,$03,$27,$66,$66
         .byte   $12,$03,$03,$27,$66,$66
         .byte   $0b,$04,$08,$07,$66,$66
         .byte   $0b,$05,$03,$27,$66,$66
         .byte   $10,$08,$0d,$e6,$33,$33
         .byte   $10,$08,$10,$c6,$33,$33
         .byte   $11,$08,$0d,$66,$33,$33
         .byte   $11,$08,$10,$46,$33,$33
         .byte   $0d,$03,$1a,$e8,$00,$00
         .byte   $0d,$03,$1a,$68,$00,$00
         .byte   $09,$03,$1a,$25,$00,$00
         .byte   $08,$03,$1a,$a5,$00,$00
         .byte   $1f,$07,$00,$04 ;edges
         .byte   $1f,$01,$04,$08
         .byte   $1f,$02,$08,$0c
         .byte   $1f,$03,$0c,$10
         .byte   $1f,$04,$10,$14
         .byte   $1f,$05,$14,$18
         .byte   $1f,$06,$00,$18
         .byte   $10,$67,$00,$1c
         .byte   $1f,$17,$04,$20
         .byte   $0b,$12,$08,$24
         .byte   $1f,$23,$0c,$24
         .byte   $1f,$34,$10,$28
         .byte   $0b,$45,$14,$28
         .byte   $1f,$56,$18,$2c
         .byte   $11,$78,$1c,$20
         .byte   $11,$19,$20,$24
         .byte   $11,$5a,$28,$2c
         .byte   $11,$6b,$1c,$2c
         .byte   $13,$bc,$1c,$3c
         .byte   $13,$8c,$1c,$30
         .byte   $10,$89,$20,$30
         .byte   $1f,$39,$24,$34
         .byte   $1f,$3a,$28,$38
         .byte   $10,$ab,$2c,$3c
         .byte   $1f,$9d,$30,$34
         .byte   $1f,$3d,$34,$38
         .byte   $1f,$ad,$38,$3c
         .byte   $1f,$cd,$30,$3c
         .byte   $07,$77,$40,$44 ;deco: vertices 16-21, face 7
         .byte   $07,$77,$48,$4c ; (5 edges, "IB")
         .byte   $07,$77,$4c,$50
         .byte   $07,$77,$48,$50
         .byte   $07,$77,$50,$54
         .byte   $07,$66,$58,$5c ;deco: vertices 22-28, face 6
         .byte   $07,$66,$5c,$60 ; (7 edges, "DB")
         .byte   $07,$66,$60,$58
         .byte   $07,$66,$64,$68
         .byte   $07,$66,$68,$6c
         .byte   $07,$66,$64,$6c
         .byte   $07,$66,$6c,$70 ;(end of decorations)
         .byte   $06,$33,$74,$78
         .byte   $06,$33,$7c,$80
         .byte   $08,$00,$84,$88
         .byte   $05,$00,$88,$8c
         .byte   $05,$00,$8c,$90
         .byte   $05,$00,$90,$84
         .byte   $3f,$00,$00,$67 ;faces
         .byte   $bf,$6f,$30,$07
         .byte   $ff,$69,$3f,$15
         .byte   $5f,$00,$22,$00
         .byte   $7f,$69,$3f,$15
         .byte   $3f,$6f,$30,$07
         .byte   $1f,$08,$20,$03 ;face 6 normal [$08,$20,$03]
         .byte   $9f,$08,$20,$03 ;face 7 normal [-$08,$20,$03]
         .byte   $93,$08,$22,$0b
         .byte   $9f,$4b,$20,$4f
         .byte   $1f,$4b,$20,$4f
         .byte   $13,$08,$22,$0b
         .byte   $1f,$00,$26,$11
         .byte   $1f,$00,$00,$79
; Cobra MK-III.
hull_cobra_mk3:
         .byte   $03
         .word   $2341
         .byte   $bc
         .byte   $54
         .byte   $9d
         .byte   $54        ;gun vertex (v21)
         .byte   $2a
         .byte   $a8        ;vertex count * 6
         .byte   $26        ;edge count
         .word   0
         .byte   $34        ;face count * 4
         .byte   $32
         .byte   150        ;health
         .byte   28         ;max speed
         .byte   $00
         .byte   $01
         .byte   $01
         .byte   %00010011  ;00LLLMMM
         .byte   $20,$00,$4c,$1f,$ff,$ff ;vertices
         .byte   $20,$00,$4c,$9f,$ff,$ff
         .byte   $00,$1a,$18,$1f,$ff,$ff
         .byte   $78,$03,$08,$ff,$73,$aa
         .byte   $78,$03,$08,$7f,$84,$cc
         .byte   $58,$10,$28,$bf,$ff,$ff
         .byte   $58,$10,$28,$3f,$ff,$ff
         .byte   $80,$08,$28,$7f,$98,$cc
         .byte   $80,$08,$28,$ff,$97,$aa
         .byte   $00,$1a,$28,$3f,$65,$99
         .byte   $20,$18,$28,$ff,$a9,$bb
         .byte   $20,$18,$28,$7f,$b9,$cc
         .byte   $24,$08,$28,$b4,$99,$99
         .byte   $08,$0c,$28,$b4,$99,$99
         .byte   $08,$0c,$28,$34,$99,$99
         .byte   $24,$08,$28,$34,$99,$99
         .byte   $24,$0c,$28,$74,$99,$99
         .byte   $08,$10,$28,$74,$99,$99
         .byte   $08,$10,$28,$f4,$99,$99
         .byte   $24,$0c,$28,$f4,$99,$99
         .byte   $00,$00,$4c,$06,$b0,$bb
         .byte   $00,$00,$5a,$1f,$b0,$bb
         .byte   $50,$06,$28,$e8,$99,$99
         .byte   $50,$06,$28,$a8,$99,$99
         .byte   $58,$00,$28,$a6,$99,$99
         .byte   $50,$06,$28,$28,$99,$99
         .byte   $58,$00,$28,$26,$99,$99
         .byte   $50,$06,$28,$68,$99,$99
         .byte   $1f,$b0,$00,$04 ;edges
         .byte   $1f,$c4,$00,$10
         .byte   $1f,$a3,$04,$0c
         .byte   $1f,$a7,$0c,$20
         .byte   $1f,$c8,$10,$1c
         .byte   $1f,$98,$18,$1c
         .byte   $1f,$96,$18,$24
         .byte   $1f,$95,$14,$24
         .byte   $1f,$97,$14,$20
         .byte   $1f,$51,$08,$14
         .byte   $1f,$62,$08,$18
         .byte   $1f,$73,$0c,$14
         .byte   $1f,$84,$10,$18
         .byte   $1f,$10,$04,$08
         .byte   $1f,$20,$00,$08
         .byte   $1f,$a9,$20,$28
         .byte   $1f,$b9,$28,$2c
         .byte   $1f,$c9,$1c,$2c
         .byte   $1f,$ba,$04,$28
         .byte   $1f,$cb,$00,$2c
         .byte   $1d,$31,$04,$14
         .byte   $1d,$42,$00,$18
         .byte   $06,$b0,$50,$54
         .byte   $14,$99,$30,$34
         .byte   $14,$99,$48,$4c
         .byte   $14,$99,$38,$3c
         .byte   $14,$99,$40,$44
         .byte   $13,$99,$3c,$40
         .byte   $11,$99,$38,$44
         .byte   $13,$99,$34,$48
         .byte   $13,$99,$30,$4c
         .byte   $1e,$65,$08,$24
         .byte   $06,$99,$58,$60
         .byte   $06,$99,$5c,$60
         .byte   $08,$99,$58,$5c
         .byte   $06,$99,$64,$68
         .byte   $06,$99,$68,$6c
         .byte   $08,$99,$64,$6c
         .byte   $1f,$00,$3e,$1f ;faces
         .byte   $9f,$12,$37,$10
         .byte   $1f,$12,$37,$10
         .byte   $9f,$10,$34,$0e
         .byte   $1f,$10,$34,$0e
         .byte   $9f,$0e,$2f,$00
         .byte   $1f,$0e,$2f,$00
         .byte   $9f,$3d,$66,$00
         .byte   $1f,$3d,$66,$00
         .byte   $3f,$00,$00,$50
         .byte   $df,$07,$2a,$09
         .byte   $5f,$00,$1e,$06
         .byte   $5f,$07,$2a,$09
; Python.
hull_python:
         .byte   $05
         .word   $1900
         .byte   $56
         .byte   $be
         .byte   $59
         .byte   $00
         .byte   $2a
         .byte   $42
         .byte   $1a
         .word   0
         .byte   $34
         .byte   $28
         .byte   250
         .byte   20
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   %00011011
         .byte   $00,$00,$e0,$1f,$10,$32 ;vertices
         .byte   $00,$30,$30,$1f,$10,$54
         .byte   $60,$00,$10,$3f,$ff,$ff
         .byte   $60,$00,$10,$bf,$ff,$ff
         .byte   $00,$30,$20,$3f,$54,$98
         .byte   $00,$18,$70,$3f,$89,$cc
         .byte   $30,$00,$70,$bf,$b8,$cc
         .byte   $30,$00,$70,$3f,$a9,$cc
         .byte   $00,$30,$30,$5f,$32,$76
         .byte   $00,$30,$20,$7f,$76,$ba
         .byte   $00,$18,$70,$7f,$ba,$cc
         .byte   $1f,$32,$00,$20 ;edges
         .byte   $1f,$20,$00,$0c
         .byte   $1f,$31,$00,$08
         .byte   $1f,$10,$00,$04
         .byte   $1f,$59,$08,$10
         .byte   $1f,$51,$04,$08
         .byte   $1f,$37,$08,$20
         .byte   $1f,$40,$04,$0c
         .byte   $1f,$62,$0c,$20
         .byte   $1f,$a7,$08,$24
         .byte   $1f,$84,$0c,$10
         .byte   $1f,$b6,$0c,$24
         .byte   $07,$88,$0c,$14
         .byte   $07,$bb,$0c,$28
         .byte   $07,$99,$08,$14
         .byte   $07,$aa,$08,$28
         .byte   $1f,$a9,$08,$1c
         .byte   $1f,$b8,$0c,$18
         .byte   $1f,$c8,$14,$18
         .byte   $1f,$c9,$14,$1c
         .byte   $1f,$ac,$1c,$28
         .byte   $1f,$cb,$18,$28
         .byte   $1f,$98,$10,$14
         .byte   $1f,$ba,$24,$28
         .byte   $1f,$54,$04,$10
         .byte   $1f,$76,$20,$24
         .byte   $9f,$1b,$28,$0b ;faces
         .byte   $1f,$1b,$28,$0b
         .byte   $df,$1b,$28,$0b
         .byte   $5f,$1b,$28,$0b
         .byte   $9f,$13,$26,$00
         .byte   $1f,$13,$26,$00
         .byte   $df,$13,$26,$00
         .byte   $5f,$13,$26,$00
         .byte   $bf,$19,$25,$0b
         .byte   $3f,$19,$25,$0b
         .byte   $7f,$19,$25,$0b
         .byte   $ff,$19,$25,$0b
         .byte   $3f,$00,$00,$70
; Boa.
hull_boa:
         .byte   $05
         .word   $1324
         .byte   $62
         .byte   $c2
         .byte   $5d
         .byte   $00
         .byte   $26
         .byte   $4e
         .byte   $18
         .word   0
         .byte   $34
         .byte   $28
         .byte   250
         .byte   24
         .byte   $00
         .byte   $00
         .byte   $00
         .byte   %00011100
         .byte   $00,$00,$5d,$1f,$ff,$ff ;vertices
         .byte   $00,$28,$57,$38,$02,$33
         .byte   $26,$19,$63,$78,$01,$44
         .byte   $26,$19,$63,$f8,$12,$55
         .byte   $26,$28,$3b,$bf,$23,$69
         .byte   $26,$28,$3b,$3f,$03,$6b
         .byte   $3e,$00,$43,$3f,$04,$8b
         .byte   $18,$41,$4f,$7f,$14,$8a
         .byte   $18,$41,$4f,$ff,$15,$7a
         .byte   $3e,$00,$43,$bf,$25,$79
         .byte   $00,$07,$6b,$36,$02,$aa
         .byte   $0d,$09,$6b,$76,$01,$aa
         .byte   $0d,$09,$6b,$f6,$12,$cc
         .byte   $1f,$6b,$00,$14 ;edges
         .byte   $1f,$8a,$00,$1c
         .byte   $1f,$79,$00,$24
         .byte   $1d,$69,$00,$10
         .byte   $1d,$8b,$00,$18
         .byte   $1d,$7a,$00,$20
         .byte   $1f,$36,$10,$14
         .byte   $1f,$0b,$14,$18
         .byte   $1f,$48,$18,$1c
         .byte   $1f,$1a,$1c,$20
         .byte   $1f,$57,$20,$24
         .byte   $1f,$29,$10,$24
         .byte   $18,$23,$04,$10
         .byte   $18,$03,$04,$14
         .byte   $18,$25,$0c,$24
         .byte   $18,$15,$0c,$20
         .byte   $18,$04,$08,$18
         .byte   $18,$14,$08,$1c
         .byte   $16,$02,$04,$28
         .byte   $16,$01,$08,$2c
         .byte   $16,$12,$0c,$30
         .byte   $0e,$0c,$28,$2c
         .byte   $0e,$1c,$2c,$30
         .byte   $0e,$2c,$30,$28
         .byte   $3f,$2b,$25,$3c ;faces
         .byte   $7f,$00,$2d,$59
         .byte   $bf,$2b,$25,$3c
         .byte   $1f,$00,$28,$00
         .byte   $7f,$3e,$20,$14
         .byte   $ff,$3e,$20,$14
         .byte   $1f,$00,$17,$06
         .byte   $df,$17,$0f,$09
         .byte   $5f,$17,$0f,$09
         .byte   $9f,$1a,$0d,$0a
         .byte   $5f,$00,$1f,$0c
         .byte   $1f,$1a,$0d,$0a
         .byte   $2e,$00,$00,$6b
; Anaconda.
hull_anaconda:
         .byte   $07
         .word   $2710
         .byte   $6e
         .byte   $d2
         .byte   $5d
         .byte   $30
         .byte   $2e
         .byte   $5a
         .byte   $19
         .word   0
         .byte   $30
         .byte   $24
         .byte   252
         .byte   14
         .byte   $00
         .byte   $00
         .byte   $01
         .byte   %00111111
         .byte   $00,$07,$3a,$3e,$01,$55 ;vertices
         .byte   $2b,$0d,$25,$fe,$01,$22
         .byte   $1a,$2f,$03,$fe,$02,$33
         .byte   $1a,$2f,$03,$7e,$03,$44
         .byte   $2b,$0d,$25,$7e,$04,$55
         .byte   $00,$30,$31,$3e,$15,$66
         .byte   $45,$0f,$0f,$be,$12,$77
         .byte   $2b,$27,$28,$df,$23,$88
         .byte   $2b,$27,$28,$5f,$34,$99
         .byte   $45,$0f,$0f,$3e,$45,$aa
         .byte   $2b,$35,$17,$bf,$ff,$ff
         .byte   $45,$01,$20,$df,$27,$88
         .byte   $00,$00,$fe,$1f,$ff,$ff
         .byte   $45,$01,$20,$5f,$49,$aa
         .byte   $2b,$35,$17,$3f,$ff,$ff
         .byte   $1e,$01,$00,$04 ;edges
         .byte   $1e,$02,$04,$08
         .byte   $1e,$03,$08,$0c
         .byte   $1e,$04,$0c,$10
         .byte   $1e,$05,$00,$10
         .byte   $1d,$15,$00,$14
         .byte   $1d,$12,$04,$18
         .byte   $1d,$23,$08,$1c
         .byte   $1d,$34,$0c,$20
         .byte   $1d,$45,$10,$24
         .byte   $1e,$16,$14,$28
         .byte   $1e,$17,$18,$28
         .byte   $1e,$27,$18,$2c
         .byte   $1e,$28,$1c,$2c
         .byte   $1f,$38,$1c,$30
         .byte   $1f,$39,$20,$30
         .byte   $1e,$49,$20,$34
         .byte   $1e,$4a,$24,$34
         .byte   $1e,$5a,$24,$38
         .byte   $1e,$56,$14,$38
         .byte   $1e,$6b,$28,$38
         .byte   $1f,$7b,$28,$30
         .byte   $1f,$78,$2c,$30
         .byte   $1f,$9a,$30,$34
         .byte   $1f,$ab,$30,$38
         .byte   $7e,$00,$33,$31 ;faces
         .byte   $be,$33,$12,$57
         .byte   $fe,$4d,$39,$13
         .byte   $5f,$00,$5a,$10
         .byte   $7e,$4d,$39,$13
         .byte   $3e,$33,$12,$57
         .byte   $3e,$00,$6f,$14
         .byte   $9f,$61,$48,$18
         .byte   $df,$6c,$44,$22
         .byte   $5f,$6c,$44,$22
         .byte   $1f,$61,$48,$18
         .byte   $1f,$00,$5e,$12
; Crewed asteroid.
; 
; The vertices for this one match hull_asteroid, and it shares the actual
; edge/face data: hull_asteroid:
; 
;   edges at +$F7B2 = $A7E2 = asteroid edges
;   faces at +$F806 = $A836 = asteroid faces
; 
; The only differences are in the ship characteristics: this has 3x the health
; of an Asteroid, and has a pair of missiles.  The flags indicate that it has an
; escape pod and is a trader.
hull_asteroid2:
         .byte   $07
         .word   $1900
         .byte   $b2
         .byte   $06
         .byte   $45
         .byte   $00
         .byte   $32
         .byte   $36
         .byte   $15
         .word   0
         .byte   $38
         .byte   $32
         .byte   180
         .byte   30
         .byte   $f7
         .byte   $f8
         .byte   $01
         .byte   %00000010
         .byte   $00,$50,$00,$1f,$ff,$ff ;vertices
         .byte   $50,$0a,$00,$df,$ff,$ff
         .byte   $00,$50,$00,$5f,$ff,$ff
         .byte   $46,$28,$00,$5f,$ff,$ff
         .byte   $3c,$32,$00,$1f,$65,$dc
         .byte   $32,$00,$3c,$1f,$ff,$ff
         .byte   $28,$00,$46,$9f,$10,$32
         .byte   $00,$1e,$4b,$3f,$ff,$ff
         .byte   $00,$32,$3c,$7f,$98,$ba
; Viper.
hull_viper:
         .byte   $00
         .word   $15f9
         .byte   $6e
         .byte   $be
         .byte   $51
         .byte   $00
         .byte   $2a
         .byte   $5a
         .byte   $14
         .word   0
         .byte   $1c
         .byte   $17
         .byte   140
         .byte   32
         .byte   $00
         .byte   $00
         .byte   $01
         .byte   %00010001
         .byte   $00,$00,$48,$1f,$21,$43 ;vertices
         .byte   $00,$10,$18,$1e,$10,$22
         .byte   $00,$10,$18,$5e,$43,$55
         .byte   $30,$00,$18,$3f,$42,$66
LB0A6:   .byte   $30,$00,$18,$bf,$31,$66
         .byte   $18,$10,$18,$7e,$54,$66
         .byte   $18,$10,$18,$fe,$35,$66
         .byte   $18,$10,$18,$3f,$20,$66
         .byte   $18,$10,$18,$bf,$10,$66
         .byte   $20,$00,$18,$b3,$66,$66
         .byte   $20,$00,$18,$33,$66,$66
         .byte   $08,$08,$18,$33,$66,$66
         .byte   $08,$08,$18,$b3,$66,$66
         .byte   $08,$08,$18,$f2,$66,$66
         .byte   $08,$08,$18,$72,$66,$66
         .byte   $1f,$42,$00,$0c ;edges
         .byte   $1e,$21,$00,$04
         .byte   $1e,$43,$00,$08
         .byte   $1f,$31,$00,$10
         .byte   $1e,$20,$04,$1c
         .byte   $1e,$10,$04,$20
         .byte   $1e,$54,$08,$14
         .byte   $1e,$53,$08,$18
         .byte   $1f,$60,$1c,$20
         .byte   $1e,$65,$14,$18
         .byte   $1f,$61,$10,$20
         .byte   $1e,$63,$10,$18
         .byte   $1f,$62,$0c,$1c
         .byte   $1e,$46,$0c,$14
         .byte   $13,$66,$24,$30
         .byte   $12,$66,$24,$34
         .byte   $13,$66,$28,$2c
         .byte   $12,$66,$28,$38
         .byte   $10,$66,$2c,$38
         .byte   $10,$66,$30,$34
         .byte   $1f,$00,$20,$00 ;faces
         .byte   $9f,$16,$21,$0b
         .byte   $1f,$16,$21,$0b
         .byte   $df,$16,$21,$0b
         .byte   $5f,$16,$21,$0b
         .byte   $5f,$00,$20,$00
         .byte   $3f,$00,$00,$30
; Sidewinder.
hull_sidewinder:
         .byte   $00
         .word   $1081
         .byte   $50
         .byte   $8c
         .byte   $41
         .byte   $00
         .byte   $1e
         .byte   $3c
         .byte   $0f
         .word   50         ;bounty (50)
         .byte   $1c
         .byte   $14
         .byte   70
         .byte   37
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00010000
         .byte   $20,$00,$24,$9f,$10,$54 ;vertices
         .byte   $20,$00,$24,$1f,$20,$65
         .byte   $40,$00,$1c,$3f,$32,$66
         .byte   $40,$00,$1c,$bf,$31,$44
         .byte   $00,$10,$1c,$3f,$10,$32
         .byte   $00,$10,$1c,$7f,$43,$65
         .byte   $0c,$06,$1c,$af,$33,$33
         .byte   $0c,$06,$1c,$2f,$33,$33
         .byte   $0c,$06,$1c,$6c,$33,$33
         .byte   $0c,$06,$1c,$ec,$33,$33
         .byte   $1f,$50,$00,$04 ;edges
         .byte   $1f,$62,$04,$08
         .byte   $1f,$20,$04,$10
         .byte   $1f,$10,$00,$10
         .byte   $1f,$41,$00,$0c
         .byte   $1f,$31,$0c,$10
         .byte   $1f,$32,$08,$10
         .byte   $1f,$43,$0c,$14
         .byte   $1f,$63,$08,$14
         .byte   $1f,$65,$04,$14
         .byte   $1f,$54,$00,$14
         .byte   $0f,$33,$18,$1c
         .byte   $0c,$33,$1c,$20
         .byte   $0c,$33,$18,$24
         .byte   $0c,$33,$20,$24
         .byte   $1f,$00,$20,$08 ;faces
         .byte   $9f,$0c,$2f,$06
         .byte   $1f,$0c,$2f,$06
         .byte   $3f,$00,$00,$70
         .byte   $df,$0c,$2f,$06
         .byte   $5f,$00,$20,$08
         .byte   $5f,$0c,$2f,$06
; Mamba.
hull_mamba:
         .byte   $01
         .word   $1324
         .byte   $aa
         .byte   $1a
         .byte   $61
         .byte   $00
         .byte   $22
         .byte   $96
         .byte   $1c
         .word   150        ;bounty (150)
         .byte   $14
         .byte   $19
         .byte   90
         .byte   30
         .byte   $00
         .byte   $01
         .byte   $02
         .byte   %00010010
         .byte   $00,$00,$40,$1f,$10,$32 ;vertices
         .byte   $40,$08,$20,$ff,$20,$44
         .byte   $20,$08,$20,$be,$21,$44
         .byte   $20,$08,$20,$3e,$31,$44
         .byte   $40,$08,$20,$7f,$30,$44
         .byte   $04,$04,$10,$8e,$11,$11
         .byte   $04,$04,$10,$0e,$11,$11
         .byte   $08,$03,$1c,$0d,$11,$11
         .byte   $08,$03,$1c,$8d,$11,$11
         .byte   $14,$04,$10,$d4,$00,$00
         .byte   $14,$04,$10,$54,$00,$00
         .byte   $18,$07,$14,$f4,$00,$00
         .byte   $10,$07,$14,$f0,$00,$00
         .byte   $10,$07,$14,$70,$00,$00
         .byte   $18,$07,$14,$74,$00,$00
         .byte   $08,$04,$20,$ad,$44,$44
         .byte   $08,$04,$20,$2d,$44,$44
         .byte   $08,$04,$20,$6e,$44,$44
         .byte   $08,$04,$20,$ee,$44,$44
         .byte   $20,$04,$20,$a7,$44,$44
         .byte   $20,$04,$20,$27,$44,$44
         .byte   $24,$04,$20,$67,$44,$44
         .byte   $24,$04,$20,$e7,$44,$44
         .byte   $26,$00,$20,$a5,$44,$44
         .byte   $26,$00,$20,$25,$44,$44
         .byte   $1f,$20,$00,$04 ;edges
         .byte   $1f,$30,$00,$10
         .byte   $1f,$40,$04,$10
         .byte   $1e,$42,$04,$08
         .byte   $1e,$41,$08,$0c
         .byte   $1e,$43,$0c,$10
         .byte   $0e,$11,$14,$18
         .byte   $0c,$11,$18,$1c
         .byte   $0d,$11,$1c,$20
         .byte   $0c,$11,$14,$20
         .byte   $14,$00,$24,$2c
         .byte   $10,$00,$24,$30
         .byte   $10,$00,$28,$34
         .byte   $14,$00,$28,$38
         .byte   $0e,$00,$34,$38
         .byte   $0e,$00,$2c,$30
         .byte   $0d,$44,$3c,$40
         .byte   $0e,$44,$44,$48
         .byte   $0c,$44,$3c,$48
         .byte   $0c,$44,$40,$44
         .byte   $07,$44,$50,$54
         .byte   $05,$44,$50,$60
         .byte   $05,$44,$54,$60
         .byte   $07,$44,$4c,$58
         .byte   $05,$44,$4c,$5c
         .byte   $05,$44,$58,$5c
         .byte   $1e,$21,$00,$08
         .byte   $1e,$31,$00,$0c
         .byte   $5e,$00,$18,$02 ;faces
         .byte   $1e,$00,$18,$02
         .byte   $9e,$20,$40,$10
         .byte   $1e,$20,$40,$10
         .byte   $3e,$00,$00,$7f
; Krait.
hull_krait:
         .byte   $01
         .word   $0e10
         .byte   $7a
         .byte   $ce
         .byte   $59
         .byte   $00
         .byte   $12
         .byte   $66
         .byte   $15
         .word   100        ;bounty (100)
         .byte   $18
         .byte   $14
         .byte   80
         .byte   30
         .byte   $00
         .byte   $00
         .byte   $01
         .byte   %00010000
         .byte   $00,$00,$60,$1f,$01,$23 ;vertices
         .byte   $00,$12,$30,$3f,$03,$45
         .byte   $00,$12,$30,$7f,$12,$45
         .byte   $5a,$00,$03,$3f,$01,$44
         .byte   $5a,$00,$03,$bf,$23,$55
         .byte   $5a,$00,$57,$1e,$01,$11
         .byte   $5a,$00,$57,$9e,$23,$33
         .byte   $00,$05,$35,$09,$00,$33
         .byte   $00,$07,$26,$06,$00,$33
         .byte   $12,$07,$13,$89,$33,$33
         .byte   $12,$07,$13,$09,$00,$00
         .byte   $12,$0b,$27,$28,$44,$44
         .byte   $12,$0b,$27,$68,$44,$44
         .byte   $24,$00,$1e,$28,$44,$44
         .byte   $12,$0b,$27,$a8,$55,$55
         .byte   $12,$0b,$27,$e8,$55,$55
         .byte   $24,$00,$1e,$a8,$55,$55
         .byte   $1f,$03,$00,$04 ;edges
         .byte   $1f,$12,$00,$08
         .byte   $1f,$01,$00,$0c
         .byte   $1f,$23,$00,$10
         .byte   $1f,$35,$04,$10
         .byte   $1f,$25,$10,$08
         .byte   $1f,$14,$08,$0c
         .byte   $1f,$04,$0c,$04
         .byte   $1e,$01,$0c,$14
         .byte   $1e,$23,$10,$18
         .byte   $08,$45,$04,$08
         .byte   $09,$00,$1c,$28
         .byte   $06,$00,$20,$28
         .byte   $09,$33,$1c,$24
         .byte   $06,$33,$20,$24
         .byte   $08,$44,$2c,$34
         .byte   $08,$44,$34,$30
         .byte   $07,$44,$30,$2c
         .byte   $07,$55,$38,$3c
         .byte   $08,$55,$3c,$40
         .byte   $08,$55,$40,$38
         .byte   $1f,$03,$18,$03 ;faces
         .byte   $5f,$03,$18,$03
         .byte   $df,$03,$18,$03
         .byte   $9f,$03,$18,$03
         .byte   $3f,$26,$00,$4d
         .byte   $bf,$26,$00,$4d
; Adder.
hull_adder:
         .byte   $00
         .word   $09c4
         .byte   $80
         .byte   $f4
         .byte   $65
         .byte   $00
         .byte   $16
         .byte   $6c
         .byte   $1d
         .word   40         ;bounty (40)
         .byte   $3c
         .byte   $14
         .byte   85
         .byte   24
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00010000
         .byte   $12,$00,$28,$9f,$01,$bc ;vertices
         .byte   $12,$00,$28,$1f,$01,$23
         .byte   $1e,$00,$18,$3f,$23,$45
         .byte   $1e,$00,$28,$3f,$45,$66
         .byte   $12,$07,$28,$7f,$56,$7e
         .byte   $12,$07,$28,$ff,$78,$ae
         .byte   $1e,$00,$28,$bf,$89,$aa
         .byte   $1e,$00,$18,$bf,$9a,$bc
         .byte   $12,$07,$28,$bf,$78,$9d
         .byte   $12,$07,$28,$3f,$46,$7d
         .byte   $12,$07,$0d,$9f,$09,$bd
         .byte   $12,$07,$0d,$1f,$02,$4d
         .byte   $12,$07,$0d,$df,$1a,$ce
         .byte   $12,$07,$0d,$5f,$13,$5e
         .byte   $0b,$03,$1d,$85,$00,$00
         .byte   $0b,$03,$1d,$05,$00,$00
         .byte   $0b,$04,$18,$04,$00,$00
         .byte   $0b,$04,$18,$84,$00,$00
         .byte   $1f,$01,$00,$04 ;edges
         .byte   $07,$23,$04,$08
         .byte   $1f,$45,$08,$0c
         .byte   $1f,$56,$0c,$10
         .byte   $1f,$7e,$10,$14
         .byte   $1f,$8a,$14,$18
         .byte   $1f,$9a,$18,$1c
         .byte   $07,$bc,$1c,$00
         .byte   $1f,$46,$0c,$24
         .byte   $1f,$7d,$24,$20
         .byte   $1f,$89,$20,$18
         .byte   $1f,$0b,$00,$28
         .byte   $1f,$9b,$1c,$28
         .byte   $1f,$02,$04,$2c
         .byte   $1f,$24,$08,$2c
         .byte   $1f,$1c,$00,$30
         .byte   $1f,$ac,$1c,$30
         .byte   $1f,$13,$04,$34
         .byte   $1f,$35,$08,$34
         .byte   $1f,$0d,$28,$2c
         .byte   $1f,$1e,$30,$34
         .byte   $1f,$9d,$20,$28
         .byte   $1f,$4d,$24,$2c
         .byte   $1f,$ae,$14,$30
         .byte   $1f,$5e,$10,$34
         .byte   $05,$00,$38,$3c
         .byte   $03,$00,$3c,$40
         .byte   $04,$00,$40,$44
         .byte   $03,$00,$44,$38
         .byte   $1f,$00,$27,$0a ;faces
         .byte   $5f,$00,$27,$0a
         .byte   $1f,$45,$32,$0d
         .byte   $5f,$45,$32,$0d
         .byte   $1f,$1e,$34,$00
         .byte   $5f,$1e,$34,$00
         .byte   $3f,$00,$00,$a0
         .byte   $3f,$00,$00,$a0
         .byte   $3f,$00,$00,$a0
         .byte   $9f,$1e,$34,$00
         .byte   $df,$1e,$34,$00
         .byte   $9f,$45,$32,$0d
         .byte   $df,$45,$32,$0d
         .byte   $1f,$00,$1c,$00
         .byte   $5f,$00,$1c,$00
; Gecko.
hull_gecko:
         .byte   $00
         .word   $2649
         .byte   $5c
         .byte   $a0
         .byte   $45
         .byte   $00
         .byte   $1a
         .byte   $48
         .byte   $11
         .word   55         ;bounty (55)
         .byte   $24
         .byte   $12
         .byte   70
         .byte   30
         .byte   $00
         .byte   $00
         .byte   $03
         .byte   %00010000
         .byte   $0a,$04,$2f,$df,$03,$45 ;vertices
         .byte   $0a,$04,$2f,$5f,$01,$23
         .byte   $10,$08,$17,$bf,$05,$67
         .byte   $10,$08,$17,$3f,$01,$78
         .byte   $42,$00,$03,$bf,$45,$66
         .byte   $42,$00,$03,$3f,$12,$88
         .byte   $14,$0e,$17,$ff,$34,$67
         .byte   $14,$0e,$17,$7f,$23,$78
         .byte   $08,$06,$21,$d0,$33,$33
         .byte   $08,$06,$21,$51,$33,$33
         .byte   $08,$0d,$10,$f0,$33,$33
         .byte   $08,$0d,$10,$71,$33,$33
         .byte   $1f,$03,$00,$04 ;edges
         .byte   $1f,$12,$04,$14
         .byte   $1f,$18,$14,$0c
         .byte   $1f,$07,$0c,$08
         .byte   $1f,$56,$08,$10
         .byte   $1f,$45,$10,$00
         .byte   $1f,$28,$14,$1c
         .byte   $1f,$37,$1c,$18
         .byte   $1f,$46,$18,$10
         .byte   $1d,$05,$00,$08
         .byte   $1e,$01,$04,$0c
         .byte   $1d,$34,$00,$18
         .byte   $1e,$23,$04,$1c
         .byte   $14,$67,$08,$18
         .byte   $14,$78,$0c,$1c
         .byte   $10,$33,$20,$28
         .byte   $11,$33,$24,$2c
         .byte   $1f,$00,$1f,$05 ;faces
         .byte   $1f,$04,$2d,$08
         .byte   $5f,$19,$6c,$13
         .byte   $5f,$00,$54,$0c
         .byte   $df,$19,$6c,$13
         .byte   $9f,$04,$2d,$08
         .byte   $bf,$58,$10,$d6
         .byte   $3f,$00,$00,$bb
         .byte   $3f,$58,$10,$d6
; Cobra MK-I.
hull_cobra_mk1:
         .byte   $03
         .word   $2649
         .byte   $56
         .byte   $9e
         .byte   $49
         .byte   $28
         .byte   $1a
         .byte   $42
         .byte   $12
         .word   75         ;bounty (75)
         .byte   $28
         .byte   $13
         .byte   90
         .byte   26
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00010010
         .byte   $12,$01,$32,$df,$01,$23 ;vertices
         .byte   $12,$01,$32,$5f,$01,$45
         .byte   $42,$00,$07,$9f,$23,$88
         .byte   $42,$00,$07,$1f,$45,$99
         .byte   $20,$0c,$26,$bf,$26,$78
         .byte   $20,$0c,$26,$3f,$46,$79
         .byte   $36,$0c,$26,$ff,$13,$78
         .byte   $36,$0c,$26,$7f,$15,$79
         .byte   $00,$0c,$06,$34,$02,$46
         .byte   $00,$01,$32,$42,$01,$11
         .byte   $00,$01,$3c,$5f,$01,$11
         .byte   $1f,$01,$04,$00 ;edges
         .byte   $1f,$23,$00,$08
         .byte   $1f,$38,$08,$18
         .byte   $1f,$17,$18,$1c
         .byte   $1f,$59,$1c,$0c
         .byte   $1f,$45,$0c,$04
         .byte   $1f,$28,$08,$10
         .byte   $1f,$67,$10,$14
         .byte   $1f,$49,$14,$0c
         .byte   $14,$02,$00,$20
         .byte   $14,$04,$20,$04
         .byte   $10,$26,$10,$20
         .byte   $10,$46,$20,$14
         .byte   $1f,$78,$10,$18
         .byte   $1f,$79,$14,$1c
         .byte   $14,$13,$00,$18
         .byte   $14,$15,$04,$1c
         .byte   $02,$01,$28,$24
         .byte   $1f,$00,$29,$0a ;faces
         .byte   $5f,$00,$1b,$03
         .byte   $9f,$08,$2e,$08
         .byte   $df,$0c,$39,$0c
         .byte   $1f,$08,$2e,$08
         .byte   $5f,$0c,$39,$0c
         .byte   $1f,$00,$31,$00
         .byte   $3f,$00,$00,$9a
         .byte   $bf,$79,$6f,$3e
         .byte   $3f,$79,$6f,$3e
; Worm.
hull_worm:
         .byte   $00
         .word   $2649
         .byte   $50
         .byte   $90
         .byte   $4d
         .byte   $00
         .byte   $12
         .byte   $3c
         .byte   $10
         .word   0
         .byte   $20
         .byte   $13
         .byte   30
         .byte   23
         .byte   $00
         .byte   $00
         .byte   $03
         .byte   %00001000
         .byte   $0a,$0a,$23,$5f,$02,$77 ;vertices
         .byte   $0a,$0a,$23,$df,$03,$77
         .byte   $05,$06,$0f,$1f,$01,$24
         .byte   $05,$06,$0f,$9f,$01,$35
         .byte   $0f,$0a,$19,$5f,$24,$77
         .byte   $0f,$0a,$19,$df,$35,$77
         .byte   $1a,$0a,$19,$7f,$46,$77
         .byte   $1a,$0a,$19,$ff,$56,$77
         .byte   $08,$0e,$19,$3f,$14,$66
         .byte   $08,$0e,$19,$bf,$15,$66
         .byte   $1f,$07,$00,$04 ;edges
         .byte   $1f,$37,$04,$14
         .byte   $1f,$57,$14,$1c
         .byte   $1f,$67,$1c,$18
         .byte   $1f,$47,$18,$10
         .byte   $1f,$27,$10,$00
         .byte   $1f,$02,$00,$08
         .byte   $1f,$03,$04,$0c
         .byte   $1f,$24,$10,$08
         .byte   $1f,$35,$14,$0c
         .byte   $1f,$14,$08,$20
         .byte   $1f,$46,$20,$18
         .byte   $1f,$15,$0c,$24
         .byte   $1f,$56,$24,$1c
         .byte   $1f,$01,$08,$0c
         .byte   $1f,$16,$20,$24
         .byte   $1f,$00,$58,$46 ;faces
         .byte   $1f,$00,$45,$0e
         .byte   $1f,$46,$42,$23
         .byte   $9f,$46,$42,$23
         .byte   $1f,$40,$31,$0e
         .byte   $9f,$40,$31,$0e
         .byte   $3f,$00,$00,$c8
         .byte   $5f,$00,$50,$00
; Cobra MK-III (pirate edition).  Vertices are same as regular version.  Has two
; missiles instead of 3.
; 
;   edges offset $f500 -> $ac7a -> hull_cobra_mk3 edges
;   faces offset $f598 -> $ad12 -> hull_cobra_mk3 faces
hull_cobra3_pir:
         .byte   $01
         .word   $2341
         .byte   $00
         .byte   $98
         .byte   $9d
         .byte   $54
         .byte   $2a
         .byte   $a8
         .byte   $26
         .word   175        ;bounty (175)
         .byte   $34
         .byte   $32
         .byte   150
         .byte   28
         .byte   $f5
         .byte   $f5
         .byte   $01
         .byte   %00010010
         .byte   $20,$00,$4c,$1f,$ff,$ff ;vertices
         .byte   $20,$00,$4c,$9f,$ff,$ff
         .byte   $00,$1a,$18,$1f,$ff,$ff
         .byte   $78,$03,$08,$ff,$73,$aa
         .byte   $78,$03,$08,$7f,$84,$cc
         .byte   $58,$10,$28,$bf,$ff,$ff
         .byte   $58,$10,$28,$3f,$ff,$ff
         .byte   $80,$08,$28,$7f,$98,$cc
         .byte   $80,$08,$28,$ff,$97,$aa
         .byte   $00,$1a,$28,$3f,$65,$99
         .byte   $20,$18,$28,$ff,$a9,$bb
         .byte   $20,$18,$28,$7f,$b9,$cc
         .byte   $24,$08,$28,$b4,$99,$99
         .byte   $08,$0c,$28,$b4,$99,$99
         .byte   $08,$0c,$28,$34,$99,$99
         .byte   $24,$08,$28,$34,$99,$99
         .byte   $24,$0c,$28,$74,$99,$99
         .byte   $08,$10,$28,$74,$99,$99
         .byte   $08,$10,$28,$f4,$99,$99
         .byte   $24,$0c,$28,$f4,$99,$99
         .byte   $00,$00,$4c,$06,$b0,$bb
         .byte   $00,$00,$5a,$1f,$b0,$bb
         .byte   $50,$06,$28,$e8,$99,$99
         .byte   $50,$06,$28,$a8,$99,$99
         .byte   $58,$00,$28,$a6,$99,$99
         .byte   $50,$06,$28,$28,$99,$99
         .byte   $58,$00,$28,$26,$99,$99
         .byte   $50,$06,$28,$68,$99,$99
; Asp MK-II.
hull_asp_mk2:
         .byte   $00
         .word   $0e10
         .byte   $86
         .byte   $f6
         .byte   $69
         .byte   $20
         .byte   $1a
         .byte   $72
         .byte   $1c
         .word   200        ;bounty (200)
         .byte   $30
         .byte   $28
         .byte   150
         .byte   40
         .byte   $00
         .byte   $00
         .byte   $01
         .byte   %00101001
         .byte   $00,$12,$00,$56,$01,$22 ;vertices
         .byte   $00,$09,$2d,$7f,$12,$bb
         .byte   $2b,$00,$2d,$3f,$16,$bb
         .byte   $45,$03,$00,$5f,$16,$79
         .byte   $2b,$0e,$1c,$5f,$01,$77
         .byte   $2b,$00,$2d,$bf,$25,$bb
         .byte   $45,$03,$00,$df,$25,$8a
         .byte   $2b,$0e,$1c,$df,$02,$88
         .byte   $1a,$07,$49,$5f,$04,$79
         .byte   $1a,$07,$49,$df,$04,$8a
         .byte   $2b,$0e,$1c,$1f,$34,$69
         .byte   $2b,$0e,$1c,$9f,$34,$5a
         .byte   $00,$09,$2d,$3f,$35,$6b
         .byte   $11,$00,$2d,$aa,$bb,$bb
         .byte   $11,$00,$2d,$29,$bb,$bb
         .byte   $00,$04,$2d,$6a,$bb,$bb
         .byte   $00,$04,$2d,$28,$bb,$bb
         .byte   $00,$07,$49,$4a,$04,$04
         .byte   $00,$07,$53,$4a,$04,$04
         .byte   $16,$12,$00,$04 ;edges
         .byte   $16,$01,$00,$10
         .byte   $16,$02,$00,$1c
         .byte   $1f,$1b,$04,$08
         .byte   $1f,$16,$08,$0c
         .byte   $10,$79,$0c,$20
         .byte   $1f,$04,$20,$24
         .byte   $10,$8a,$18,$24
         .byte   $1f,$25,$14,$18
         .byte   $1f,$2b,$04,$14
         .byte   $1f,$17,$0c,$10
         .byte   $1f,$07,$10,$20
         .byte   $1f,$28,$18,$1c
         .byte   $1f,$08,$1c,$24
         .byte   $1f,$6b,$08,$30
         .byte   $1f,$5b,$14,$30
         .byte   $16,$36,$28,$30
         .byte   $16,$35,$2c,$30
         .byte   $16,$34,$28,$2c
         .byte   $1f,$5a,$18,$2c
         .byte   $1f,$4a,$24,$2c
         .byte   $1f,$69,$0c,$28
         .byte   $1f,$49,$20,$28
         .byte   $0a,$bb,$34,$3c
         .byte   $09,$bb,$3c,$38
         .byte   $08,$bb,$38,$40
         .byte   $08,$bb,$40,$34
         .byte   $0a,$04,$48,$44
         .byte   $5f,$00,$23,$05 ;faces
         .byte   $7f,$08,$26,$07
         .byte   $ff,$08,$26,$07
         .byte   $36,$00,$18,$01
         .byte   $1f,$00,$2b,$13
         .byte   $bf,$06,$1c,$02
         .byte   $3f,$06,$1c,$02
         .byte   $5f,$3b,$40,$1f
         .byte   $df,$3b,$40,$1f
         .byte   $1f,$50,$2e,$32
         .byte   $9f,$50,$2e,$32
         .byte   $3f,$00,$00,$5a
         .byte   $e7        ;?
         .byte   $33
         .byte   $53
         .byte   $08
; Python (pirate edition).  Vertices are same as regular version.
; 
;   edges offset $f43c -> $ad9c -> hull_python edges
;   faces offset $f4a4 -> $ae04 -> hull_python faces
hull_python_pir:
         .byte   $02
         .word   $1900
         .byte   $3c
         .byte   $a4
         .byte   $59
         .byte   $00
         .byte   $2a
         .byte   $42
         .byte   $1a
         .word   200        ;bounty (200)
         .byte   $34
         .byte   $28
         .byte   250
         .byte   20
         .byte   $f4
         .byte   $f4
         .byte   $00
         .byte   %00011011
         .byte   $00,$00,$e0,$1f,$10,$32 ;vertices
         .byte   $00,$30,$30,$1f,$10,$54
         .byte   $60,$00,$10,$3f,$ff,$ff
         .byte   $60,$00,$10,$bf,$ff,$ff
         .byte   $00,$30,$20,$3f,$54,$98
         .byte   $00,$18,$70,$3f,$89,$cc
         .byte   $30,$00,$70,$bf,$b8,$cc
         .byte   $30,$00,$70,$3f,$a9,$cc
         .byte   $00,$30,$30,$5f,$32,$76
         .byte   $00,$30,$20,$7f,$76,$ba
         .byte   $00,$18,$70,$7f,$ba,$cc
; Fer-de-lance.
hull_ferdelance:
         .byte   $00
         .word   $0640
         .byte   $86
         .byte   $f2
         .byte   $6d
         .byte   $00
         .byte   $1a
         .byte   $72
         .byte   $1b
         .word   0
         .byte   $28
         .byte   $28
         .byte   160
         .byte   30
         .byte   $00
         .byte   $00
         .byte   $01
         .byte   %00010010
         .byte   $00,$0e,$6c,$5f,$01,$59 ;vertices
         .byte   $28,$0e,$04,$ff,$12,$99
         .byte   $0c,$0e,$34,$ff,$23,$99
         .byte   $0c,$0e,$34,$7f,$34,$99
         .byte   $28,$0e,$04,$7f,$45,$99
         .byte   $28,$0e,$04,$bc,$01,$26
         .byte   $0c,$02,$34,$bc,$23,$67
         .byte   $0c,$02,$34,$3c,$34,$78
         .byte   $28,$0e,$04,$3c,$04,$58
         .byte   $00,$12,$14,$2f,$06,$78
         .byte   $03,$0b,$61,$cb,$00,$00
         .byte   $1a,$08,$12,$89,$00,$00
         .byte   $10,$0e,$04,$ab,$00,$00
         .byte   $03,$0b,$61,$4b,$00,$00
         .byte   $1a,$08,$12,$09,$00,$00
         .byte   $10,$0e,$04,$2b,$00,$00
         .byte   $00,$0e,$14,$6c,$99,$99
         .byte   $0e,$0e,$2c,$cc,$99,$99
         .byte   $0e,$0e,$2c,$4c,$99,$99
         .byte   $1f,$19,$00,$04 ;edges
         .byte   $1f,$29,$04,$08
         .byte   $1f,$39,$08,$0c
         .byte   $1f,$49,$0c,$10
         .byte   $1f,$59,$00,$10
         .byte   $1c,$01,$00,$14
         .byte   $1c,$26,$14,$18
         .byte   $1c,$37,$18,$1c
         .byte   $1c,$48,$1c,$20
         .byte   $1c,$05,$00,$20
         .byte   $0f,$06,$14,$24
         .byte   $0b,$67,$18,$24
         .byte   $0b,$78,$1c,$24
         .byte   $0f,$08,$20,$24
         .byte   $0e,$12,$04,$14
         .byte   $0e,$23,$08,$18
         .byte   $0e,$34,$0c,$1c
         .byte   $0e,$45,$10,$20
         .byte   $08,$00,$28,$2c
         .byte   $09,$00,$2c,$30
         .byte   $0b,$00,$28,$30
         .byte   $08,$00,$34,$38
         .byte   $09,$00,$38,$3c
         .byte   $0b,$00,$34,$3c
         .byte   $0c,$99,$40,$44
         .byte   $0c,$99,$40,$48
         .byte   $08,$99,$44,$48
         .byte   $1c,$00,$18,$06 ;faces
         .byte   $9f,$44,$00,$18
         .byte   $bf,$3f,$00,$25
         .byte   $3f,$00,$00,$68
         .byte   $3f,$3f,$00,$25
         .byte   $1f,$44,$00,$18
         .byte   $bc,$0c,$2e,$13
         .byte   $3c,$00,$2d,$16
         .byte   $3c,$0c,$2e,$13
         .byte   $5f,$00,$1c,$00
; Moray.
hull_moray:
         .byte   $01
         .word   $0384
         .byte   $68
         .byte   $b4
         .byte   $49
         .byte   $00
         .byte   $1a
         .byte   $54
         .byte   $13
         .word   50         ;bounty (50)
         .byte   $24
         .byte   $28
         .byte   100
         .byte   25
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00010000
         .byte   $0f,$00,$41,$1f,$02,$78 ;vertices
         .byte   $0f,$00,$41,$9f,$01,$67
         .byte   $00,$12,$28,$31,$ff,$ff
         .byte   $3c,$00,$00,$9f,$13,$66
         .byte   $3c,$00,$00,$1f,$25,$88
         .byte   $1e,$1b,$0a,$78,$45,$78
         .byte   $1e,$1b,$0a,$f8,$34,$67
         .byte   $09,$04,$19,$e7,$44,$44
         .byte   $09,$04,$19,$67,$44,$44
         .byte   $00,$12,$10,$67,$44,$44
         .byte   $0d,$03,$31,$05,$00,$00
         .byte   $06,$00,$41,$05,$00,$00
         .byte   $0d,$03,$31,$85,$00,$00
         .byte   $06,$00,$41,$85,$00,$00
         .byte   $1f,$07,$00,$04 ;edges
         .byte   $1f,$16,$04,$0c
         .byte   $18,$36,$0c,$18
         .byte   $18,$47,$14,$18
         .byte   $18,$58,$10,$14
         .byte   $1f,$28,$00,$10
         .byte   $0f,$67,$04,$18
         .byte   $0f,$78,$00,$14
         .byte   $0f,$02,$00,$08
         .byte   $0f,$01,$04,$08
         .byte   $11,$13,$08,$0c
         .byte   $11,$25,$08,$10
         .byte   $0d,$45,$08,$14
         .byte   $0d,$34,$08,$18
         .byte   $05,$44,$1c,$20
         .byte   $07,$44,$1c,$24
         .byte   $07,$44,$20,$24
         .byte   $05,$00,$28,$2c
         .byte   $05,$00,$30,$34
         .byte   $1f,$00,$2b,$07 ;faces
         .byte   $9f,$0a,$31,$07
         .byte   $1f,$0a,$31,$07
         .byte   $f8,$3b,$1c,$65
         .byte   $78,$00,$34,$4e
         .byte   $78,$3b,$1c,$65
         .byte   $df,$48,$63,$32
         .byte   $5f,$00,$53,$1e
         .byte   $5f,$48,$63,$32
; Thargoid.
hull_thargoid:
         .byte   $00
         .word   $2649
         .byte   $8c
         .byte   $f4
         .byte   $69
         .byte   $3c
         .byte   $26
         .byte   $78
         .byte   $1a
         .word   500        ;bounty (500)
         .byte   $28
         .byte   $37
         .byte   240
         .byte   39
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00010110
         .byte   $20,$30,$30,$5f,$40,$88 ;vertices
         .byte   $20,$44,$00,$5f,$10,$44
         .byte   $20,$30,$30,$7f,$21,$44
         .byte   $20,$00,$44,$3f,$32,$44
         .byte   $20,$30,$30,$3f,$43,$55
         .byte   $20,$44,$00,$1f,$54,$66
         .byte   $20,$30,$30,$1f,$64,$77
         .byte   $20,$00,$44,$1f,$74,$88
         .byte   $18,$74,$74,$df,$80,$99
         .byte   $18,$a4,$00,$df,$10,$99
         .byte   $18,$74,$74,$ff,$21,$99
         .byte   $18,$00,$a4,$bf,$32,$99
         .byte   $18,$74,$74,$bf,$53,$99
         .byte   $18,$a4,$00,$9f,$65,$99
         .byte   $18,$74,$74,$9f,$76,$99
         .byte   $18,$00,$a4,$9f,$87,$99
         .byte   $18,$40,$50,$9e,$99,$99
         .byte   $18,$40,$50,$be,$99,$99
         .byte   $18,$40,$50,$fe,$99,$99
         .byte   $18,$40,$50,$de,$99,$99
         .byte   $1f,$84,$00,$1c ;edges
         .byte   $1f,$40,$00,$04
         .byte   $1f,$41,$04,$08
         .byte   $1f,$42,$08,$0c
         .byte   $1f,$43,$0c,$10
         .byte   $1f,$54,$10,$14
         .byte   $1f,$64,$14,$18
         .byte   $1f,$74,$18,$1c
         .byte   $1f,$80,$00,$20
         .byte   $1f,$10,$04,$24
         .byte   $1f,$21,$08,$28
         .byte   $1f,$32,$0c,$2c
         .byte   $1f,$53,$10,$30
         .byte   $1f,$65,$14,$34
         .byte   $1f,$76,$18,$38
         .byte   $1f,$87,$1c,$3c
         .byte   $1f,$98,$20,$3c
         .byte   $1f,$90,$20,$24
         .byte   $1f,$91,$24,$28
         .byte   $1f,$92,$28,$2c
         .byte   $1f,$93,$2c,$30
         .byte   $1f,$95,$30,$34
         .byte   $1f,$96,$34,$38
         .byte   $1f,$97,$38,$3c
         .byte   $1e,$99,$40,$44
         .byte   $1e,$99,$48,$4c
         .byte   $5f,$67,$3c,$19 ;faces
         .byte   $7f,$67,$3c,$19
         .byte   $7f,$67,$19,$3c
         .byte   $3f,$67,$19,$3c
         .byte   $1f,$40,$00,$00
         .byte   $3f,$67,$3c,$19
         .byte   $1f,$67,$3c,$19
         .byte   $1f,$67,$19,$3c
         .byte   $5f,$67,$19,$3c
         .byte   $9f,$30,$00,$00
; Thargon (Thargoid drone ships).
; 
;   edges offset $e9da -> $a69e -> hull_cargo edges
hull_thargon:
         .byte   $f0
         .word   $0640
         .byte   $da
         .byte   $50
         .byte   $45
         .byte   $00
         .byte   $12
         .byte   $3c
         .byte   $0f
         .word   50         ;bounty (50)
         .byte   $1c
         .byte   $14
         .byte   20
         .byte   30
         .byte   $e9
         .byte   $00
         .byte   $02
         .byte   %00010000
         .byte   $09,$00,$28,$9f,$01,$55 ;vertices
         .byte   $09,$26,$0c,$df,$01,$22
         .byte   $09,$18,$20,$ff,$02,$33
         .byte   $09,$18,$20,$bf,$03,$44
         .byte   $09,$26,$0c,$9f,$04,$55
         .byte   $09,$00,$08,$3f,$15,$66
         .byte   $09,$0a,$0f,$7f,$12,$66
         .byte   $09,$06,$1a,$7f,$23,$66
         .byte   $09,$06,$1a,$3f,$34,$66
         .byte   $09,$0a,$0f,$3f,$45,$66
         .byte   $9f,$24,$00,$00 ;faces
         .byte   $5f,$14,$05,$07
         .byte   $7f,$2e,$2a,$0e
         .byte   $3f,$24,$00,$68
         .byte   $3f,$2e,$2a,$0e
         .byte   $1f,$14,$05,$07
         .byte   $1f,$24,$00,$00
; Constrictor.
hull_constrictor:
         .byte   $03
         .word   $1081
         .byte   $7a
         .byte   $da
         .byte   $51
         .byte   $00
         .byte   $2e
         .byte   $66
         .byte   $18
         .word   0
         .byte   $28
         .byte   $2d
         .byte   252
         .byte   36
         .byte   $00
         .byte   $00
         .byte   $02
         .byte   %00110100
         .byte   $14,$07,$50,$5f,$02,$99 ;vertices
         .byte   $14,$07,$50,$df,$01,$99
         .byte   $36,$07,$28,$df,$14,$99
         .byte   $36,$07,$28,$ff,$45,$89
         .byte   $14,$0d,$28,$bf,$56,$88
         .byte   $14,$0d,$28,$3f,$67,$88
         .byte   $36,$07,$28,$7f,$37,$89
         .byte   $36,$07,$28,$5f,$23,$99
         .byte   $14,$0d,$05,$1f,$ff,$ff
         .byte   $14,$0d,$05,$9f,$ff,$ff
         .byte   $14,$07,$3e,$52,$99,$99
         .byte   $14,$07,$3e,$d2,$99,$99
         .byte   $19,$07,$19,$72,$99,$99
         .byte   $19,$07,$19,$f2,$99,$99
         .byte   $0f,$07,$0f,$6a,$99,$99
         .byte   $0f,$07,$0f,$ea,$99,$99
         .byte   $00,$07,$00,$40,$9f,$01
         .byte   $1f,$09,$00,$04 ;edges
         .byte   $1f,$19,$04,$08
         .byte   $1f,$01,$04,$24
         .byte   $1f,$02,$00,$20
         .byte   $1f,$29,$00,$1c
         .byte   $1f,$23,$1c,$20
         .byte   $1f,$14,$08,$24
         .byte   $1f,$49,$08,$0c
         .byte   $1f,$39,$18,$1c
         .byte   $1f,$37,$18,$20
         .byte   $1f,$67,$14,$20
         .byte   $1f,$56,$10,$24
         .byte   $1f,$45,$0c,$24
         .byte   $1f,$58,$0c,$10
         .byte   $1f,$68,$10,$14
         .byte   $1f,$78,$14,$18
         .byte   $1f,$89,$0c,$18
         .byte   $1f,$06,$20,$24
         .byte   $12,$99,$28,$30
         .byte   $05,$99,$30,$38
         .byte   $0a,$99,$38,$28
         .byte   $0a,$99,$2c,$3c
         .byte   $05,$99,$34,$3c
         .byte   $12,$99,$2c,$34
         .byte   $1f,$00,$37,$0f ;faces
         .byte   $9f,$18,$4b,$14
         .byte   $1f,$18,$4b,$14
         .byte   $1f,$2c,$4b,$00
         .byte   $9f,$2c,$4b,$00
         .byte   $9f,$2c,$4b,$00
         .byte   $1f,$00,$35,$00
         .byte   $1f,$2c,$4b,$00
         .byte   $3f,$00,$00,$a0
         .byte   $5f,$00,$1b,$00
; Dodecahedral space station.
hull_dodo:
         .byte   $00
         .word   $7e90
         .byte   $a4
         .byte   $2c
         .byte   $65
         .byte   $00
         .byte   $36
         .byte   $90
         .byte   $22
         .word   0
         .byte   $30
         .byte   $7d
         .byte   240
         .byte   0
         .byte   $00
         .byte   $01
         .byte   $00
         .byte   %00000000
         .byte   $00,$96,$c4,$1f,$01,$55 ;vertices
         .byte   $8f,$2e,$c4,$1f,$01,$22
         .byte   $58,$79,$c4,$5f,$02,$33
         .byte   $58,$79,$c4,$df,$03,$44
         .byte   $8f,$2e,$c4,$9f,$04,$55
         .byte   $00,$f3,$2e,$1f,$15,$66
         .byte   $e7,$4b,$2e,$1f,$12,$77
         .byte   $8f,$c4,$2e,$5f,$23,$88
         .byte   $8f,$c4,$2e,$df,$34,$99
         .byte   $e7,$4b,$2e,$9f,$45,$aa
         .byte   $8f,$c4,$2e,$3f,$16,$77
         .byte   $e7,$4b,$2e,$7f,$27,$88
         .byte   $00,$f3,$2e,$7f,$38,$99
         .byte   $e7,$4b,$2e,$ff,$49,$aa
         .byte   $8f,$c4,$2e,$bf,$56,$aa
         .byte   $58,$79,$c4,$3f,$67,$bb
         .byte   $8f,$2e,$c4,$7f,$78,$bb
         .byte   $00,$96,$c4,$7f,$89,$bb
         .byte   $8f,$2e,$c4,$ff,$9a,$bb
         .byte   $58,$79,$c4,$bf,$6a,$bb
         .byte   $10,$20,$c4,$9e,$00,$00
         .byte   $10,$20,$c4,$de,$00,$00
         .byte   $10,$20,$c4,$17,$00,$00
         .byte   $10,$20,$c4,$57,$00,$00
         .byte   $1f,$01,$00,$04 ;edges
         .byte   $1f,$02,$04,$08
         .byte   $1f,$03,$08,$0c
         .byte   $1f,$04,$0c,$10
         .byte   $1f,$05,$10,$00
         .byte   $1f,$16,$14,$28
         .byte   $1f,$17,$28,$18
         .byte   $1f,$27,$18,$2c
         .byte   $1f,$28,$2c,$1c
         .byte   $1f,$38,$1c,$30
         .byte   $1f,$39,$30,$20
         .byte   $1f,$49,$20,$34
         .byte   $1f,$4a,$34,$24
         .byte   $1f,$5a,$24,$38
         .byte   $1f,$56,$38,$14
         .byte   $1f,$7b,$3c,$40
         .byte   $1f,$8b,$40,$44
         .byte   $1f,$9b,$44,$48
         .byte   $1f,$ab,$48,$4c
         .byte   $1f,$6b,$4c,$3c
         .byte   $1f,$15,$00,$14
         .byte   $1f,$12,$04,$18
         .byte   $1f,$23,$08,$1c
         .byte   $1f,$34,$0c,$20
         .byte   $1f,$45,$10,$24
         .byte   $1f,$67,$28,$3c
         .byte   $1f,$78,$2c,$40
         .byte   $1f,$89,$30,$44
         .byte   $1f,$9a,$34,$48
         .byte   $1f,$6a,$38,$4c
         .byte   $1e,$00,$50,$54
         .byte   $14,$00,$54,$5c
         .byte   $17,$00,$5c,$58
         .byte   $14,$00,$58,$50
         .byte   $1f,$00,$00,$c4 ;faces
         .byte   $1f,$67,$8e,$58
         .byte   $5f,$a9,$37,$59
         .byte   $5f,$00,$b0,$58
         .byte   $df,$a9,$37,$59
         .byte   $9f,$67,$8e,$58
         .byte   $3f,$00,$b0,$58
         .byte   $3f,$a9,$37,$59
         .byte   $7f,$67,$8e,$58
         .byte   $ff,$67,$8e,$58
         .byte   $bf,$a9,$37,$59
         .byte   $3f,$00,$00,$c4
; This doesn't seem to be used.
         .byte   $08,$08,$03,$fe,$00,$5c,$a0,$6c,$73,$73,$31,$00,$90,$20,$b8,$00
         .byte   $00,$a9,$9f,$52,$35,$00,$90,$20,$c0,$00,$00,$be,$9f,$52,$37,$00
         .byte   $90,$20,$cb,$00,$00,$28,$a1,$48,$50,$52,$00,$90,$20,$e6,$00,$00
         .byte   $cc,$9f,$52,$61,$66,$74,$65,$72,$00,$90,$20,$f4,$00,$00,$d7,$9f
         .byte   $52,$58,$32,$00,$90,$21,$00,$00,$00,$e2,$9f,$52,$58,$31,$00,$90
         .byte   $21,$04,$00,$00,$ec,$9f,$52,$31,$00,$90,$21,$0c,$00,$00,$f6,$9f
         .byte   $52,$61,$00,$90,$21,$17,$00,$00,$00,$a0,$52,$36,$00,$90,$21,$30
         .byte   $00,$00
